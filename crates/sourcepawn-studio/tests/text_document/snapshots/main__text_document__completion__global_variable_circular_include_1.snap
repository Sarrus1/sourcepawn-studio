---
source: crates/sourcepawn-studio/tests/text_document/completion.rs
assertion_line: 33
expression: "complete(r#\"\n%! foo.sp\n#include \"bar.sp\"\nint foo;\n%! bar.sp\n#include \"foo.sp\"\nint bar;\n\n|\n^\"#)"
---
[
  {
    "label": "",
    "labelDetails": {
      "description": "DataPackPos::"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ADMFLAG_BAN",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_BAN (1<<3)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Ban as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CHANGEMAP",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CHANGEMAP (1<<6)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Changemap as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CHAT",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CHAT (1<<9)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Chat as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CHEATS",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CHEATS (1<<13)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Cheats as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CONFIG",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CONFIG (1<<8)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Config as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CONVARS",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CONVARS (1<<7)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Convars as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CUSTOM1",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CUSTOM1 (1<<15)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Custom1 as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CUSTOM2",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CUSTOM2 (1<<16)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Custom2 as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CUSTOM3",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CUSTOM3 (1<<17)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Custom3 as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CUSTOM4",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CUSTOM4 (1<<18)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Custom4 as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CUSTOM5",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CUSTOM5 (1<<19)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Custom5 as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_CUSTOM6",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_CUSTOM6 (1<<20)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Custom6 as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_GENERIC",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_GENERIC (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Generic as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_KICK",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_KICK (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Kick as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_PASSWORD",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_PASSWORD (1<<11)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Password as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_RCON",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_RCON (1<<12)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_RCON as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_RESERVATION",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_RESERVATION (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Reservation as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_ROOT",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_ROOT (1<<14)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Root as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_SLAY",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_SLAY (1<<5)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Slay as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_UNBAN",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_UNBAN (1<<4)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Unban as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "ADMFLAG_VOTE",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define ADMFLAG_VOTE (1<<10)",
    "documentation": {
      "kind": "markdown",
      "value": " Convenience macro for Admin_Vote as a FlagBit "
    },
    "tags": []
  },
  {
    "label": "APLRes",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 13,
    "detail": "enum APLRes"
  },
  {
    "label": "APLRes_Failure",
    "labelDetails": {
      "description": "APLRes::APLRes_Failure"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "APLRes_SilentFailure",
    "labelDetails": {
      "description": "APLRes::APLRes_SilentFailure"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "APLRes_Success",
    "labelDetails": {
      "description": "APLRes::APLRes_Success"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AUTHMETHOD_IP",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define AUTHMETHOD_IP \"ip\"",
    "documentation": {
      "kind": "markdown",
      "value": " IP based authentication "
    },
    "tags": []
  },
  {
    "label": "AUTHMETHOD_NAME",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define AUTHMETHOD_NAME \"name\"",
    "documentation": {
      "kind": "markdown",
      "value": " Name based authentication "
    },
    "tags": []
  },
  {
    "label": "AUTHMETHOD_STEAM",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define AUTHMETHOD_STEAM \"steam\"",
    "documentation": {
      "kind": "markdown",
      "value": " SteamID based authentication "
    },
    "tags": []
  },
  {
    "label": "AUTOLOAD_EXTENSIONS",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "Access_Effective",
    "labelDetails": {
      "description": "AdmAccessMode::Access_Effective"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Access_Real",
    "labelDetails": {
      "description": "AdmAccessMode::Access_Real"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Action",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 13
  },
  {
    "label": "AddAdmGroupCmdOverride",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void AddAdmGroupCmdOverride(GroupId id, const char[] name, OverrideType type, OverrideRule rule)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a group-specific override type.\n\n_@param_ `id` — >Group id.\n\n_@param_ `name` — >String containing command name (case sensitive).\n\n_@param_ `type` — >Override type (specific command or group).\n\n_@param_ `rule` — >Override allow/deny setting.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddCommandListener",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool AddCommandListener(CommandListener callback, const char[] command=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a callback that will fire when a command is sent to the server.\r\n \n Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general.\r\n \n To see if this feature is available, use FeatureType_Capability and  FEATURECAP_COMMANDLISTENER.\n\n_@param_ `callback` — >Callback.\n\n_@param_ `command` — >Command, or if not specified, a global listener.                      The command is case insensitive.\n\n_@return_ True if this feature is available on the current game,                      false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddCommandOverride",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void AddCommandOverride(const char[] cmd, OverrideType type, int flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a global command flag override.  Any command registered with this name will assume the new flag.  This is applied retroactively as well.\n\n_@param_ `cmd` — >String containing command name (case sensitive).\n\n_@param_ `type` — >Override type (specific command or group).\n\n_@param_ `flags` — >New admin flag.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddGameLogHook",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void AddGameLogHook(GameLogHook hook)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a game log hook.\n\n_@param_ `hook` — >Hook function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddMenuItem",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddMultiTargetFilter",
    "labelDetails": {
      "detail": "void",
      "description": "commandfilters.inc"
    },
    "kind": 3,
    "detail": "native void AddMultiTargetFilter(const char[] pattern, MultiTargetFilter filter,\n                                 const char[] phrase, bool phraseIsML)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a multi-target filter function for `ProcessTargetString()`.\n\n_@param_ `pattern` — >Pattern to match (case sensitive).\n\n_@param_ `filter` — >Filter function.\n\n_@param_ `phrase` — >Descriptive phrase to display on successful match.\n\n_@param_ `phraseIsML` — >True if phrase is multi-lingual, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddServerTag",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void AddServerTag(const char[] tag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds an informational string to the server's public \"tags\". This string should be a short, unique identifier.\r\n \n Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master.\n\n_@param_ `tag` — >Tag string to append.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddToForward",
    "labelDetails": {
      "detail": "bool",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native bool AddToForward(Handle fwd, Handle plugin, Function func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a function to a private forward's call list.\n\n_@note_ Cannot be used during an incomplete call.\n\n_@param_ `fwd` — >Handle to private forward.\n\n_@param_ `plugin` — >Handle of the plugin that contains the function.                      Pass INVALID_HANDLE to specify the calling plugin.\n\n_@param_ `func` — >Function to add to forward.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddUserFlags",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void AddUserFlags(int client, AdminFlag ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `...` — >Flags to set on the client.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AddVectors",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "stock void AddVectors(const float vec1[3], const float vec2[3], float result[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds two vectors.  It is safe to use either input buffer as an output buffer.\n\n_@param_ `vec1` — >First vector.\n\n_@param_ `vec2` — >Second vector.\n\n_@param_ `result` — >Result buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Address",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 13,
    "detail": "enum Address"
  },
  {
    "label": "Address_Null",
    "labelDetails": {
      "description": "Address::Address_Null"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AdmAccessMode",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum AdmAccessMode",
    "documentation": {
      "kind": "markdown",
      "value": "\n Methods of computing access permissions.\r\n "
    }
  },
  {
    "label": "AdminCachePart",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum AdminCachePart",
    "documentation": {
      "kind": "markdown",
      "value": "\n Represents the various cache regions.\r\n "
    }
  },
  {
    "label": "AdminCache_Admins",
    "labelDetails": {
      "description": "AdminCachePart::AdminCache_Admins"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AdminCache_Groups",
    "labelDetails": {
      "description": "AdminCachePart::AdminCache_Groups"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AdminCache_Overrides",
    "labelDetails": {
      "description": "AdminCachePart::AdminCache_Overrides"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AdminFlag",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum AdminFlag",
    "documentation": {
      "kind": "markdown",
      "value": "\n Access levels (flags) for admins.\r\n "
    }
  },
  {
    "label": "AdminFlags_TOTAL",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define AdminFlags_TOTAL 21",
    "documentation": {
      "kind": "markdown",
      "value": " Total number of admin flags "
    },
    "tags": []
  },
  {
    "label": "AdminId",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum AdminId",
    "documentation": {
      "kind": "markdown",
      "value": "\n Identifies a unique entry in the admin permissions cache.  These are not Handles.\r\n "
    }
  },
  {
    "label": "AdminId",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 7,
    "detail": "enum AdminId",
    "documentation": {
      "kind": "markdown",
      "value": "\n Identifies a unique entry in the admin permissions cache.  These are not Handles.\r\n "
    }
  },
  {
    "label": "AdminInheritGroup",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool AdminInheritGroup(AdminId id, GroupId gid)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a group to an admin's inherited group list.  Any flags the group has will be added to the admin's effective flags.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `gid` — >GroupId index of the group.\n\n_@return_ True on success, false on invalid input or duplicate membership.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Admin_Ban",
    "labelDetails": {
      "description": "AdminFlag::Admin_Ban"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Changemap",
    "labelDetails": {
      "description": "AdminFlag::Admin_Changemap"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Chat",
    "labelDetails": {
      "description": "AdminFlag::Admin_Chat"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Cheats",
    "labelDetails": {
      "description": "AdminFlag::Admin_Cheats"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Config",
    "labelDetails": {
      "description": "AdminFlag::Admin_Config"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Convars",
    "labelDetails": {
      "description": "AdminFlag::Admin_Convars"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Custom1",
    "labelDetails": {
      "description": "AdminFlag::Admin_Custom1"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Custom2",
    "labelDetails": {
      "description": "AdminFlag::Admin_Custom2"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Custom3",
    "labelDetails": {
      "description": "AdminFlag::Admin_Custom3"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Custom4",
    "labelDetails": {
      "description": "AdminFlag::Admin_Custom4"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Custom5",
    "labelDetails": {
      "description": "AdminFlag::Admin_Custom5"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Custom6",
    "labelDetails": {
      "description": "AdminFlag::Admin_Custom6"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Generic",
    "labelDetails": {
      "description": "AdminFlag::Admin_Generic"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Kick",
    "labelDetails": {
      "description": "AdminFlag::Admin_Kick"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Password",
    "labelDetails": {
      "description": "AdminFlag::Admin_Password"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_RCON",
    "labelDetails": {
      "description": "AdminFlag::Admin_RCON"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Reservation",
    "labelDetails": {
      "description": "AdminFlag::Admin_Reservation"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Root",
    "labelDetails": {
      "description": "AdminFlag::Admin_Root"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Slay",
    "labelDetails": {
      "description": "AdminFlag::Admin_Slay"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Unban",
    "labelDetails": {
      "description": "AdminFlag::Admin_Unban"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Admin_Vote",
    "labelDetails": {
      "description": "AdminFlag::Admin_Vote"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ArcCosine",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float ArcCosine(float angle)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the arccosine of the input value.\n\n_@param_ `angle` — >Input value.\n\n_@return_ `acos(value)` in radians.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ArcSine",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float ArcSine(float angle)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the arcsine of the input value.\n\n_@param_ `angle` — >Input value.\n\n_@return_ `asin(value)` in radians.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ArcTangent",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float ArcTangent(float angle)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the arctangent of the input value.\n\n_@param_ `angle` — >Input value.\n\n_@return_ `atan(value)` in radians.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ArcTangent2",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float ArcTangent2(float x, float y)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the arctangent2 of the input values.\n\n_@param_ `x` — >Horizontal value.\n\n_@param_ `y` — >Vertical value.\n\n_@return_ `atan2(value)` in radians.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ArrayList",
    "labelDetails": {
      "description": "adt_array.inc"
    },
    "kind": 7,
    "detail": "methodmap ArrayList"
  },
  {
    "label": "ArrayStack",
    "labelDetails": {
      "description": "adt_stack.inc"
    },
    "kind": 7,
    "detail": "methodmap ArrayStack"
  },
  {
    "label": "AskPluginLoad",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward bool AskPluginLoad(Handle myself, bool late, char[] error, int err_max)",
    "documentation": {
      "kind": "markdown",
      "value": "\n\n_@deprecated_ Use `AskPluginLoad2()` instead. If a plugin contains both `AskPluginLoad()` and `AskPluginLoad2()`, the former will not be called, but old plugins with only `AskPluginLoad()` will work.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "AskPluginLoad2",
    "labelDetails": {
      "detail": "APLRes",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called before OnPluginStart, in case the plugin wants to check for load failure. This is called even if the plugin type is \"private.\"  Any natives from modules are not available at this point.  Thus, this forward should only be used for explicit pre-emptive things, such as adding dynamic natives, setting certain types of load filters (such as not loading the plugin for certain games).\n\n_@note_ It is not safe to call externally resolved natives until `OnPluginStart()`.\n\n_@note_ Any sort of RTE in this function will cause the plugin to fail loading.\n\n_@note_ If you do not return anything, it is treated like returning success.\n\n_@note_ If a plugin has an `AskPluginLoad2()`, `AskPluginLoad()` will not be called.\n\n_@param_ `myself` — >Handle to the plugin.\n\n_@param_ `late` — >Whether or not the plugin was loaded \"late\" (after map load).\n\n_@param_ `error` — >Error message buffer in case load failed.\n\n_@param_ `err_max` — >Maximum number of characters for error message buffer.\n\n_@return_ APLRes_Success for load success, APLRes_Failure or APLRes_SilentFailure otherwise\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "AuthIdType",
    "labelDetails": {
      "description": "clients.inc"
    },
    "kind": 13,
    "detail": "enum AuthIdType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Auth string types.\r\n \n Note that for the Steam2 and Steam3 types, the following ids are also valid values: \"STEAM_ID_PENDING\" - Authentication is pending. \"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server. \"BOT\" - The client is a bot.\r\n "
    }
  },
  {
    "label": "AuthId_Engine",
    "labelDetails": {
      "description": "AuthIdType::AuthId_Engine"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AuthId_Steam2",
    "labelDetails": {
      "description": "AuthIdType::AuthId_Steam2"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AuthId_Steam3",
    "labelDetails": {
      "description": "AuthIdType::AuthId_Steam3"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AuthId_SteamID64",
    "labelDetails": {
      "description": "AuthIdType::AuthId_SteamID64"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "AutoExecConfig",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void AutoExecConfig(bool autoCreate=true, const char[] name=\"\", const char[] folder=\"sourcemod\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Specifies that the given config file should be executed after plugin load. `OnConfigsExecuted()` will not be called until the config file has executed, but it will be called if the execution fails.\n\n_@param_ `autoCreate` — >If true, and the config file does not exist, such a config                      file will be automatically created and populated with                      information from the plugin's registered cvars.\n\n_@param_ `name` — >Name of the config file, excluding the .cfg extension.                      If empty, \\<plugin.filename.cfg\\> is assumed.\n\n_@param_ `folder` — >Folder under cfg/ to use.  By default this is \"sourcemod.\"\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BANFLAG_AUTHID",
    "labelDetails": {
      "description": "banning.inc"
    },
    "kind": 21,
    "detail": "#define BANFLAG_AUTHID (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " Always ban by authstring (for BanIdentity) if possible "
    },
    "tags": []
  },
  {
    "label": "BANFLAG_AUTO",
    "labelDetails": {
      "description": "banning.inc"
    },
    "kind": 21,
    "detail": "#define BANFLAG_AUTO (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Auto-detects whether to ban by steamid or IP "
    },
    "tags": []
  },
  {
    "label": "BANFLAG_IP",
    "labelDetails": {
      "description": "banning.inc"
    },
    "kind": 21,
    "detail": "#define BANFLAG_IP (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " Always ban by IP address "
    },
    "tags": []
  },
  {
    "label": "BANFLAG_NOKICK",
    "labelDetails": {
      "description": "banning.inc"
    },
    "kind": 21,
    "detail": "#define BANFLAG_NOKICK (1<<3)",
    "documentation": {
      "kind": "markdown",
      "value": " Does not kick the client "
    },
    "tags": []
  },
  {
    "label": "BanClient",
    "labelDetails": {
      "detail": "bool",
      "description": "banning.inc"
    },
    "kind": 3,
    "detail": "native bool BanClient(int client, \n       int time, \n       int flags, \n       const char[] reason, \n       const char[] kick_message=\"\", \n       const char[] command=\"\",\n       any source=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Bans a client.\n\n_@param_ `client` — >Client being banned.\n\n_@param_ `time` — >Time (in minutes) to ban (0 = permanent).\n\n_@param_ `flags` — >Flags for controlling the ban mechanism.  If AUTHID                       is set and no AUTHID is available, the ban will fail                       unless AUTO is also flagged.\n\n_@param_ `reason` — >Reason to ban the client for.\n\n_@param_ `kick_message` — >Message to display to the user when kicking.\n\n_@param_ `command` — >Command string to identify the source.  If this is left                       empty, then the OnBanClient forward will not be called.\n\n_@param_ `source` — >A source value that could be interpreted as a player                       index of any sort (not actually checked by Core).\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid client index or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BanIdentity",
    "labelDetails": {
      "detail": "bool",
      "description": "banning.inc"
    },
    "kind": 3,
    "detail": "native bool BanIdentity(const char[] identity, \n      int time, \n      int flags, \n      const char[] reason,\n      const char[] command=\"\",\n      any source=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Bans an identity (either an IP address or auth string).\n\n_@param_ `identity` — >String to ban (ip or authstring).\n\n_@param_ `time` — >Time to ban for (0 = permanent).\n\n_@param_ `flags` — >Flags (only IP and AUTHID are valid flags here).\n\n_@param_ `reason` — >Ban reason string.\n\n_@param_ `command` — >Command string to identify the source.  If this is left                       empty, then the OnBanIdentity forward will not be called.\n\n_@param_ `source` — >A source value that could be interpreted as a player                      index of any sort (not actually checked by Core).\n\n_@return_ True on success, false on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfGetNumBytesLeft",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfGetNumBytesLeft(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of bytes left in a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Number of bytes left unread.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfRead",
    "labelDetails": {
      "description": "bitbuffer.inc"
    },
    "kind": 7,
    "detail": "methodmap BfRead"
  },
  {
    "label": "BfReadAngle",
    "labelDetails": {
      "detail": "float",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native float BfReadAngle(Handle bf, int numBits=8)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a bit angle from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@param_ `numBits` — >Optional number of bits to use.\n\n_@return_ Angle read.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadAngles",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfReadAngles(Handle bf, float angles[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a 3D angle vector from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@param_ `angles` — >Destination angle vector.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadBool",
    "labelDetails": {
      "detail": "bool",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native bool BfReadBool(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a single bit from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Bit value read.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadByte",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadByte(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a byte from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Byte value read (read as 8bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadChar",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadChar(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a character from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Character value read.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadCoord",
    "labelDetails": {
      "detail": "float",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native float BfReadCoord(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a coordinate from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Coordinate read.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadEntity",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadEntity(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads an entity from a readable bitbuffer (bf_read).\n\n_@note_ This is a wrapper around `BfReadShort()`.\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Entity index read.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadFloat",
    "labelDetails": {
      "detail": "float",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native float BfReadFloat(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a floating point number from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Floating point value read.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadNum",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadNum(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a normal integer to a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Integer value read (read as 32bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadShort",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadShort(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a 16bit integer from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Integer value read (read as 16bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadString",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadString(Handle bf, char[] buffer, int maxlength, bool line=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a string from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `line` — >If true the buffer will be copied until it reaches a '\\n' or a null terminator.\n\n_@return_ Number of bytes written to the buffer.  If the bitbuffer stream overflowed,                       that is, had no terminator before the end of the stream, then a negative                       number will be returned equal to the number of characters written to the                       buffer minus 1.  The buffer will be null terminated regardless of the                       return value.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadVecCoord",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfReadVecCoord(Handle bf, float coord[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a 3D vector of coordinates from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@param_ `coord` — >Destination coordinate array.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadVecNormal",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfReadVecNormal(Handle bf, float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a 3D normal vector from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@param_ `vec` — >Destination vector array.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfReadWord",
    "labelDetails": {
      "detail": "int",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native int BfReadWord(Handle bf)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a 16bit unsigned integer from a readable bitbuffer (bf_read).\n\n_@param_ `bf` — >bf_read handle to read from.\n\n_@return_ Integer value read (read as 16bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWrite",
    "labelDetails": {
      "description": "bitbuffer.inc"
    },
    "kind": 7,
    "detail": "methodmap BfWrite"
  },
  {
    "label": "BfWriteAngle",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteAngle(Handle bf, float angle, int numBits=8)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a bit angle to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `angle` — >Angle to write.\n\n_@param_ `numBits` — >Optional number of bits to use.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteAngles",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteAngles(Handle bf, float angles[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a 3D angle vector to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `angles` — >Angle vector to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteBool",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteBool(Handle bf, bool bit)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a single bit to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `bit` — >Bit to write (true for 1, false for 0).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteByte",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteByte(Handle bf, int byte)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a byte to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `byte` — >Byte to write (value will be written as 8bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteChar",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteChar(Handle bf, int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a byte to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `chr` — >Character to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteCoord",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteCoord(Handle bf, float coord)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a coordinate to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `coord` — >Coordinate to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteEntity",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteEntity(Handle bf, int ent)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes an entity to a writable bitbuffer (bf_write).\n\n_@note_ This is a wrapper around `BfWriteShort()`.\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `ent` — >Entity index to write.\n\n_@error_ Invalid or incorrect Handle, or invalid entity.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteFloat",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteFloat(Handle bf, float num)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a floating point number to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `num` — >Number to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteNum",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteNum(Handle bf, int num)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a normal integer to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `num` — >Integer to write (value will be written as 32bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteShort",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteShort(Handle bf, int num)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a 16bit integer to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `num` — >Integer to write (value will be written as 16bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteString",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteString(Handle bf, const char[] string)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a string to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `string` — >Text string to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteVecCoord",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteVecCoord(Handle bf, float coord[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a 3D vector of coordinates to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `coord` — >Coordinate array to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteVecNormal",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteVecNormal(Handle bf, float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a 3D normal vector to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `vec` — >Vector to write.\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BfWriteWord",
    "labelDetails": {
      "detail": "void",
      "description": "bitbuffer.inc"
    },
    "kind": 3,
    "detail": "native void BfWriteWord(Handle bf, int num)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a 16bit unsigned integer to a writable bitbuffer (bf_write).\n\n_@param_ `bf` — >bf_write handle to write to.\n\n_@param_ `num` — >Integer to write (value will be written as 16bit).\n\n_@error_ Invalid or incorrect Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BindAdminIdentity",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool BindAdminIdentity(AdminId id, const char[] auth, const char[] ident)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Binds an admin to an identity for fast lookup later on.  The bind must be unique.\n\n_@param_ `id` — >AdminId of the admin.\n\n_@param_ `auth` — >Auth method to use, predefined or from `RegisterAuthIdentType()`.\n\n_@param_ `ident` — >String containing the arbitrary, unique identity.\n\n_@return_ True on success, false if the auth method was not found,                      ident was already taken, or ident invalid for auth method.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BitToFlag",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "stock bool BitToFlag(int bit, AdminFlag &flag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a bit to an AdminFlag.\n\n_@param_ `bit` — >Bit to convert.\n\n_@param_ `flag` — >Stores the converted flag by reference.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BreakString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int BreakString(const char[] source, char[] arg, int argLen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds the first \"argument\" in a string; either a set of space terminated characters, or a fully quoted string.  After the  argument is found, whitespace is read until the next portion of the string is reached.  If nothing remains, -1 is returned. Otherwise, the index to the first character is returned.\n\n_@param_ `source` — >Source input string.\n\n_@param_ `arg` — >Stores argument read from string.\n\n_@param_ `argLen` — >Maximum length of argument buffer.\n\n_@return_ Index to next piece of string, or -1 if none.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "BuildPath",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native int BuildPath(PathType type, char[] buffer, int maxlength, const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Builds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout.\n\n_@param_ `type` — >Type of path to build as the base.\n\n_@param_ `buffer` — >Buffer to store the path.\n\n_@param_ `maxlength` — >Maximum length of buffer.\n\n_@param_ `fmt` — >Format string.\n\n_@param_ `...` — >Format arguments.\n\n_@return_ Number of bytes written to buffer (not including null terminator).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ByteCountToCells",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "stock int ByteCountToCells(int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given a maximum string size (including the null terminator), returns the number of cells required to fit that string.\n\n_@param_ `size` — >Number of bytes.\n\n_@return_ Minimum number of cells required to fit the byte count.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "COMMAND_FILTER_ALIVE",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_FILTER_ALIVE (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Only allow alive players "
    },
    "tags": []
  },
  {
    "label": "COMMAND_FILTER_CONNECTED",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_FILTER_CONNECTED (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " Allow players not fully in-game "
    },
    "tags": []
  },
  {
    "label": "COMMAND_FILTER_DEAD",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_FILTER_DEAD (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " Only filter dead players "
    },
    "tags": []
  },
  {
    "label": "COMMAND_FILTER_NO_BOTS",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_FILTER_NO_BOTS (1<<5)",
    "documentation": {
      "kind": "markdown",
      "value": " Do not allow bots to be targetted "
    },
    "tags": []
  },
  {
    "label": "COMMAND_FILTER_NO_IMMUNITY",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_FILTER_NO_IMMUNITY (1<<3)",
    "documentation": {
      "kind": "markdown",
      "value": " Ignore immunity rules "
    },
    "tags": []
  },
  {
    "label": "COMMAND_FILTER_NO_MULTI",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_FILTER_NO_MULTI (1<<4)",
    "documentation": {
      "kind": "markdown",
      "value": " Do not allow multiple target patterns "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_AMBIGUOUS",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_AMBIGUOUS -7",
    "documentation": {
      "kind": "markdown",
      "value": " Partial name had too many targets "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_EMPTY_FILTER",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_EMPTY_FILTER -5",
    "documentation": {
      "kind": "markdown",
      "value": " A multi-filter (such as @all) had no targets "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_IMMUNE",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_IMMUNE -4",
    "documentation": {
      "kind": "markdown",
      "value": " Single client is immune "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_NONE",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_NONE 0",
    "documentation": {
      "kind": "markdown",
      "value": " No target was found "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_NOT_ALIVE",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_NOT_ALIVE -1",
    "documentation": {
      "kind": "markdown",
      "value": " Single client is not alive "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_NOT_DEAD",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_NOT_DEAD -2",
    "documentation": {
      "kind": "markdown",
      "value": " Single client is not dead "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_NOT_HUMAN",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_NOT_HUMAN -6",
    "documentation": {
      "kind": "markdown",
      "value": " Target was not human "
    },
    "tags": []
  },
  {
    "label": "COMMAND_TARGET_NOT_IN_GAME",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define COMMAND_TARGET_NOT_IN_GAME -3",
    "documentation": {
      "kind": "markdown",
      "value": " Single client is not in game "
    },
    "tags": []
  },
  {
    "label": "Call_Cancel",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_Cancel()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Cancels a call to a function or forward's call list.\n\n_@note_ Cannot be used before a call has been started.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_Finish",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int Call_Finish(any &result=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Completes a call to a function or forward's call list.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `result` — >Return value of function or forward's call list.\n\n_@return_ SP_ERROR_NONE on success, any other integer on failure.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushArray",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushArray(const any[] value, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes an array onto the current call.\n\n_@note_ Changes to array are not copied back to caller. Use `PushArrayEx()` to do this.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >Array to push.\n\n_@param_ `size` — >Size of array.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushArrayEx",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushArrayEx(any[] value, int size, int cpflags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes an array onto the current call.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >Array to push.\n\n_@param_ `size` — >Size of array.\n\n_@param_ `cpflags` — >Whether or not changes should be copied back to the input array.                      See SM_PARAM_* constants for details.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushCell",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushCell(any value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a cell onto the current call.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >Cell value to push.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushCellRef",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushCellRef(any &value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a cell by reference onto the current call.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >Cell reference to push.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushFloat",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushFloat(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a float onto the current call.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >Floating point value to push.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushFloatRef",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushFloatRef(float &value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a float by reference onto the current call.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >Floating point reference to push.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushNullString",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushNullString()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes the NULL_STRING onto the current call.\n\n_@see_ IsNullString\n\n_@note_ Cannot be used before a call has been started.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushNullVector",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushNullVector()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes the NULL_VECTOR onto the current call.\n\n_@see_ IsNullVector\n\n_@note_ Cannot be used before a call has been started.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushString",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushString(const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a string onto the current call.\n\n_@note_ Changes to string are not copied back to caller. Use `PushStringEx()` to do this.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >String to push.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_PushStringEx",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_PushStringEx(char[] value, int length, int szflags, int cpflags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a string onto the current call.\n\n_@note_ Cannot be used before a call has been started.\n\n_@param_ `value` — >String to push.\n\n_@param_ `length` — >Length of string buffer.\n\n_@param_ `szflags` — >Flags determining how string should be handled.                      See SM_PARAM_STRING_* constants for details.                      The default (0) is to push ASCII.\n\n_@param_ `cpflags` — >Whether or not changes should be copied back to the input array.                      See SM_PARAM_* constants for details.\n\n_@error_ Called before a call has been started.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_StartForward",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_StartForward(Handle fwd)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a call to functions in a forward's call list.\n\n_@note_ Cannot be used during an incomplete call.\n\n_@param_ `fwd` — >Handle to global or private forward.\n\n_@error_ Invalid or corrupt forward handle or called before another call has completed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Call_StartFunction",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void Call_StartFunction(Handle plugin, Function func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a call to a function.\n\n_@note_ Cannot be used during an incomplete call.\n\n_@param_ `plugin` — >Handle of the plugin that contains the function.                      Pass INVALID_HANDLE to specify the calling plugin.\n\n_@param_ `func` — >Function to call.\n\n_@error_ Invalid or corrupt plugin handle, invalid function, or called before another call has completed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CanAdminTarget",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool CanAdminTarget(AdminId admin, AdminId target)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Tests whether one admin can target another.\r\n \n The heuristics for this check are as follows: 0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails. 1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds. 2. If the targeted AdminId is the same as the targeting AdminId,    (self) targeting succeeds. 3. If the targeting admin is root, targeting succeeds. 4. If the targeted admin has access higher (as interpreted by    (sm_immunity_mode) than the targeting admin, then targeting fails. 5. If the targeted admin has specific immunity from the    targeting admin via group immunities, targeting fails. 6. Targeting succeeds.\n\n_@param_ `admin` — >Admin doing the targetting (may be INVALID_ADMIN_ID).\n\n_@param_ `target` — >Target admin (may be INVALID_ADMIN_ID).\n\n_@return_ True if targetable, false if immune.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CanPanelDrawFlags",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CanTestFeatures",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "stock bool CanTestFeatures()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether \"GetFeatureStatus\" will work. Using this native or this function will not cause SourceMod to fail loading on older versions, however, GetFeatureStatus will only work if this function returns true.\n\n_@return_ True if GetFeatureStatus will work, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CanUserTarget",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool CanUserTarget(int client, int target)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a user can target another user. This is a helper function for CanAdminTarget.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `target` — >Target player's index.\n\n_@return_ True if target is targettable by the player, false otherwise.\n\n_@error_ Invalid or unconnected player indexers.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CancelClientMenu",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CancelCreatedEvent",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void CancelCreatedEvent(Handle event)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Cancels a previously created game event that has not been fired.\n\n_@param_ `event` — >Handled to the event.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CancelMenu",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CancelVote",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ChangeClientTeam",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void ChangeClientTeam(int client, int team)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player.\n\n_@param_ `client` — >Client index.\n\n_@param_ `team` — >Mod-specific team index.\n\n_@error_ Invalid client index, client not in game, or lack of                       mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ChangeEdictState",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void ChangeEdictState(int edict, int offset = 0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Marks an entity as state changed.  This can be useful if you set an offset and wish for it to be immediately changed over the network.  By default this is not done for offset setting functions.\n\n_@param_ `edict` — >Index to the edict.\n\n_@param_ `offset` — >Offset to mark as changed.  If 0,                      the entire edict is marked as changed.\n\n_@error_ Invalid entity or offset out of bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CharToLower",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int CharToLower(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts an uppercase character to its lowercase counterpart.\n\n_@param_ `chr` — >Character to convert.\n\n_@return_ Lowercase character on success,                       no change on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CharToUpper",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int CharToUpper(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a lowercase character to its uppercase counterpart.\n\n_@param_ `chr` — >Character to convert.\n\n_@return_ Uppercase character on success,                       no change on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CheckAccess",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool CheckAccess(AdminId id, \n          const char[] command,\n          int flags,\n          bool override_only=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether an admin has access to a given command string.  The string  can be any override string, as overrides can be independent of  commands.  This feature essentially allows you to create custom flags using the override system.\n\n_@param_ `id` — >AdminId of the admin.\n\n_@param_ `command` — >Command name.  If the command is not found, the default                       flags are used.\n\n_@param_ `flags` — >Flag string to use as a default, if the command or override                       is not found.\n\n_@param_ `override_only` — >If true, SourceMod will not attempt to find a matching                       command, and it will only use the default flags specified.                      Otherwise, SourceMod will ignore the default flags if                       there is a matching admin command.\n\n_@return_ True if the admin has access, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CheckCommandAccess",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool CheckCommandAccess(int client, \n          const char[] command,\n          int flags,\n          bool override_only=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a client has access to a given command string.  The string  can be any override string, as overrides can be independent of  commands.  This feature essentially allows you to create custom  flags using the override system.\n\n_@param_ `client` — >Client index.\n\n_@param_ `command` — >Command name.  If the command is not found, the default                       flags are used.\n\n_@param_ `flags` — >Flag string to use as a default, if the command or override                       is not found.\n\n_@param_ `override_only` — >If true, SourceMod will not attempt to find a matching                       command, and it will only use the default flags specified.                      Otherwise, SourceMod will ignore the default flags if                       there is a matching admin command.\n\n_@return_ True if the client has access, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CheckVoteDelay",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ClearArray",
    "labelDetails": {
      "detail": "void",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native void ClearArray(Handle array)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Clears an array of all entries.  This is the same as `ResizeArray(0)`.\n\n_@param_ `array` — >Array Handle.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ClearSyncHud",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void ClearSyncHud(int client, Handle sync)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Clears the text on a synchronized HUD channel.\r\n \n This is not the same as sending \"\" because it guarantees that it won't overwrite text on another channel.  For example, consider the scenario:\r\n \n 1. Your synchronized message goes to channel 3. 2. Someone else's non-synchronized message goes to channel 3.\r\n \n If you were to simply send \"\" on your synchronized message, then someone else's text could be overwritten.\n\n_@param_ `client` — >Client index to send the message to.\n\n_@param_ `sync` — >Synchronization object.\n\n_@error_ Invalid client index, client not in game, or sync object not valid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ClearTrie",
    "labelDetails": {
      "detail": "void",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native void ClearTrie(Handle map)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Clears all entries from a Map.\n\n_@param_ `map` — >Map Handle.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ClientCommand",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ClientCommand(int client, const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0.\n\n_@param_ `client` — >Index of the client.\n\n_@param_ `fmt` — >Format of the client command.\n\n_@param_ `...` — >Format parameters\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ClientRangeType",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 13,
    "detail": "enum ClientRangeType"
  },
  {
    "label": "CloneArray",
    "labelDetails": {
      "detail": "Handle",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native Handle CloneArray(Handle array)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Clones an array, returning a new handle with the same size and data. This should NOT be confused with CloneHandle. This is a completely new handle with the same data but no relation to the original. You MUST close it.\n\n_@param_ `array` — >Array handle to be cloned\n\n_@return_ New handle to the cloned array object\n\n_@error_ Invalid Handle\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CloneHandle",
    "labelDetails": {
      "detail": "Handle",
      "description": "handles.inc"
    },
    "kind": 3,
    "detail": "native Handle CloneHandle(Handle hndl, Handle plugin=INVALID_HANDLE)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Clones a Handle.  When passing handles in between plugins, caching handles can result in accidental invalidation when one plugin releases the Handle, or is its owner is unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.\n\n_@note_ Usually, you will be cloning Handles for other plugins.  This means that if you clone       the Handle without specifying the new owner, it will assume the identity of your original       calling plugin, which is not very useful.  You should either specify that the receiving       plugin should clone the handle on its own, or you should explicitly clone the Handle       using the receiving plugin's identity Handle.\n\n_@param_ `hndl` — >Handle to clone/duplicate.\n\n_@param_ `plugin` — >Optional Handle to another plugin to mark as the new owner.                  If no owner is passed, the owner becomes the calling plugin.\n\n_@return_ Handle on success, INVALID_HANDLE if not cloneable.\n\n_@error_ Invalid handles will cause a run time error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CloseHandle",
    "labelDetails": {
      "detail": "void",
      "description": "handles.inc"
    },
    "kind": 3,
    "detail": "native void CloseHandle(Handle hndl)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Closes a Handle.  If the handle has multiple copies open, it is not destroyed unless all copies are closed.\n\n_@note_ Closing a Handle has a different meaning for each Handle type.  Make       sure you read the documentation on whatever provided the Handle.\n\n_@param_ `hndl` — >Handle to close.\n\n_@error_ Invalid handles will cause a run time error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CommandExists",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "stock bool CommandExists(const char[] command)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns true if the supplied command exists.\n\n_@param_ `command` — >Command to find.\n\n_@return_ True if command is found, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CommandIterator",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 7,
    "detail": "methodmap CommandIterator"
  },
  {
    "label": "CommandListener",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 8,
    "detail": "typedef CommandListener = function Action (int client, const char[] command, int argc);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player.\r\n \n Clients may be in the process of connecting when they are executing commands `IsClientConnected(client)` is not guaranteed to return true.  Other functions such as `GetClientIP()` may not work at this point either.\r\n \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running.\r\n \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are:  * C++ command dispatch hooks from Metamod:Source plugins  * Reg*`Cmd()` hooks that did not create new commands.\n\n_@param_ `client` — >Client, or 0 for server.                      Client may not be connected or in game.\n\n_@param_ `command` — >Command name, lower case. To get name as typed, use                      `GetCmdArg()` and specify argument 0.\n\n_@param_ `argc` — >Argument count.\n\n_@return_ Action to take (see extended notes above).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Command_Allow",
    "labelDetails": {
      "description": "OverrideRule::Command_Allow"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Command_Deny",
    "labelDetails": {
      "description": "OverrideRule::Command_Deny"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConCmd",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 8,
    "detail": "typedef ConCmd = function Action (int client, int args);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a generic console command is invoked.\n\n_@param_ `client` — >Index of the client, or 0 from the server.\n\n_@param_ `args` — >Number of arguments that were in the argument string.\n\n_@return_ An Action value.  Not handling the command                      means that Source will report it as \"not found.\"\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ConVar",
    "labelDetails": {
      "description": "convars.inc"
    },
    "kind": 7,
    "detail": "methodmap ConVar",
    "documentation": {
      "kind": "markdown",
      "value": "A ConVar is a configurable, named setting in the srcds console."
    }
  },
  {
    "label": "ConVarBound_Lower",
    "labelDetails": {
      "description": "ConVarBounds::ConVarBound_Lower"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConVarBound_Upper",
    "labelDetails": {
      "description": "ConVarBounds::ConVarBound_Upper"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConVarBounds",
    "labelDetails": {
      "description": "convars.inc"
    },
    "kind": 13,
    "detail": "enum ConVarBounds",
    "documentation": {
      "kind": "markdown",
      "value": "\n Console variable bound values used with Get/`SetConVarBounds()`\n "
    }
  },
  {
    "label": "ConVarChanged",
    "labelDetails": {
      "description": "convars.inc"
    },
    "kind": 8,
    "detail": "typedef ConVarChanged = function void (ConVar convar, const char[] oldValue, const char[] newValue);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a console variable's value is changed.\n\n_@param_ `convar` — >Handle to the convar that was changed.\n\n_@param_ `oldValue` — >String containing the value of the convar before it was changed.\n\n_@param_ `newValue` — >String containing the new value of the convar.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ConVarQueryFinished",
    "labelDetails": {
      "description": "convars.inc"
    },
    "kind": 8,
    "detail": "typeset ConVarQueryFinished",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ConVarQueryResult",
    "labelDetails": {
      "description": "convars.inc"
    },
    "kind": 13,
    "detail": "enum ConVarQueryResult",
    "documentation": {
      "kind": "markdown",
      "value": "\n Console variable query result values.\n "
    }
  },
  {
    "label": "ConVarQuery_Cancelled",
    "labelDetails": {
      "description": "ConVarQueryResult::ConVarQuery_Cancelled"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConVarQuery_NotFound",
    "labelDetails": {
      "description": "ConVarQueryResult::ConVarQuery_NotFound"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConVarQuery_NotValid",
    "labelDetails": {
      "description": "ConVarQueryResult::ConVarQuery_NotValid"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConVarQuery_Okay",
    "labelDetails": {
      "description": "ConVarQueryResult::ConVarQuery_Okay"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ConVarQuery_Protected",
    "labelDetails": {
      "description": "ConVarQueryResult::ConVarQuery_Protected"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Cosine",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float Cosine(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the cosine of the argument.\n\n_@param_ `value` — >Input value in radians.\n\n_@return_ `cos(value)`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateAdmGroup",
    "labelDetails": {
      "detail": "GroupId",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native GroupId CreateAdmGroup(const char[] group_name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a new group.  Name must be unique.\n\n_@param_ `group_name` — >String containing the group name.\n\n_@return_ A new group id, INVALID_GROUP_ID if it already exists.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateAdmin",
    "labelDetails": {
      "detail": "AdminId",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native AdminId CreateAdmin(const char[] name=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new admin entry in the permissions cache and returns the generated AdminId index.\n\n_@param_ `name` — >Name for this entry (does not have to be unique).                      Specify an empty string for an anonymous admin.\n\n_@return_ New AdminId index or INVALID_ADMIN_ID if name is empty\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateArray",
    "labelDetails": {
      "detail": "ArrayList",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native ArrayList CreateArray(int blocksize=1, int startsize=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a dynamic global cell array.  While slower than a normal array, it can be used globally AND dynamically, which is otherwise impossible.\r\n \n The contents of the array are uniform; i.e. storing a string at index X and then retrieving it as an integer is NOT the same as `StringToInt()`! The \"blocksize\" determines how many cells each array slot has; it cannot be changed after creation.\n\n_@param_ `blocksize` — >The number of cells each member of the array can                      hold.  For example, 32 cells is equivalent to:                      new Array[X][32]\n\n_@param_ `startsize` — >Initial size of the array.  Note that data will                      NOT be auto-initialized.\n\n_@return_ New Handle to the array object.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateAuthMethod",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool CreateAuthMethod(const char[] method)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates an admin auth method.  This does not need to be called more than once per method, ever.\n\n_@param_ `method` — >Name of the authentication method.\n\n_@return_ True on success, false on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateConVar",
    "labelDetails": {
      "detail": "ConVar",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native ConVar CreateConVar(\n const char[] name,\n const char[] defaultValue,\n const char[] description=\"\",\n int flags=0,\n bool hasMin=false, float min=0.0,\n bool hasMax=false, float max=0.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new console variable.\n\n_@param_ `name` — >Name of new convar.\n\n_@param_ `defaultValue` — >String containing the default value of new convar.\n\n_@param_ `description` — >Optional description of the convar.\n\n_@param_ `flags` — >Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details.\n\n_@param_ `hasMin` — >Optional boolean that determines if the convar has a minimum value.\n\n_@param_ `min` — >Minimum floating point value that the convar can have if hasMin is true.\n\n_@param_ `hasMax` — >Optional boolean that determines if the convar has a maximum value.\n\n_@param_ `max` — >Maximum floating point value that the convar can have if hasMax is true.\n\n_@return_ A handle to the newly created convar. If the convar already exists, a handle to it will still be returned.\n\n_@error_ Convar name is blank or is the same as an existing console command.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateDataPack",
    "labelDetails": {
      "detail": "DataPack",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native DataPack CreateDataPack()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new data pack.\n\n_@return_ A Handle to the data pack.  Must be closed with `CloseHandle()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateDataTimer",
    "labelDetails": {
      "detail": "Handle",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "stock Handle CreateDataTimer(float interval, Timer func, Handle &datapack, int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a timer associated with a new datapack, and returns the datapack.\n\n_@note_ The datapack is automatically freed when the timer ends.\n\n_@note_ The position of the datapack is not reset or changed for the timer function.\n\n_@param_ `interval` — >Interval from the current game time to execute the given function.\n\n_@param_ `func` — >Function to execute once the given interval has elapsed.\n\n_@param_ `datapack` — >The newly created datapack is passed though this by-reference                      parameter to the timer callback function.\n\n_@param_ `flags` — >Timer flags.\n\n_@return_ Handle to the timer object.  You do not need to call `CloseHandle()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateDialog",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void CreateDialog(int client, Handle kv, DialogType type)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates different types of ingame messages.\n\n_@param_ `client` — >Index of the client.\n\n_@param_ `kv` — >KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information).\n\n_@param_ `type` — >Message type to display ingame.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateDirectory",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool CreateDirectory(const char[] path, int mode, bool use_valve_fs=false, const char[] valve_path_id=\"DEFAULT_WRITE_PATH\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a directory.\n\n_@param_ `path` — >Path to create.\n\n_@param_ `mode` — >Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have                      the execute bit set on Linux.  On Windows, the mode is ignored.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to create folders in the game's                      Valve search paths, rather than directly in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for default.                      In this case, mode is ignored.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateEdict",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int CreateEdict()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new edict (the basis of a networkable entity)\n\n_@return_ Index of the edict, 0 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateEvent",
    "labelDetails": {
      "detail": "Event",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native Event CreateEvent(const char[] name, bool force=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a game event to be fired later.\r\n \n The Handle should not be closed via `CloseHandle()`.  It must be closed via  event.`Fire()` or event.`Cancel()`.\n\n_@param_ `name` — >Name of event.\n\n_@param_ `force` — >If set to true, this forces the event to be created even if it's not being hooked.                      Note that this will not force it if the event doesn't exist at all.\n\n_@return_ Handle to event. INVALID_HANDLE is returned if the event doesn't exist or isn't                       being hooked (unless force is true).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateFakeClient",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int CreateFakeClient(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a fake client.\n\n_@param_ `name` — >Name to use.\n\n_@return_ Client index on success, 0 otherwise.\n\n_@error_ No map is active.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateForward",
    "labelDetails": {
      "detail": "PrivateForward",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native PrivateForward CreateForward(ExecType type, ParamType ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a private forward.\n\n_@note_ No functions are automatically added. Use `AddToForward()` to do this.\n\n_@note_ Private forwards can be cloned.\n\n_@note_ Use `CloseHandle()` to destroy these.\n\n_@param_ `type` — >Execution type to be used.\n\n_@param_ `...` — >Variable number of parameter types (up to 32).\n\n_@return_ Handle to new private forward.\n\n_@error_ More than 32 parameter types passed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateGlobalForward",
    "labelDetails": {
      "detail": "GlobalForward",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native GlobalForward CreateGlobalForward(const char[] name, ExecType type, ParamType ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a global forward.\n\n_@note_ The name used to create the forward is used as its public function in all target plugins.\n\n_@note_ This is ideal for global, static forwards that are never changed.\n\n_@note_ Global forwards cannot be cloned.\n\n_@note_ Use `CloseHandle()` to destroy these.\n\n_@param_ `name` — >Name of public function to use in forward.\n\n_@param_ `type` — >Execution type to be used.\n\n_@param_ `...` — >Variable number of parameter types (up to 32).\n\n_@return_ Handle to new global forward.\n\n_@error_ More than 32 parameter types passed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateHudSynchronizer",
    "labelDetails": {
      "detail": "Handle",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native Handle CreateHudSynchronizer()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a HUD synchronization object.  This object is used to automatically assign and re-use channels for a set of messages.\r\n \n The HUD has a hardcoded number of channels (usually 6) for displaying text.  You can use any channel for any area of the screen.  Text on different channels can overlap, but text on the same channel will erase the old text first.  This overlapping and overwriting gets problematic.\r\n \n A HUD synchronization object automatically selects channels for you based on the following heuristics:  - If channel X was last used by the object, and hasn't been modified again,    channel X gets re-used.  - Otherwise, a new channel is chosen based on the least-recently-used channel.\r\n \n This ensures that if you display text on a sync object, that the previous text displayed on it will always be cleared first.  This is because your new text will either overwrite the old text on the same channel, or because another channel has already erased your text.\r\n \n Note that messages can still overlap if they are on different synchronization objects, or they are displayed to manual channels.\r\n \n These are particularly useful for displaying repeating or refreshing HUD text, in addition to displaying multiple message sets in one area of the screen (for example, center-say messages that may pop up randomly that you don't want to overlap each other).\n\n_@return_ New HUD synchronization object.                      The Handle can be closed with `CloseHandle()`.                      If HUD text is not supported on this mod, then                      INVALID_HANDLE is returned.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateKeyValues",
    "labelDetails": {
      "detail": "KeyValues",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native KeyValues CreateKeyValues(const char[] name, const char[] firstKey=\"\", const char[] firstValue=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new KeyValues structure.  The Handle must always be closed.\n\n_@param_ `name` — >Name of the root section.\n\n_@param_ `firstKey` — >If non-empty, specifies the first key value.\n\n_@param_ `firstValue` — >If firstKey is non-empty, specifies the first key's value.\n\n_@return_ A Handle to a new KeyValues structure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateMenu",
    "labelDetails": {
      "detail": "Menu",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateMenuEx",
    "labelDetails": {
      "detail": "Menu",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateNative",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void CreateNative(const char[] name, NativeCall func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a dynamic native.  This should only be called in `AskPluginLoad()`, or else you risk not having your native shared with other plugins.\n\n_@param_ `name` — >Name of the dynamic native; must be unique among                      all other registered dynamic natives.\n\n_@param_ `func` — >Function to use as the dynamic native.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreatePanel",
    "labelDetails": {
      "detail": "Panel",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreatePanelFromMenu",
    "labelDetails": {
      "detail": "Panel",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateStack",
    "labelDetails": {
      "detail": "ArrayStack",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native ArrayStack CreateStack(int blocksize=1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a stack structure.  A stack is a LIFO (last in, first out)  vector (array) of items.  It has `O(1)` insertion and `O(1)` removal.\r\n \n Stacks have two operations: Push (adding an item) and Pop (removes  items in reverse-push order).\r\n \n The contents of the stack are uniform; i.e. storing a string and then  retrieving it as an integer is NOT the same as `StringToInt()`!\r\n \n The \"blocksize\" determines how many cells each slot has; it cannot be changed after creation.\n\n_@param_ `blocksize` — >The number of cells each entry in the stack can                       hold.  For example, 32 cells is equivalent to:                      new Array[X][32]\n\n_@return_ New stack Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateTimer",
    "labelDetails": {
      "detail": "Handle",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native Handle CreateTimer(float interval, Timer func, any data=INVALID_HANDLE, int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a basic timer.  Calling `CloseHandle()` on a timer will end the timer.\n\n_@param_ `interval` — >Interval from the current game time to execute the given function.\n\n_@param_ `func` — >Function to execute once the given interval has elapsed.\n\n_@param_ `data` — >Handle or value to pass through to the timer callback function.\n\n_@param_ `flags` — >Flags to set (such as repeatability or auto-Handle closing).\n\n_@return_ Handle to the timer object.  You do not need to call `CloseHandle()`.                      If the timer could not be created, INVALID_HANDLE will be returned.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateTrie",
    "labelDetails": {
      "detail": "StringMap",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native StringMap CreateTrie()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a hash map. A hash map is a container that can map strings (called \"keys\") to arbitrary values (cells, arrays, or strings). Keys in a hash map are unique. That is, there is at most one entry in the map for a given key.\r\n \n Insertion, deletion, and lookup in a hash map are all considered to be fast operations, amortized to `O(1)`, or constant time.\r\n \n The word \"Trie\" in this API is historical. As of SourceMod 1.6, tries have been internally replaced with hash tables, which have `O(1)` insertion time instead of `O(n)`.\n\n_@return_ New Map Handle, which must be freed via `CloseHandle()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "CreateTrieSnapshot",
    "labelDetails": {
      "detail": "Handle",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native Handle CreateTrieSnapshot(Handle map)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a snapshot of all keys in the map. If the map is changed after this call, the changes are not reflected in the snapshot. Keys are not sorted.\n\n_@param_ `map` — >Map Handle.\n\n_@return_ New Map Snapshot Handle, which must be closed via `CloseHandle()`.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DBBindType",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 13,
    "detail": "enum DBBindType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Describes binding types.\r\n "
    }
  },
  {
    "label": "DBBind_Float",
    "labelDetails": {
      "description": "DBBindType::DBBind_Float"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBBind_Int",
    "labelDetails": {
      "description": "DBBindType::DBBind_Int"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBBind_String",
    "labelDetails": {
      "description": "DBBindType::DBBind_String"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBDriver",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 7,
    "detail": "methodmap DBDriver",
    "documentation": {
      "kind": "markdown",
      "value": "A Driver represents a database backend, currently MySQL or SQLite.Driver handles cannot be closed."
    }
  },
  {
    "label": "DBPrio_High",
    "labelDetails": {
      "description": "DBPriority::DBPrio_High"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBPrio_Low",
    "labelDetails": {
      "description": "DBPriority::DBPrio_Low"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBPrio_Normal",
    "labelDetails": {
      "description": "DBPriority::DBPrio_Normal"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBPriority",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 13,
    "detail": "enum DBPriority",
    "documentation": {
      "kind": "markdown",
      "value": "\n Threading priority level.\r\n "
    }
  },
  {
    "label": "DBResult",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 13,
    "detail": "enum DBResult",
    "documentation": {
      "kind": "markdown",
      "value": "\n Describes a database field fetch status.\r\n "
    }
  },
  {
    "label": "DBResultSet",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 7,
    "detail": "methodmap DBResultSet",
    "documentation": {
      "kind": "markdown",
      "value": "Represents a set of results returned from executing a query."
    }
  },
  {
    "label": "DBStatement",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 7,
    "detail": "methodmap DBStatement",
    "documentation": {
      "kind": "markdown",
      "value": "A DBStatement is a pre-compiled SQL query that may be executed multipletimes with different parameters. A DBStatement holds a reference to theDatabase that prepared it."
    }
  },
  {
    "label": "DBVal_Data",
    "labelDetails": {
      "description": "DBResult::DBVal_Data"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBVal_Error",
    "labelDetails": {
      "description": "DBResult::DBVal_Error"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBVal_Null",
    "labelDetails": {
      "description": "DBResult::DBVal_Null"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DBVal_TypeMismatch",
    "labelDetails": {
      "description": "DBResult::DBVal_TypeMismatch"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DataPack",
    "labelDetails": {
      "description": "datapack.inc"
    },
    "kind": 7,
    "detail": "methodmap DataPack",
    "documentation": {
      "kind": "markdown",
      "value": "A DataPack allows serializing multiple variables into a single stream."
    }
  },
  {
    "label": "DataPackPos",
    "labelDetails": {
      "description": "datapack.inc"
    },
    "kind": 13,
    "detail": "enum DataPackPos",
    "documentation": {
      "kind": "markdown",
      "value": "\n Opaque handle to a datapack position.\r\n "
    }
  },
  {
    "label": "Database",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 7,
    "detail": "methodmap Database",
    "documentation": {
      "kind": "markdown",
      "value": "A Database represents a live connection to a database, either over thewire, through a unix domain socket, or over an open file."
    }
  },
  {
    "label": "DegToRad",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "stock float DegToRad(float angle)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts degrees to radians.\n\n_@param_ `angle` — >Degrees.\n\n_@return_ Radians.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DeleteFile",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool DeleteFile(const char[] path, bool use_valve_fs=false, const char[] valve_path_id=\"DEFAULT_WRITE_PATH\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Deletes a file.\n\n_@param_ `path` — >Path of the file to delete.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to delete files existing in the Valve                      search path, rather than solely files existing directly                      in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ True on success, false on failure or if file not immediately removed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DialogType",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 13,
    "detail": "enum DialogType"
  },
  {
    "label": "DialogType_AskConnect",
    "labelDetails": {
      "description": "DialogType::DialogType_AskConnect"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DialogType_Entry",
    "labelDetails": {
      "description": "DialogType::DialogType_Entry"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DialogType_Menu",
    "labelDetails": {
      "description": "DialogType::DialogType_Menu"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DialogType_Msg",
    "labelDetails": {
      "description": "DialogType::DialogType_Msg"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DialogType_Text",
    "labelDetails": {
      "description": "DialogType::DialogType_Text"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "DirExists",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool DirExists(const char[] path, bool use_valve_fs=false, const char[] valve_path_id=\"GAME\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Checks if a directory exists.\n\n_@param_ `path` — >Path to the directory.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to find files existing in any of                      the Valve search paths, rather than solely files                      existing directly in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ True if the directory exists, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DirectoryListing",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 7,
    "detail": "methodmap DirectoryListing",
    "documentation": {
      "kind": "markdown",
      "value": "A DirectoryListing iterates over the contents of a directory. To obtain aDirectoryListing handle, call `OpenDirectory()`."
    }
  },
  {
    "label": "DisplayAskConnectBox",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "stock void DisplayAskConnectBox(int client, float time, const char[] ip, const char[] password = \"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Displays a panel asking the client to connect to a specified IP.\n\n_@param_ `client` — >Client index.\n\n_@param_ `time` — >Duration to hold the panel on the client's screen.\n\n_@param_ `ip` — >Destination IP.\n\n_@param_ `password` — >Password to connect to the destination IP. The client will be able to see this.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DisplayMenu",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DisplayMenuAtItem",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DrawPanelItem",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DrawPanelText",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "DumpAdminCache",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void DumpAdminCache(AdminCachePart part, bool rebuild)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Tells the admin system to dump a portion of the cache.\n\n_@param_ `part` — >Part of the cache to dump.  Specifying groups also dumps admins.\n\n_@param_ `rebuild` — >If true, the rebuild forwards will fire.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "EOS",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "ET_Event",
    "labelDetails": {
      "description": "ExecType::ET_Event"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ET_Hook",
    "labelDetails": {
      "description": "ExecType::ET_Hook"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ET_Ignore",
    "labelDetails": {
      "description": "ExecType::ET_Ignore"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ET_Single",
    "labelDetails": {
      "description": "ExecType::ET_Single"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "EndMessage",
    "labelDetails": {
      "detail": "void",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native void EndMessage()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Ends a previously started user message (network message).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "EngineVersion",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 13,
    "detail": "enum EngineVersion"
  },
  {
    "label": "Engine_AlienSwarm",
    "labelDetails": {
      "description": "EngineVersion::Engine_AlienSwarm"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_BlackMesa",
    "labelDetails": {
      "description": "EngineVersion::Engine_BlackMesa"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Blade",
    "labelDetails": {
      "description": "EngineVersion::Engine_Blade"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_BloodyGoodTime",
    "labelDetails": {
      "description": "EngineVersion::Engine_BloodyGoodTime"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_CSGO",
    "labelDetails": {
      "description": "EngineVersion::Engine_CSGO"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_CSS",
    "labelDetails": {
      "description": "EngineVersion::Engine_CSS"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Contagion",
    "labelDetails": {
      "description": "EngineVersion::Engine_Contagion"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_DODS",
    "labelDetails": {
      "description": "EngineVersion::Engine_DODS"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_DOI",
    "labelDetails": {
      "description": "EngineVersion::Engine_DOI"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_DOTA",
    "labelDetails": {
      "description": "EngineVersion::Engine_DOTA"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_DarkMessiah",
    "labelDetails": {
      "description": "EngineVersion::Engine_DarkMessiah"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_EYE",
    "labelDetails": {
      "description": "EngineVersion::Engine_EYE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_HL2DM",
    "labelDetails": {
      "description": "EngineVersion::Engine_HL2DM"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Insurgency",
    "labelDetails": {
      "description": "EngineVersion::Engine_Insurgency"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Left4Dead",
    "labelDetails": {
      "description": "EngineVersion::Engine_Left4Dead"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Left4Dead2",
    "labelDetails": {
      "description": "EngineVersion::Engine_Left4Dead2"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_NuclearDawn",
    "labelDetails": {
      "description": "EngineVersion::Engine_NuclearDawn"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Original",
    "labelDetails": {
      "description": "EngineVersion::Engine_Original"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Portal2",
    "labelDetails": {
      "description": "EngineVersion::Engine_Portal2"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_SDK2013",
    "labelDetails": {
      "description": "EngineVersion::Engine_SDK2013"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_SourceSDK2006",
    "labelDetails": {
      "description": "EngineVersion::Engine_SourceSDK2006"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_SourceSDK2007",
    "labelDetails": {
      "description": "EngineVersion::Engine_SourceSDK2007"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_TF2",
    "labelDetails": {
      "description": "EngineVersion::Engine_TF2"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Engine_Unknown",
    "labelDetails": {
      "description": "EngineVersion::Engine_Unknown"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "EntIndexToEntRef",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int EntIndexToEntRef(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts an entity index into a serial encoded entity reference.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ Entity reference or -1 on invalid entity.\n\n_@error_ Entity index \\>= `GetMaxEntities()` or \\< 0\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "EntRefToEntIndex",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int EntRefToEntIndex(int ref)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the entity index from a reference.\n\n_@param_ `ref` — >Entity reference.\n\n_@return_ Entity index or -1 on invalid reference.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Event",
    "labelDetails": {
      "description": "events.inc"
    },
    "kind": 7,
    "detail": "methodmap Event"
  },
  {
    "label": "EventHook",
    "labelDetails": {
      "description": "events.inc"
    },
    "kind": 8,
    "detail": "typeset EventHook",
    "documentation": {
      "kind": "markdown",
      "value": "\n Hook function types for events.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "EventHookMode",
    "labelDetails": {
      "description": "events.inc"
    },
    "kind": 13,
    "detail": "enum EventHookMode",
    "documentation": {
      "kind": "markdown",
      "value": "\n Event hook modes determining how hooking should be handled\r\n "
    }
  },
  {
    "label": "EventHookMode_Post",
    "labelDetails": {
      "description": "EventHookMode::EventHookMode_Post"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "EventHookMode_PostNoCopy",
    "labelDetails": {
      "description": "EventHookMode::EventHookMode_PostNoCopy"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "EventHookMode_Pre",
    "labelDetails": {
      "description": "EventHookMode::EventHookMode_Pre"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ExecType",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 13,
    "detail": "enum ExecType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Defines how a forward iterates through plugin functions.\r\n "
    }
  },
  {
    "label": "ExplodeString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int ExplodeString(const char[] text, const char[] split, char[][] buffers, int maxStrings,\n                    int maxStringLength, bool copyRemainder = false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Breaks a string into pieces and stores each piece into an array of buffers.\n\n_@param_ `text` — >The string to split.\n\n_@param_ `split` — >The string to use as a split delimiter.\n\n_@param_ `buffers` — >An array of string buffers (2D array).\n\n_@param_ `maxStrings` — >Number of string buffers (first dimension size).\n\n_@param_ `maxStringLength` — >Maximum length of each string buffer.\n\n_@param_ `copyRemainder` — >False (default) discard excess pieces, true to ignore                          delimiters after last piece.\n\n_@return_ Number of strings retrieved.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Exponential",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float Exponential(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the value of raising the input by e.\n\n_@param_ `value` — >Input value.\n\n_@return_ `exp(value)`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ExtendMapTimeLimit",
    "labelDetails": {
      "detail": "bool",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native bool ExtendMapTimeLimit(int time)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Extends the map time limit in a way that will notify all plugins.\n\n_@param_ `time` — >Number of seconds to extend map time limit by.                      The number can be negative to decrease the time limit.                      If 0, the map will be set to have no time limit.\n\n_@return_ True on success, false if operation is not supported.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FCVAR_ACCESSIBLE_FROM_THREADS",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_ACCESSIBLE_FROM_THREADS (1<<25)",
    "documentation": {
      "kind": "markdown",
      "value": "used as a debugging tool necessary to check material system thread convars (OB+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_ARCHIVE",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_ARCHIVE (1<<7)",
    "documentation": {
      "kind": "markdown",
      "value": "Set to cause it to be saved to vars.rc"
    },
    "tags": []
  },
  {
    "label": "FCVAR_ARCHIVE_GAMECONSOLE",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_ARCHIVE_GAMECONSOLE (1<<24)",
    "documentation": {
      "kind": "markdown",
      "value": "Cvar written to config.cfg on the Xbox."
    },
    "tags": []
  },
  {
    "label": "FCVAR_ARCHIVE_XBOX",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_ARCHIVE_XBOX (1<<24)",
    "documentation": {
      "kind": "markdown",
      "value": "Cvar written to config.cfg on the Xbox."
    },
    "tags": []
  },
  {
    "label": "FCVAR_CHEAT",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_CHEAT (1<<14)",
    "documentation": {
      "kind": "markdown",
      "value": "Only useable in singleplayer / debug / multiplayer & sv_cheats"
    },
    "tags": []
  },
  {
    "label": "FCVAR_CLIENTCMD_CAN_EXECUTE",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_CLIENTCMD_CAN_EXECUTE (1<<30)",
    "documentation": {
      "kind": "markdown",
      "value": "IVEngineClient::ClientCmd is allowed to execute this command. "
    },
    "tags": []
  },
  {
    "label": "FCVAR_CLIENTDLL",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_CLIENTDLL (1<<3)",
    "documentation": {
      "kind": "markdown",
      "value": "Defined by the client DLL."
    },
    "tags": []
  },
  {
    "label": "FCVAR_DEMO",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_DEMO (1<<16)",
    "documentation": {
      "kind": "markdown",
      "value": "Record this cvar when starting a demo file."
    },
    "tags": []
  },
  {
    "label": "FCVAR_DEVELOPMENTONLY",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_DEVELOPMENTONLY (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": "Hidden in released products. Flag is removed automatically if ALLOW_DEVELOPMENT_CVARS is defined. (OB+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_DONTRECORD",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_DONTRECORD (1<<17)",
    "documentation": {
      "kind": "markdown",
      "value": "Don't record these command in demo files."
    },
    "tags": []
  },
  {
    "label": "FCVAR_GAMEDLL",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_GAMEDLL (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": "Defined by the game DLL."
    },
    "tags": []
  },
  {
    "label": "FCVAR_HIDDEN",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_HIDDEN (1<<4)",
    "documentation": {
      "kind": "markdown",
      "value": "Hidden. Doesn't appear in find or autocomplete. Like DEVELOPMENTONLY, but can't be compiled out.1 (OB+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_LAUNCHER",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_LAUNCHER (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": "Same value as FCVAR_DEVELOPMENTONLY, which is what most usages of this were intending to use."
    },
    "tags": [
      1
    ]
  },
  {
    "label": "FCVAR_MATERIAL_SYSTEM",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_MATERIAL_SYSTEM (1<<4)",
    "documentation": {
      "kind": "markdown",
      "value": "Defined by the material system. (EP1-only)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_MATERIAL_SYSTEM_THREAD",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_MATERIAL_SYSTEM_THREAD (1<<23)",
    "documentation": {
      "kind": "markdown",
      "value": "Indicates this cvar is read from the material system thread (OB+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_NEVER_AS_STRING",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_NEVER_AS_STRING (1<<12)",
    "documentation": {
      "kind": "markdown",
      "value": "Never try to print that cvar."
    },
    "tags": []
  },
  {
    "label": "FCVAR_NONE",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_NONE 0",
    "documentation": {
      "kind": "markdown",
      "value": "The default, no flags at all"
    },
    "tags": []
  },
  {
    "label": "FCVAR_NOTIFY",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_NOTIFY (1<<8)",
    "documentation": {
      "kind": "markdown",
      "value": "Notifies players when changed."
    },
    "tags": []
  },
  {
    "label": "FCVAR_NOT_CONNECTED",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_NOT_CONNECTED (1<<22)",
    "documentation": {
      "kind": "markdown",
      "value": "Cvar cannot be changed by a client that is connected to a server."
    },
    "tags": []
  },
  {
    "label": "FCVAR_PLUGIN",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_PLUGIN 0",
    "documentation": {
      "kind": "markdown",
      "value": "Actual value is same as FCVAR_SS_ADDED in Left 4 Dead and later."
    },
    "tags": [
      1
    ]
  },
  {
    "label": "FCVAR_PRINTABLEONLY",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_PRINTABLEONLY (1<<10)",
    "documentation": {
      "kind": "markdown",
      "value": "This cvar's string cannot contain unprintable characters (e.g., used for player name, etc.)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_PROTECTED",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_PROTECTED (1<<5)",
    "documentation": {
      "kind": "markdown",
      "value": "It's a server cvar, but we don't send the data since it's a password, etc."
    },
    "tags": []
  },
  {
    "label": "FCVAR_RELEASE",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_RELEASE (1<<19)",
    "documentation": {
      "kind": "markdown",
      "value": "Cvars tagged with this are the only cvars available to customers (L4D+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_RELOAD_MATERIALS",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_RELOAD_MATERIALS (1<<20)",
    "documentation": {
      "kind": "markdown",
      "value": "If this cvar changes, it forces a material reload (OB+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_RELOAD_TEXTURES",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_RELOAD_TEXTURES (1<<21)",
    "documentation": {
      "kind": "markdown",
      "value": "If this cvar changes, if forces a texture reload (OB+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_REPLICATED",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_REPLICATED (1<<13)",
    "documentation": {
      "kind": "markdown",
      "value": "Server setting enforced on clients."
    },
    "tags": []
  },
  {
    "label": "FCVAR_SERVER_CANNOT_QUERY",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_SERVER_CANNOT_QUERY (1<<29)",
    "documentation": {
      "kind": "markdown",
      "value": "If this is set, then the server is not allowed to query this cvar's value (via"
    },
    "tags": []
  },
  {
    "label": "FCVAR_SERVER_CAN_EXECUTE",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_SERVER_CAN_EXECUTE (1<<28)",
    "documentation": {
      "kind": "markdown",
      "value": "the server is allowed to execute this command on clients via"
    },
    "tags": []
  },
  {
    "label": "FCVAR_SPONLY",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_SPONLY (1<<6)",
    "documentation": {
      "kind": "markdown",
      "value": "This cvar cannot be changed by clients connected to a multiplayer server."
    },
    "tags": []
  },
  {
    "label": "FCVAR_SS",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_SS (1<<15)",
    "documentation": {
      "kind": "markdown",
      "value": "causes varnameN where N  2 through max splitscreen slots for mod to be autogenerated (L4D+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_SS_ADDED",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_SS_ADDED (1<<18)",
    "documentation": {
      "kind": "markdown",
      "value": "This is one of the \"added\" FCVAR_SS variables for the splitscreen players (L4D+)"
    },
    "tags": []
  },
  {
    "label": "FCVAR_UNLOGGED",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_UNLOGGED (1<<11)",
    "documentation": {
      "kind": "markdown",
      "value": "If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log"
    },
    "tags": []
  },
  {
    "label": "FCVAR_UNREGISTERED",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_UNREGISTERED (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": "If this is set, don't add to linked list, etc."
    },
    "tags": []
  },
  {
    "label": "FCVAR_USERINFO",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FCVAR_USERINFO (1<<9)",
    "documentation": {
      "kind": "markdown",
      "value": "Changes the client's info string."
    },
    "tags": []
  },
  {
    "label": "FEATURECAP_COMMANDLISTENER",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define FEATURECAP_COMMANDLISTENER \"command listener\"",
    "tags": []
  },
  {
    "label": "FEATURECAP_MULTITARGETFILTER_CLIENTPARAM",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define FEATURECAP_MULTITARGETFILTER_CLIENTPARAM \"SourceMod MultiTargetFilter ClientParam\"",
    "tags": []
  },
  {
    "label": "FLOAT_PI",
    "labelDetails": {
      "description": "float.inc"
    },
    "kind": 21,
    "detail": "#define FLOAT_PI 3.1415926535897932384626433832795",
    "tags": []
  },
  {
    "label": "FL_AIMTARGET",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_AIMTARGET (1 << 16)",
    "documentation": {
      "kind": "markdown",
      "value": " set if the crosshair needs to aim onto the entity "
    },
    "tags": []
  },
  {
    "label": "FL_ATCONTROLS",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_ATCONTROLS (1 << 6)",
    "documentation": {
      "kind": "markdown",
      "value": " Player can't move, but keeps key inputs for controlling another entity "
    },
    "tags": []
  },
  {
    "label": "FL_BASEVELOCITY",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_BASEVELOCITY (1 << 23)",
    "documentation": {
      "kind": "markdown",
      "value": " Base velocity has been applied this frame (used to convert base velocity into momentum) "
    },
    "tags": []
  },
  {
    "label": "FL_CLIENT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_CLIENT (1 << 7)",
    "documentation": {
      "kind": "markdown",
      "value": " Is a player "
    },
    "tags": []
  },
  {
    "label": "FL_CONVEYOR",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_CONVEYOR (1 << 12)",
    "tags": []
  },
  {
    "label": "FL_DISSOLVING",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_DISSOLVING (1 << 28)",
    "documentation": {
      "kind": "markdown",
      "value": " We're dissolving! "
    },
    "tags": []
  },
  {
    "label": "FL_DONTTOUCH",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_DONTTOUCH (1 << 22)",
    "documentation": {
      "kind": "markdown",
      "value": " Doesn't generate touch functions, generates `Untouch()` for anything it was touching when this flag was set "
    },
    "tags": []
  },
  {
    "label": "FL_DUCKING",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_DUCKING (1 << 1)",
    "documentation": {
      "kind": "markdown",
      "value": " Player flag -- Player is fully crouched "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_ALWAYS",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_ALWAYS (1<<3)",
    "documentation": {
      "kind": "markdown",
      "value": " always transmit this entity "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_CHANGED",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_CHANGED (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Game DLL sets this when the entity state changes\r\n                                                     Mutually exclusive with FL_EDICT_PARTIAL_CHANGE. "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_DIRTY_PVS_INFORMATION",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_DIRTY_PVS_INFORMATION (1<<7)",
    "tags": []
  },
  {
    "label": "FL_EDICT_DONTSEND",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_DONTSEND (1<<4)",
    "documentation": {
      "kind": "markdown",
      "value": " don't transmit this entity "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_FREE",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_FREE (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " this edict if free for reuse "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_FULL",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_FULL (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " this is a full server entity "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_FULLCHECK",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_FULLCHECK (0<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " call `ShouldTransmit()` each time, this is a fake flag "
    },
    "tags": []
  },
  {
    "label": "FL_EDICT_PENDING_DORMANT_CHECK",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_PENDING_DORMANT_CHECK (1<<6)",
    "tags": []
  },
  {
    "label": "FL_EDICT_PVSCHECK",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_EDICT_PVSCHECK (1<<5)",
    "documentation": {
      "kind": "markdown",
      "value": " always transmit entity, but cull against PVS "
    },
    "tags": []
  },
  {
    "label": "FL_EP2V_UNKNOWN1",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_EP2V_UNKNOWN1 (1 << 31)",
    "documentation": {
      "kind": "markdown",
      "value": " Unknown "
    },
    "tags": []
  },
  {
    "label": "FL_FAKECLIENT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_FAKECLIENT (1 << 8)",
    "documentation": {
      "kind": "markdown",
      "value": " Fake client, simulated server side; don't send network messages to them "
    },
    "tags": []
  },
  {
    "label": "FL_FLY",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_FLY (1 << 10)",
    "documentation": {
      "kind": "markdown",
      "value": " Changes the `SV_Movestep()` behavior to not need to be on ground "
    },
    "tags": []
  },
  {
    "label": "FL_FREEZING",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_FREEZING (1 << 31)",
    "documentation": {
      "kind": "markdown",
      "value": " We're becoming frozen! "
    },
    "tags": []
  },
  {
    "label": "FL_FROZEN",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_FROZEN (1 << 5)",
    "documentation": {
      "kind": "markdown",
      "value": " Player is frozen for 3rd person camera "
    },
    "tags": []
  },
  {
    "label": "FL_FULL_EDICT_CHANGED",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define FL_FULL_EDICT_CHANGED (1<<8)",
    "tags": []
  },
  {
    "label": "FL_GODMODE",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_GODMODE (1 << 14)",
    "tags": []
  },
  {
    "label": "FL_GRAPHED",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_GRAPHED (1 << 19)",
    "documentation": {
      "kind": "markdown",
      "value": " worldgraph has this ent listed as something that blocks a connection "
    },
    "tags": []
  },
  {
    "label": "FL_GRENADE",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_GRENADE (1 << 20)",
    "tags": []
  },
  {
    "label": "FL_INRAIN",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_INRAIN (1 << 4)",
    "documentation": {
      "kind": "markdown",
      "value": " Indicates the entity is standing in rain "
    },
    "tags": []
  },
  {
    "label": "FL_INWATER",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_INWATER (1 << 9)",
    "documentation": {
      "kind": "markdown",
      "value": " In water "
    },
    "tags": []
  },
  {
    "label": "FL_KILLME",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_KILLME (1 << 26)",
    "documentation": {
      "kind": "markdown",
      "value": " This entity is marked for death -- will be freed by game DLL "
    },
    "tags": []
  },
  {
    "label": "FL_NOTARGET",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_NOTARGET (1 << 15)",
    "tags": []
  },
  {
    "label": "FL_NPC",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_NPC (1 << 13)",
    "tags": []
  },
  {
    "label": "FL_OBJECT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_OBJECT (1 << 25)",
    "documentation": {
      "kind": "markdown",
      "value": " Terrible name. This is an object that NPCs should see. Missiles, for example. "
    },
    "tags": []
  },
  {
    "label": "FL_ONFIRE",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_ONFIRE (1 << 27)",
    "documentation": {
      "kind": "markdown",
      "value": " You know... "
    },
    "tags": []
  },
  {
    "label": "FL_ONGROUND",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_ONGROUND (1 << 0)",
    "documentation": {
      "kind": "markdown",
      "value": " At rest / on the ground "
    },
    "tags": []
  },
  {
    "label": "FL_ONTRAIN",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_ONTRAIN (1 << 3)",
    "documentation": {
      "kind": "markdown",
      "value": " Player is _controlling_ a train, so movement commands should be ignored on client during prediction. "
    },
    "tags": []
  },
  {
    "label": "FL_PARTIALGROUND",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_PARTIALGROUND (1 << 17)",
    "documentation": {
      "kind": "markdown",
      "value": " not all corners are valid "
    },
    "tags": []
  },
  {
    "label": "FL_STATICPROP",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_STATICPROP (1 << 18)",
    "documentation": {
      "kind": "markdown",
      "value": " Eetsa static prop!  "
    },
    "tags": []
  },
  {
    "label": "FL_STEPMOVEMENT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_STEPMOVEMENT (1 << 21)",
    "documentation": {
      "kind": "markdown",
      "value": " Changes the `SV_Movestep()` behavior to not do any processing "
    },
    "tags": []
  },
  {
    "label": "FL_SWIM",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_SWIM (1 << 11)",
    "documentation": {
      "kind": "markdown",
      "value": " Changes the `SV_Movestep()` behavior to not need to be on ground (but stay in water) "
    },
    "tags": []
  },
  {
    "label": "FL_TRANSRAGDOLL",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_TRANSRAGDOLL (1 << 29)",
    "documentation": {
      "kind": "markdown",
      "value": " In the process of turning into a client side ragdoll. "
    },
    "tags": []
  },
  {
    "label": "FL_UNBLOCKABLE_BY_PLAYER",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_UNBLOCKABLE_BY_PLAYER (1 << 30)",
    "documentation": {
      "kind": "markdown",
      "value": " pusher that can't be blocked by the player "
    },
    "tags": []
  },
  {
    "label": "FL_WATERJUMP",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_WATERJUMP (1 << 2)",
    "documentation": {
      "kind": "markdown",
      "value": " player jumping out of water "
    },
    "tags": []
  },
  {
    "label": "FL_WORLDBRUSH",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define FL_WORLDBRUSH (1 << 24)",
    "documentation": {
      "kind": "markdown",
      "value": " Not moveable/removeable brush entity (really part of the world, but represented as an entity for transparency or something) "
    },
    "tags": []
  },
  {
    "label": "FPERM_G_EXEC",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_G_EXEC 0x0008",
    "documentation": {
      "kind": "markdown",
      "value": "Group can exec. "
    },
    "tags": []
  },
  {
    "label": "FPERM_G_READ",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_G_READ 0x0020",
    "documentation": {
      "kind": "markdown",
      "value": "Group can read. "
    },
    "tags": []
  },
  {
    "label": "FPERM_G_WRITE",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_G_WRITE 0x0010",
    "documentation": {
      "kind": "markdown",
      "value": "Group can write. "
    },
    "tags": []
  },
  {
    "label": "FPERM_O_EXEC",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_O_EXEC 0x0001",
    "documentation": {
      "kind": "markdown",
      "value": "Anyone can exec. "
    },
    "tags": []
  },
  {
    "label": "FPERM_O_READ",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_O_READ 0x0004",
    "documentation": {
      "kind": "markdown",
      "value": "Anyone can read. "
    },
    "tags": []
  },
  {
    "label": "FPERM_O_WRITE",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_O_WRITE 0x0002",
    "documentation": {
      "kind": "markdown",
      "value": "Anyone can write. "
    },
    "tags": []
  },
  {
    "label": "FPERM_U_EXEC",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_U_EXEC 0x0040",
    "documentation": {
      "kind": "markdown",
      "value": "User can exec. "
    },
    "tags": []
  },
  {
    "label": "FPERM_U_READ",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_U_READ 0x0100",
    "documentation": {
      "kind": "markdown",
      "value": "User can read. "
    },
    "tags": []
  },
  {
    "label": "FPERM_U_WRITE",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define FPERM_U_WRITE 0x0080",
    "documentation": {
      "kind": "markdown",
      "value": "User can write. "
    },
    "tags": []
  },
  {
    "label": "FakeClientCommand",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void FakeClientCommand(int client, const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a client command on the server without being networked.\r\n \n `FakeClientCommand()` overwrites the command tokenization buffer.  This can  cause undesired effects because future calls to GetCmdArg* will return  data from the `FakeClientCommand()`, not the parent command.  If you are in  a hook where this matters (for example, a \"say\" hook), you should use  `FakeClientCommandEx()` instead.\n\n_@param_ `client` — >Index of the client.\n\n_@param_ `fmt` — >Format of the client command.\n\n_@param_ `...` — >Format parameters\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FakeClientCommandEx",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void FakeClientCommandEx(int client, const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a client command on the server without being networked.  The  execution of the client command is delayed by one frame to prevent any  re-entrancy issues that might surface with `FakeClientCommand()`.\n\n_@param_ `client` — >Index of the client.\n\n_@param_ `fmt` — >Format of the client command.\n\n_@param_ `...` — >Format parameters\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FakeClientCommandKeyValues",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void FakeClientCommandKeyValues(int client, KeyValues kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a KeyValues client command on the server without being networked.\n\n_@param_ `client` — >Index of the client.\n\n_@param_ `kv` — >KeyValues data to be sent.\n\n_@error_ Invalid client index, client not connected,                      or unsupported on current game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FeatureStatus",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 13,
    "detail": "enum FeatureStatus",
    "documentation": {
      "kind": "markdown",
      "value": "\n Feature statuses.\r\n "
    }
  },
  {
    "label": "FeatureStatus_Available",
    "labelDetails": {
      "description": "FeatureStatus::FeatureStatus_Available"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FeatureStatus_Unavailable",
    "labelDetails": {
      "description": "FeatureStatus::FeatureStatus_Unavailable"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FeatureStatus_Unknown",
    "labelDetails": {
      "description": "FeatureStatus::FeatureStatus_Unknown"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FeatureType",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 13,
    "detail": "enum FeatureType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Feature types.\r\n "
    }
  },
  {
    "label": "FeatureType_Capability",
    "labelDetails": {
      "description": "FeatureType::FeatureType_Capability"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FeatureType_Native",
    "labelDetails": {
      "description": "FeatureType::FeatureType_Native"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "File",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 7,
    "detail": "methodmap File",
    "documentation": {
      "kind": "markdown",
      "value": "A File object can be obtained by calling `OpenFile()`. File objects should beclosed with delete or `Close()`. Note that, \"delete file\" does notactually delete the file, it just closes the handle."
    }
  },
  {
    "label": "FileExists",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool FileExists(const char[] path, bool use_valve_fs=false, const char[] valve_path_id=\"GAME\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Checks if a file exists.\n\n_@param_ `path` — >Path to the file.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to find files existing in any of                      the Valve search paths, rather than solely files                      existing directly in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ True if the file exists, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FilePosition",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native int FilePosition(Handle file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Get current position in the file.\n\n_@param_ `file` — >Handle to the file.\n\n_@return_ Value for the file position indicator.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FileSeek",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool FileSeek(Handle file, int position, int where)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the file position indicator.\n\n_@param_ `file` — >Handle to the file.\n\n_@param_ `position` — >Position relative to what is specified in whence.\n\n_@param_ `where` — >SEEK_ constant value of where to see from.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FileSize",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native int FileSize(const char[] path, bool use_valve_fs=false, const char[] valve_path_id=\"GAME\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Get the file size in bytes.\n\n_@param_ `path` — >Path to the file.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to find files existing in any of                      the Valve search paths, rather than solely files                      existing directly in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ File size in bytes, -1 if file not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FileTimeMode",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 13,
    "detail": "enum FileTimeMode",
    "documentation": {
      "kind": "markdown",
      "value": "\n File time modes.\r\n "
    }
  },
  {
    "label": "FileTime_Created",
    "labelDetails": {
      "description": "FileTimeMode::FileTime_Created"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FileTime_LastAccess",
    "labelDetails": {
      "description": "FileTimeMode::FileTime_LastAccess"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FileTime_LastChange",
    "labelDetails": {
      "description": "FileTimeMode::FileTime_LastChange"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FileToKeyValues",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool FileToKeyValues(Handle kv, const char[] file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a file to a KeyValues tree.  The file is read into the current position of the tree.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `file` — >File to read from.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FileType",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 13,
    "detail": "enum FileType",
    "documentation": {
      "kind": "markdown",
      "value": "\n File inode types.\r\n "
    }
  },
  {
    "label": "FileType_Directory",
    "labelDetails": {
      "description": "FileType::FileType_Directory"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FileType_File",
    "labelDetails": {
      "description": "FileType::FileType_File"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FileType_Unknown",
    "labelDetails": {
      "description": "FileType::FileType_Unknown"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FindAdmGroup",
    "labelDetails": {
      "detail": "GroupId",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native GroupId FindAdmGroup(const char[] group_name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds a group by name.\n\n_@param_ `group_name` — >String containing the group name.\n\n_@return_ A group id, or INVALID_GROUP_ID if not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindAdminByIdentity",
    "labelDetails": {
      "detail": "AdminId",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native AdminId FindAdminByIdentity(const char[] auth, const char[] identity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Attempts to find an admin by an auth method and an identity.\n\n_@param_ `auth` — >Auth method to try.\n\n_@param_ `identity` — >Identity string to look up.\n\n_@return_ An AdminId index if found, INVALID_ADMIN_ID otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindCharInString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int FindCharInString(const char[] str, char c, bool reverse = false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds the first occurrence of a character in a string.\n\n_@param_ `str` — >String.\n\n_@param_ `c` — >Character to search for.\n\n_@param_ `reverse` — >False (default) to search forward, true to search                       backward.\n\n_@return_ The index of the first occurrence of the character                       in the string, or -1 if the character was not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindCommandLineParam",
    "labelDetails": {
      "detail": "bool",
      "description": "commandline.inc"
    },
    "kind": 3,
    "detail": "native bool FindCommandLineParam(const char[] param)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Determines if a specific command line parameter is present.\n\n_@param_ `param` — >The command line parameter to test.\n\n_@return_ True if the command line parameter is specified; otherwise, false.\n\n_@error_ No command line available, or no mod support.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindConVar",
    "labelDetails": {
      "detail": "ConVar",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native ConVar FindConVar(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Searches for a console variable.\n\n_@param_ `name` — >Name of convar to find.\n\n_@return_ A ConVar object if found; null otherwise.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindDataMapInfo",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int FindDataMapInfo(int entity,\n        const char[] prop,\n        PropFieldType &type=view_as<PropFieldType>(0),\n        int &num_bits=0,\n        int &local_offset=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given an entity, finds a nested datamap property offset. This information is cached for future calls.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `type` — >Optional parameter to store the type.\n\n_@param_ `num_bits` — >Optional parameter to store the number of bits the field                      uses.  The bit count will either be 1 (for boolean) or                      divisible by 8 (including 0 if unknown).\n\n_@param_ `local_offset` — >Optional parameter to store the local offset, as                      `FindDataMapOffs()` would return.\n\n_@return_ An offset, or -1 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindDataMapOffs",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int FindDataMapOffs(int entity,\n        const char[] prop,\n        PropFieldType &type=view_as<PropFieldType>(0),\n        int &num_bits=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given an entity, finds a datamap property offset. This information is cached for future calls.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `type` — >Optional parameter to store the type.\n\n_@param_ `num_bits` — >Optional parameter to store the number of bits the field                      uses.  The bit count will either be 1 (for boolean) or                      divisible by 8 (including 0 if unknown).\n\n_@return_ An offset, or -1 on failure.\n\n_@deprecated_ Use FindDataMapInfo instead, or HasEntProp if you just want to check for existence.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FindFirstConCommand",
    "labelDetails": {
      "detail": "Handle",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native Handle FindFirstConCommand(char[] buffer, int max_size, bool &isCommand, int &flags=0, char[] description=\"\", int descrmax_size=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a ConCommandBase search, traversing the list of ConVars and  ConCommands.  If a Handle is returned, the next entry must be read  via `FindNextConCommand()`.  The order of the list is undefined.\n\n_@param_ `buffer` — >Buffer to store entry name.\n\n_@param_ `max_size` — >Maximum size of the buffer.\n\n_@param_ `isCommand` — >Variable to store whether the entry is a command.                       If it is not a command, it is a ConVar.\n\n_@param_ `flags` — >Variable to store entry flags.\n\n_@param_ `description` — >Buffer to store the description, empty if no description present.\n\n_@param_ `descrmax_size` — >Maximum size of the description buffer.\n\n_@return_ On success, a ConCmdIter Handle is returned, which \r\n                        can be read via `FindNextConCommand()`, and must be \r\n                        closed via `CloseHandle()`.  Additionally, the output \r\n                        parameters will be filled with information of the \r\n                        first ConCommandBase entry.\r\n                        On failure, INVALID_HANDLE is returned, and the \r\n                        contents of outputs is undefined.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindFlagByChar",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool FindFlagByChar(int c, AdminFlag &flag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds a flag by a given character.\n\n_@param_ `c` — >Flag ASCII character/token.\n\n_@param_ `flag` — >Variable to store flag in.\n\n_@return_ True on success, false if not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindFlagByName",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool FindFlagByName(const char[] name, AdminFlag &flag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds a flag by its string name.\n\n_@param_ `name` — >Flag name (like \"kick\"), case sensitive.\n\n_@param_ `flag` — >Variable to store flag in.\n\n_@return_ True on success, false if not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindFlagChar",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool FindFlagChar(AdminFlag flag, int &c)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds the flag char for a given admin flag.\n\n_@param_ `flag` — >Flag to look up.\n\n_@param_ `c` — >Variable to store flag char.\n\n_@return_ True on success, false if not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindMap",
    "labelDetails": {
      "detail": "FindMapResult",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native FindMapResult FindMap(const char[] map, char[] foundmap, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a full or partial map name is found or can be resolved\n\n_@param_ `map` — >Map name (usually same as map path relative to maps/ dir,                      excluding .bsp extension).\n\n_@param_ `foundmap` — >Resolved map name. If the return is FindMap_FuzzyMatch                      or FindMap_NonCanonical the buffer will be the full path.\n\n_@param_ `maxlen` — >Maximum length to write to map var.\n\n_@return_ Result of the find operation. Not all result types are supported on all games.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindMapResult",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 13,
    "detail": "enum FindMapResult"
  },
  {
    "label": "FindMap_Found",
    "labelDetails": {
      "description": "FindMapResult::FindMap_Found"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FindMap_FuzzyMatch",
    "labelDetails": {
      "description": "FindMapResult::FindMap_FuzzyMatch"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FindMap_NonCanonical",
    "labelDetails": {
      "description": "FindMapResult::FindMap_NonCanonical"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FindMap_NotFound",
    "labelDetails": {
      "description": "FindMapResult::FindMap_NotFound"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FindMap_PossiblyAvailable",
    "labelDetails": {
      "description": "FindMapResult::FindMap_PossiblyAvailable"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "FindNextConCommand",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool FindNextConCommand(Handle search, char[] buffer, int max_size, bool &isCommand, int &flags=0, char[] description=\"\", int descrmax_size=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads the next entry in a ConCommandBase iterator.\n\n_@param_ `search` — >ConCmdIter Handle to search.\n\n_@param_ `buffer` — >Buffer to store entry name.\n\n_@param_ `max_size` — >Maximum size of the buffer.\n\n_@param_ `isCommand` — >Variable to store whether the entry is a command.\r\n                        If it is not a command, it is a ConVar.\n\n_@param_ `flags` — >Variable to store entry flags.\n\n_@param_ `description` — >Buffer to store the description, empty if no description present.\n\n_@param_ `descrmax_size` — >Maximum size of the description buffer.\n\n_@return_ On success, the outputs are filled, the iterator is \r\n                        advanced to the next entry, and true is returned.  \r\n                        If no more entries exist, false is returned, and the \r\n                        contents of outputs is undefined.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindPluginByFile",
    "labelDetails": {
      "detail": "Handle",
      "description": "helpers.inc"
    },
    "kind": 3,
    "detail": "stock Handle FindPluginByFile(const char[] filename)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns plugin handle from plugin filename.\n\n_@param_ `filename` — >Filename of the plugin to search for.\n\n_@return_ Handle to plugin if found, INVALID_HANDLE otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindPluginByNumber",
    "labelDetails": {
      "detail": "Handle",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native Handle FindPluginByNumber(int order_num)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds a plugin by its order in the list from the \"plugins list\" server \"sm\" command.  You should not use this function to loop through all plugins, use the iterator instead.  Looping through all plugins using this native is O(n^2), whereas using the iterator is `O(n)`.\n\n_@param_ `order_num` — >Number of the plugin as it appears in \"sm plugins list\".\n\n_@return_ Plugin Handle on success, INVALID_HANDLE if no plugin                      matches the given number.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindSendPropInfo",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int FindSendPropInfo(const char[] cls,\n      const char[] prop,\n      PropFieldType &type=view_as<PropFieldType>(0),\n      int &num_bits=0,\n      int &local_offset=0,\n      int &array_size=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given a ServerClass name, finds a networkable send property offset. This information is cached for future calls.\n\n_@param_ `cls` — >Classname.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `type` — >Optional parameter to store the type.\n\n_@param_ `num_bits` — >Optional parameter to store the number of bits the field                      uses, if applicable (otherwise 0 is stored).  The number                      of bits varies for integers and floats, and is always 0                      for strings.\n\n_@param_ `local_offset` — >Optional parameter to store the local offset, as                      `FindSendPropOffs()` would return.\n\n_@param_ `array_size` — >Optional parameter to store array size, 0 if not an array.\n\n_@return_ On success, returns an absolutely computed offset.                      If no offset is available, 0 is returned.                      If the property is not found, -1 is returned.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindSendPropOffs",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int FindSendPropOffs(const char[] cls, const char[] prop)",
    "documentation": {
      "kind": "markdown",
      "value": "\n\n_@endsection_ Given a ServerClass name, finds a networkable send property offset. This information is cached for future calls.\r\n \n Note, this function may return offsets that do not work! If a property is nested beneath a parent object, the resulting offset will be invalid for direct use with data functions.  Therefore, you should use `FindSendPropInfo()` instead.  An example of such a property is CTFPlayer::DT_LocalPlayer.m_nDisguiseClass on Team Fortress.\n\n_@param_ `cls` — >Classname.\n\n_@param_ `prop` — >Property name.\n\n_@return_ An offset, or -1 on failure.\n\n_@deprecated_ Use FindSendPropInfo instead, or HasEntProp if you just want to check for existence.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FindStringInArray",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int FindStringInArray(Handle array, const char[] item)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the index for the first occurrence of the provided string. If the string cannot be located, -1 will be returned.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `item` — >String to search for\n\n_@return_ Array index, or -1 on failure\n\n_@error_ Invalid Handle\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindTarget",
    "labelDetails": {
      "detail": "int",
      "description": "helpers.inc"
    },
    "kind": 3,
    "detail": "stock int FindTarget(int client, const char[] target, bool nobots = false, bool immunity = true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Wraps `ProcessTargetString()` and handles producing error messages for bad targets.\r\n \n Note that you should use LoadTranslations(\"common.phrases\") in `OnPluginStart()`.  \"common.phrases\" contains all of the translatable phrases that `FindTarget()` will reply with in the event a target is not found (error).\n\n_@param_ `client` — >Client who issued command\n\n_@param_ `target` — >Client's target argument\n\n_@param_ `nobots` — >Optional. Set to true if bots should NOT be targetted\n\n_@param_ `immunity` — >Optional. Set to false to ignore target immunity.\n\n_@return_ Index of target client, or -1 on error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FindValueInArray",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int FindValueInArray(Handle array, any item, int block=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the index for the first occurrence of the provided value. If the value cannot be located, -1 will be returned.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `item` — >Value to search for\n\n_@param_ `block` — >Optionally which block to search in\n\n_@return_ Array index, or -1 on failure\n\n_@error_ Invalid Handle or invalid block\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FireEvent",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void FireEvent(Handle event, bool dontBroadcast=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Fires a game event.\r\n \n This function closes the event Handle after completing.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `dontBroadcast` — >Optional boolean that determines if event should be broadcast to clients.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlagArrayToBits",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int FlagArrayToBits(const AdminFlag[] array, int numFlags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts an array of flags to bits.\n\n_@param_ `array` — >Array containing flags that are enabled.\n\n_@param_ `numFlags` — >Number of flags in the array.\n\n_@return_ A bit string composed of the array flags.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlagBitArrayToBits",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int FlagBitArrayToBits(const bool[] array, int maxSize)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a flag array to a bit string.\n\n_@param_ `array` — >Array containing true or false for each AdminFlag.\n\n_@param_ `maxSize` — >Maximum size of the flag array.\n\n_@return_ A bit string composed of the array bits.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlagBitsToArray",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int FlagBitsToArray(int bits, AdminFlag[] array, int maxSize)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a bit string to an array of flags.\n\n_@param_ `bits` — >Bit string containing the flags.\n\n_@param_ `array` — >Output array to write flags.\n\n_@param_ `maxSize` — >Maximum size of the flag array.\n\n_@return_ Number of flags written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlagBitsToBitArray",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int FlagBitsToBitArray(int bits, bool[] array, int maxSize)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a flag bit string to a bit array.\n\n_@param_ `bits` — >Bit string containing the flags.\n\n_@param_ `array` — >Array to write the flags to.  Enabled flags will be 'true'.\n\n_@param_ `maxSize` — >Maximum number of flags the array can store.\n\n_@return_ Number of flags written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlagBitsToString",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "stock int FlagBitsToString(const int bits, char[] flags, const int maxSize)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a bit string to a string of flag characters.\n\n_@param_ `bits` — >Bit string containing the flags.\n\n_@param_ `flags` — >Output array to write a string of flag characters.\n\n_@param_ `maxSize` — >Maximum size of the string array.\n\n_@return_ Number of flag characters written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlagToBit",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "stock int FlagToBit(AdminFlag flag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a flag to its single bit.\n\n_@param_ `flag` — >Flag to convert.\n\n_@return_ Bit representation of the flag.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Float",
    "kind": 14
  },
  {
    "label": "FloatAbs",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float FloatAbs(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns an absolute value.\n\n_@param_ `value` — >Input value.\n\n_@return_ Absolute value of the input.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FloatAdd",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float FloatAdd(float oper1, float oper2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds two floats together.\r\n \n Note: This native is internal implementation. For addition use the '+' operator.\n\n_@param_ `oper1` — >First value.\n\n_@param_ `oper2` — >Second value.\n\n_@return_ oper1+oper2.\n\n_@deprecated_ This native is internal implementation. For addition use the '+' operator.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FloatCompare",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native int FloatCompare(float fOne, float fTwo)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Compares two floats.\n\n_@param_ `fOne` — >First value.\n\n_@param_ `fTwo` — >Second value.\n\n_@return_ Returns 1 if the first argument is greater than the second argument.                      Returns -1 if the first argument is smaller than the second argument.                      Returns 0 if both arguments are equal.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FloatDiv",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float FloatDiv(float dividend, float divisor)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Divides the dividend by the divisor.\r\n \n Note: This native is internal implementation. For division use the '/' operator.\n\n_@param_ `dividend` — >First value.\n\n_@param_ `divisor` — >Second value.\n\n_@return_ dividend/divisor.\n\n_@deprecated_ This native is internal implementation. For division use the '/' operator.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FloatFraction",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float FloatFraction(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the decimal part of a float.\n\n_@param_ `value` — >Input value.\n\n_@return_ Decimal part.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FloatMul",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float FloatMul(float oper1, float oper2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Multiplies two floats together.\r\n \n Note: This native is internal implementation. For multiplication use the '*' operator.\n\n_@param_ `oper1` — >First value.\n\n_@param_ `oper2` — >Second value.\n\n_@return_ oper1*oper2.\n\n_@deprecated_ This native is internal implementation. For multiplication use the '*' operator.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FloatSub",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float FloatSub(float oper1, float oper2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Subtracts oper2 from oper1.\r\n \n Note: This native is internal implementation. For subtraction use the '-' operator.\n\n_@param_ `oper1` — >First value.\n\n_@param_ `oper2` — >Second value.\n\n_@return_ oper1-oper2.\n\n_@deprecated_ This native is internal implementation. For subtraction use the '-' operator.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FloatToString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int FloatToString(float num, char[] str, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a floating point number to a string.\n\n_@param_ `num` — >Floating point number to convert.\n\n_@param_ `str` — >Buffer to store string in.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@return_ Number of characters written to the buffer,                      not including the null terminator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FlushFile",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool FlushFile(Handle file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Flushes a file's buffered output; any buffered output is immediately written to the file.\n\n_@param_ `file` — >Handle to the file.\n\n_@return_ True on success or use_valve_fs specified with OpenFile,                      otherwise false on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ForceChangeLevel",
    "labelDetails": {
      "detail": "void",
      "description": "nextmap.inc"
    },
    "kind": 3,
    "detail": "native void ForceChangeLevel(const char[] map, const char[] reason)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Changes the current map and records the reason for the change with maphistory\n\n_@param_ `map` — >Map to change to.\n\n_@param_ `reason` — >Reason for change.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Format",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int Format(char[] buffer, int maxlength, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Formats a string according to the SourceMod format rules (see documentation).\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@return_ Number of characters written to the buffer,                      not including the null terminator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FormatActivitySource",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool FormatActivitySource(int client, int target, const char[] namebuf, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given an originating client and a target client, returns the string  that describes the originating client according to the sm_show_activity cvar.\r\n \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer.\n\n_@param_ `client` — >Originating client; may be 0 for server console.\n\n_@param_ `target` — >Targeted client.\n\n_@param_ `namebuf` — >Name buffer.\n\n_@param_ `maxlength` — >Maximum size of the name buffer.\n\n_@return_ True if activity should be shown.  False otherwise.  In either                       case, the name buffer is filled.  The return value can be used                       to broadcast a \"safe\" name to all players regardless of the                       sm_show_activity filters.\n\n_@error_ Invalid client index or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FormatEx",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int FormatEx(char[] buffer, int maxlength, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Formats a string according to the SourceMod format rules (see documentation).\n\n_@note_ This is the same as `Format()`, except none of the input buffers can        overlap the same memory as the output buffer.  Since this security        check is removed, it is slightly faster.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@return_ Number of characters written to the buffer,                      not including the null terminator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FormatNativeString",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int FormatNativeString(int out_param,\n        int fmt_param,\n        int vararg_param,\n        int out_len,\n        int &written=0,\n        char[] out_string=\"\",\n        const char[] fmt_string=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Formats a string using parameters from a native.\n\n_@note_ All parameter indexes start at 1.\n\n_@note_ If the input and output buffers overlap, the contents       of the output buffer at the end is undefined.\n\n_@param_ `out_param` — >Output parameter number to write to.  If 0, out_string is used.\n\n_@param_ `fmt_param` — >Format parameter number.  If 0, fmt_string is used.\n\n_@param_ `vararg_param` — >First variable parameter number.\n\n_@param_ `out_len` — >Output string buffer maximum length (always required).\n\n_@param_ `written` — >Optionally stores the number of bytes written.\n\n_@param_ `out_string` — >Output string buffer to use if out_param is not used.\n\n_@param_ `fmt_string` — >Format string to use if fmt_param is not used.\n\n_@return_ SP_ERROR_NONE on success, anything else on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FormatTime",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void FormatTime(char[] buffer, int maxlength, const char[] format, int stamp=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Produces a date and/or time string value for a timestamp.\r\n \n See this URL for valid parameters: http:cplusplus.com/reference/clibrary/ctime/strftime.html\r\n \n Note that available parameters depends on support from your operating system. In particular, ones highlighted in yellow on that page are not currently available on Windows and should be avoided for portable plugins.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `format` — >Formatting rules (passing NULL_STRING will use the rules defined in sm_datetime_format).\n\n_@param_ `stamp` — >Optional time stamp.\n\n_@error_ Buffer too small or invalid time format.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "FormatUserLogText",
    "labelDetails": {
      "detail": "void",
      "description": "helpers.inc"
    },
    "kind": 3,
    "detail": "stock void FormatUserLogText(int client, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is deprecated. Use the %L format specifier instead.\r\n \n Formats a user's info as log text.\n\n_@param_ `client` — >Client index.\n\n_@param_ `buffer` — >Buffer for text.\n\n_@param_ `maxlength` — >Maximum length of text.\n\n_@deprecated_ Use the %L format specifier instead.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "FrameIterator",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 7,
    "detail": "methodmap FrameIterator"
  },
  {
    "label": "GameConfGetAddress",
    "labelDetails": {
      "detail": "Address",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native Address GameConfGetAddress(Handle gameconf, const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds an address calculation in a GameConfig file, performs LoadFromAddress on it as appropriate, then returns the final address.\n\n_@param_ `gameconf` — >Game config handle.\n\n_@param_ `name` — >Name of the property to find.\n\n_@return_ An address calculated on success, or 0 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GameConfGetKeyValue",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native bool GameConfGetKeyValue(Handle gc, const char[] key, char[] buffer, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the value of a key from the \"Keys\" section.\n\n_@param_ `gc` — >Game config handle.\n\n_@param_ `key` — >Key to retrieve from the Keys section.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlen` — >Maximum length of output string buffer.\n\n_@return_ True if key existed, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GameConfGetOffset",
    "labelDetails": {
      "detail": "int",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native int GameConfGetOffset(Handle gc, const char[] key)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns an offset value.\n\n_@param_ `gc` — >Game config handle.\n\n_@param_ `key` — >Key to retrieve from the offset section.\n\n_@return_ An offset, or -1 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GameData",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 7,
    "detail": "methodmap GameData"
  },
  {
    "label": "GameLogHook",
    "labelDetails": {
      "description": "logging.inc"
    },
    "kind": 8,
    "detail": "typedef GameLogHook = function Action (const char[] message);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a game log message is received.\r\n \n Any Log*() functions called within this callback will not recursively pass through.  That is, they will log directly, bypassing this callback.\r\n \n Note that this does not capture log messages from the engine.  It only captures log messages being sent from the game/mod itself.\n\n_@param_ `message` — >Message contents.\n\n_@return_ Plugin_Handled or Plugin_Stop will prevent the message                      from being written to the log file.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdmGroupAddFlag",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool GetAdmGroupAddFlag(GroupId id, AdminFlag flag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the set value of an add flag on a group's flag set.\n\n_@note_ These are called \"add flags\" because they add to a user's flags.\n\n_@param_ `id` — >Group id.\n\n_@param_ `flag` — >Admin flag to retrieve.\n\n_@return_ True if enabled, false otherwise,\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdmGroupAddFlags",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdmGroupAddFlags(GroupId id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the flag set that is added to a user from their group.\n\n_@note_ These are called \"add flags\" because they add to a user's flags.\n\n_@param_ `id` — >GroupId of the group.\n\n_@return_ Bitstring containing the flags enabled.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdmGroupCmdOverride",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool GetAdmGroupCmdOverride(GroupId id, const char[] name, OverrideType type, OverrideRule &rule)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a group-specific command override.\n\n_@param_ `id` — >Group id.\n\n_@param_ `name` — >String containing command name (case sensitive).\n\n_@param_ `type` — >Override type (specific command or group).\n\n_@param_ `rule` — >Optional pointer to store allow/deny setting.\n\n_@return_ True if an override exists, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdmGroupImmuneCount",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdmGroupImmuneCount(GroupId id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of specific group immunities.\n\n_@param_ `id` — >Group id.\n\n_@return_ Number of group immunities.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdmGroupImmuneFrom",
    "labelDetails": {
      "detail": "GroupId",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native GroupId GetAdmGroupImmuneFrom(GroupId id, int number)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a group that this group is immune to given an index.\n\n_@param_ `id` — >Group id.\n\n_@param_ `number` — >Index from 0 to N-1, from `GetAdmGroupImmuneCount()`.\n\n_@return_ GroupId that this group is immune to, or INVALID_GROUP_ID on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdmGroupImmunity",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool GetAdmGroupImmunity(GroupId id, ImmunityType type)",
    "documentation": {
      "kind": "markdown",
      "value": "\n\n_@deprecated_ Functionality removed.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "GetAdmGroupImmunityLevel",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdmGroupImmunityLevel(GroupId gid)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a group's immunity level (defaults to 0).\n\n_@param_ `gid` — >Group Id.\n\n_@return_ Immunity level value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminFlag",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool GetAdminFlag(AdminId id, AdminFlag flag, AdmAccessMode mode=Access_Effective)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not a flag is enabled on an admin.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `flag` — >Admin flag to use.\n\n_@param_ `mode` — >Access mode to check.\n\n_@return_ True if enabled, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminFlags",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdminFlags(AdminId id, AdmAccessMode mode)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the bitstring of access flags on an admin.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `mode` — >Access mode to use.\n\n_@return_ A bitstring containing which flags are enabled.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminGroup",
    "labelDetails": {
      "detail": "GroupId",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native GroupId GetAdminGroup(AdminId id, int index, char[] name, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns group information from an admin.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `index` — >Group number to retrieve, from 0 to N-1, where N                      is the value of `GetAdminGroupCount(id)`.\n\n_@param_ `name` — >Buffer to store the group's name.                      Note: This will safely chop UTF-8 strings.\n\n_@param_ `maxlength` — >Maximum size of the output name buffer.\n\n_@return_ A GroupId index and a name pointer, or                      INVALID_GROUP_ID and NULL if an error occurred.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminGroupCount",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdminGroupCount(AdminId id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of groups this admin is a member of.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@return_ Number of groups this admin is a member of.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminImmunityLevel",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdminImmunityLevel(AdminId id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an admin's immunity level.\n\n_@param_ `id` — >Admin Id.\n\n_@return_ Immunity level value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminPassword",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool GetAdminPassword(AdminId id, char[] buffer=\"\", int maxlength=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an admin's password.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `buffer` — >Optional buffer to store the admin's password.\n\n_@param_ `maxlength` — >Maximum size of the output name buffer.                      Note: This will safely chop UTF-8 strings.\n\n_@return_ True if there was a password set, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAdminUsername",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int GetAdminUsername(AdminId id, char[] name, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an admin's user name as made with `CreateAdmin()`.\n\n_@note_ This function can return UTF-8 strings, and will safely chop UTF-8 strings.\n\n_@param_ `id` — >AdminId of the admin.\n\n_@param_ `name` — >String buffer to store name.\n\n_@param_ `maxlength` — >Maximum size of string buffer.\n\n_@return_ Number of bytes written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetAngleVectors",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native void GetAngleVectors(const float angle[3], float fwd[3], float right[3], float up[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns vectors in the direction of an angle.\n\n_@param_ `angle` — >Angle.\n\n_@param_ `fwd` — >Forward vector buffer or NULL_VECTOR.\n\n_@param_ `right` — >Right vector buffer or NULL_VECTOR.\n\n_@param_ `up` — >Up vector buffer or NULL_VECTOR.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetArrayArray",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int GetArrayArray(Handle array, int index, any[] buffer, int size=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an array of cells from an array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array.\n\n_@param_ `buffer` — >Buffer to store the array in.\n\n_@param_ `size` — >If not set, assumes the buffer size is equal to the                      blocksize.  Otherwise, the size passed is used.\n\n_@return_ Number of cells copied.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetArrayBlockSize",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int GetArrayBlockSize(Handle array)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the blocksize the array was created with.\n\n_@param_ `array` — >Array Handle.\n\n_@return_ The blocksize of the array.\n\n_@error_ Invalid Handle\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetArrayCell",
    "labelDetails": {
      "detail": "any",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native any GetArrayCell(Handle array, int index, int block=0, bool asChar=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a cell value from an array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array.\n\n_@param_ `block` — >Optionally specify which block to read from                      (useful if the blocksize \\> 0).\n\n_@param_ `asChar` — >Optionally read as a byte instead of a cell.\n\n_@return_ Value read.\n\n_@error_ Invalid Handle, invalid index, or invalid block.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetArraySize",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int GetArraySize(Handle array)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the array size.\n\n_@param_ `array` — >Array Handle.\n\n_@return_ Number of elements in the array.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetArrayString",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int GetArrayString(Handle array, int index, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a string value from an array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array.\n\n_@param_ `buffer` — >Buffer to copy to.\n\n_@param_ `maxlength` — >Maximum size of the buffer.\n\n_@return_ Number of characters copied.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCharBytes",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int GetCharBytes(const char[] source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of bytes a character is using.  This is for multi-byte characters (UTF-8).  For normal ASCII characters, this will return 1.\n\n_@param_ `source` — >Source input string.\n\n_@return_ Number of bytes the current character uses.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAbsAngles",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void GetClientAbsAngles(int client, float ang[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's position angle.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `ang` — >Destination vector to store the client's position angle.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAbsOrigin",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void GetClientAbsOrigin(int client, float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's origin vector.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `vec` — >Destination vector to store the client's origin vector.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientArmor",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientArmor(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's armor.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Armor value.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAuthId",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool GetClientAuthId(int client, AuthIdType authType, char[] auth, int maxlen, bool validate=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a client's authentication string (SteamID).\n\n_@param_ `client` — >Player index.\n\n_@param_ `authType` — >Auth id type and format to use.\n\n_@param_ `auth` — >Buffer to store the client's auth id.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@param_ `validate` — >Check backend validation status.                      DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,                      You WILL KNOW if you need to use this, MOST WILL NOT.\n\n_@return_ True on success, false otherwise.\n\n_@error_ If the client is not connected or the index is invalid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAuthString",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool GetClientAuthString(int client, char[] auth, int maxlen, bool validate=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a client's authentication string (SteamID).\n\n_@param_ `client` — >Player index.\n\n_@param_ `auth` — >Buffer to store the client's auth string.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@param_ `validate` — >Check backend validation status.                      DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,                      You WILL KNOW if you need to use this, MOST WILL NOT.\n\n_@return_ True on success, false otherwise.\n\n_@error_ If the client is not connected or the index is invalid.\n\n_@deprecated_ Use GetClientAuthId\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "GetClientAvgChoke",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientAvgChoke(int client, NetFlow flow)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's average packet choke, values go from 0 to 1 (for percentages).\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flow` — >Traffic flowing direction.\n\n_@return_ Average packet loss, or -1 if network info is not available.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAvgData",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientAvgData(int client, NetFlow flow)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's data flow in bytes/sec.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flow` — >Traffic flowing direction.\n\n_@return_ Data flow.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAvgLatency",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientAvgLatency(int client, NetFlow flow)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's average packet latency in seconds.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flow` — >Traffic flowing direction.\n\n_@return_ Latency, or -1 if network info is not available.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAvgLoss",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientAvgLoss(int client, NetFlow flow)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's average packet loss, values go from 0 to 1 (for percentages).\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flow` — >Traffic flowing direction.\n\n_@return_ Average packet loss, or -1 if network info is not available.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientAvgPackets",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientAvgPackets(int client, NetFlow flow)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's average packet frequency in packets/sec.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flow` — >Traffic flowing direction.\n\n_@return_ Packet frequency.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientButtons",
    "labelDetails": {
      "detail": "int",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock int GetClientButtons(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Get's a users current pressed buttons\n\n_@param_ `client` — >Client index\n\n_@return_ Bitsum of buttons\n\n_@error_ Invalid client index, client not in game,                      or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientCount",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientCount(bool inGameOnly=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client count put in the server.\n\n_@param_ `inGameOnly` — >If false connecting players are also counted.\n\n_@return_ Client count in the server.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientDataRate",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientDataRate(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's send data rate in bytes/sec.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Data rate.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientDeaths",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientDeaths(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's death count.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Death count.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientFrags",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientFrags(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's frag count.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Frag count.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientFromSerial",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientFromSerial(int serial)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client index by its serial number.\n\n_@param_ `serial` — >Serial number.\n\n_@return_ Client index, or 0 for invalid serial.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientHealth",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientHealth(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's health.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Health value.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientIP",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool GetClientIP(int client, char[] ip, int maxlen, bool remport=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a client's IP address.\n\n_@param_ `client` — >Player index.\n\n_@param_ `ip` — >Buffer to store the client's ip address.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@param_ `remport` — >Remove client's port from the ip string (true by default).\n\n_@return_ True on success, false otherwise.\n\n_@error_ If the client is not connected or the index is invalid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientInfo",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool GetClientInfo(int client, const char[] key, char[] value, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves values from client replicated keys.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `key` — >Key string.\n\n_@param_ `value` — >Buffer to store value.\n\n_@param_ `maxlen` — >Maximum length of valve (UTF-8 safe).\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientLanguage",
    "labelDetails": {
      "detail": "int",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native int GetClientLanguage(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the language number of a client.\n\n_@param_ `client` — >Client index.\n\n_@return_ Language number client is using.\n\n_@error_ Invalid client index or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientLatency",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientLatency(int client, NetFlow flow)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flow` — >Traffic flowing direction.\n\n_@return_ Latency, or -1 if network info is not available.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientMaxs",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void GetClientMaxs(int client, float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's max size vector.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `vec` — >Destination vector to store the client's max size.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientMenu",
    "labelDetails": {
      "detail": "MenuSource",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientMins",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void GetClientMins(int client, float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's min size vector.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `vec` — >Destination vector to store the client's min size.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientModel",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void GetClientModel(int client, char[] model, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's model name.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `model` — >Buffer to store the client's model name.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientName",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool GetClientName(int client, char[] name, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's name.\n\n_@param_ `client` — >Player index.\n\n_@param_ `name` — >Buffer to store the client's name.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@return_ True on success, false otherwise.\n\n_@error_ If the client is not connected an error will be thrown.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientOfUserId",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientOfUserId(int userid)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Translates an userid index to the real player index.\n\n_@param_ `userid` — >Userid value.\n\n_@return_ Client value.\n\n_@error_ Returns 0 if invalid userid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientSerial",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientSerial(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the clients unique serial identifier.\n\n_@param_ `client` — >Client index.\n\n_@return_ Serial number.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientTeam",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientTeam(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a client's team index.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Team index the client is on (mod specific).\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientTime",
    "labelDetails": {
      "detail": "float",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native float GetClientTime(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's connection time in seconds.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Connection time.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientUserId",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetClientUserId(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a client's user id, which is an index incremented for every client that joins the server.\n\n_@param_ `client` — >Player index.\n\n_@return_ User id of the client.\n\n_@error_ If the client is not connected or the index is invalid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientWeapon",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void GetClientWeapon(int client, char[] weapon, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's weapon name.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `weapon` — >Buffer to store the client's weapon name.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetClientsInRange",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetClientsInRange(const float origin[3], ClientRangeType rangeType, int[] clients, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Find clients that are potentially in range of a position.\n\n_@param_ `origin` — >Coordinates from which to test range.\n\n_@param_ `rangeType` — >Range type to use for filtering clients.\n\n_@param_ `clients` — >Array to which found client indexes will be written.\n\n_@param_ `size` — >Maximum size of clients array.\n\n_@return_ Number of client indexes written to clients array.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCmdArg",
    "labelDetails": {
      "detail": "int",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native int GetCmdArg(int argnum, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a command argument given its index, from the current console or  server command.\n\n_@note_ Argument indexes start at 1; 0 retrieves the command name.\n\n_@param_ `argnum` — >Argument number to retrieve.\n\n_@param_ `buffer` — >Buffer to use for storing the string.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@return_ Length of string written to buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCmdArgInt",
    "labelDetails": {
      "detail": "int",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "stock int GetCmdArgInt(int argnum)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a numeric command argument given its index, from the current console or server command. Will return 0 if the argument can not be parsed as a number. Use GetCmdArgIntEx to handle that explicitly.\n\n_@param_ `argnum` — >Argument number to retrieve.\n\n_@return_ Value of the command argument.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCmdArgIntEx",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "stock bool GetCmdArgIntEx(int argnum, int &value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a numeric command argument given its index, from the current console or server command. Returns false if the argument can not be completely parsed as an integer.\n\n_@param_ `argnum` — >Argument number to retrieve.\n\n_@param_ `value` — >Populated with the value of the command argument.\n\n_@return_ Whether the argument was entirely a numeric value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCmdArgString",
    "labelDetails": {
      "detail": "int",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native int GetCmdArgString(char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the entire command argument string in one lump from the current  console or server command.\n\n_@param_ `buffer` — >Buffer to use for storing the string.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@return_ Length of string written to buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCmdArgs",
    "labelDetails": {
      "detail": "int",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native int GetCmdArgs()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of arguments from the current console or server command.\n\n_@note_ Unlike the HL2 engine call, this does not include the command itself.\n\n_@return_ Number of arguments to the current command.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCmdReplySource",
    "labelDetails": {
      "detail": "ReplySource",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native ReplySource GetCmdReplySource()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the current reply source of a command.\n\n_@return_ ReplySource value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandFlags",
    "labelDetails": {
      "detail": "int",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native int GetCommandFlags(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the bitstring of flags of a command.\n\n_@param_ `name` — >Name of the command.\n\n_@return_ A bitstring containing the FCVAR_* flags that are enabled                       or INVALID_FCVAR_FLAGS if command not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandIterator",
    "labelDetails": {
      "detail": "Handle",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native Handle GetCommandIterator()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a command iterator.  Must be freed with `CloseHandle()`.\n\n_@return_ A new command iterator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandLine",
    "labelDetails": {
      "detail": "bool",
      "description": "commandline.inc"
    },
    "kind": 3,
    "detail": "native bool GetCommandLine(char[] commandLine, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the full command line the server was launched with.\n\n_@param_ `commandLine` — >Buffer to store the command line in.\n\n_@param_ `maxlen` — >Maximum length of the command line buffer.\n\n_@return_ True if the command line is valid; otherwise, false.\n\n_@error_ No command line available, or no mod support.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandLineParam",
    "labelDetails": {
      "detail": "void",
      "description": "commandline.inc"
    },
    "kind": 3,
    "detail": "native void GetCommandLineParam(const char[] param, char[] value, int maxlen, const char[] defValue=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the value of a command line parameter the server was launched with.\n\n_@param_ `param` — >The command line parameter to get the value of.\n\n_@param_ `value` — >Buffer to store the parameter value in.\n\n_@param_ `maxlen` — >Maximum length of the value buffer.\n\n_@param_ `defValue` — >The default value to return if the parameter wasn't specified.\n\n_@error_ No command line available, or no mod support.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandLineParamFloat",
    "labelDetails": {
      "detail": "float",
      "description": "commandline.inc"
    },
    "kind": 3,
    "detail": "native float GetCommandLineParamFloat(const char[] param, float defValue=0.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the value of a command line parameter the server was launched with.\n\n_@param_ `param` — >The command line parameter to get the value of.\n\n_@param_ `defValue` — >The default value to return if the parameter wasn't specified.\n\n_@return_ The floating point value of the command line parameter value.\n\n_@error_ No command line available, or no mod support.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandLineParamInt",
    "labelDetails": {
      "detail": "int",
      "description": "commandline.inc"
    },
    "kind": 3,
    "detail": "native int GetCommandLineParamInt(const char[] param, int defValue=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the value of a command line parameter the server was launched with.\n\n_@param_ `param` — >The command line parameter to get the value of.\n\n_@param_ `defValue` — >The default value to return if the parameter wasn't specified.\n\n_@return_ The integer value of the command line parameter value.\n\n_@error_ No command line available, or no mod support.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCommandOverride",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool GetCommandOverride(const char[] cmd, OverrideType type, int &flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a command override.\n\n_@param_ `cmd` — >String containing command name (case sensitive).\n\n_@param_ `type` — >Override type (specific command or group).\n\n_@param_ `flags` — >By-reference cell to store the flag (undefined if not found).\n\n_@return_ True if there is an override, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarBool",
    "labelDetails": {
      "detail": "bool",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native bool GetConVarBool(Handle convar)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the boolean value of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@return_ The boolean value of the convar.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarBounds",
    "labelDetails": {
      "detail": "bool",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native bool GetConVarBounds(Handle convar, ConVarBounds type, float &value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the specified bound of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `type` — >Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper.\n\n_@param_ `value` — >By-reference cell to store the specified floating point bound value.\n\n_@return_ True if the convar has the specified bound set, false otherwise.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarDefault",
    "labelDetails": {
      "detail": "int",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native int GetConVarDefault(Handle convar, char[] value, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the default string value of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `value` — >Buffer to store the default value of the convar.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@return_ Number of bytes written to the buffer (UTF-8 safe).\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarFlags",
    "labelDetails": {
      "detail": "int",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native int GetConVarFlags(Handle convar)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the bitstring of flags on a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@return_ A bitstring containing the FCVAR_* flags that are enabled.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarFloat",
    "labelDetails": {
      "detail": "float",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native float GetConVarFloat(Handle convar)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the floating point value of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@return_ The floating point value of the convar.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarInt",
    "labelDetails": {
      "detail": "int",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native int GetConVarInt(Handle convar)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the integer value of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@return_ The integer value of the convar.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarName",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void GetConVarName(Handle convar, char[] name, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the name of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `name` — >Buffer to store the name of the convar.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@error_ Invalid or corrupt Handle.     \n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetConVarString",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void GetConVarString(Handle convar, char[] value, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the string value of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `value` — >Buffer to store the value of the convar.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@error_ Invalid or corrupt Handle.     \n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetCurrentMap",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetCurrentMap(char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the current map name.\n\n_@param_ `buffer` — >Buffer to store map name.\n\n_@param_ `maxlength` — >Maximum length of buffer.\n\n_@return_ Number of bytes written (UTF-8 safe).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEdictClassname",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native bool GetEdictClassname(int edict, char[] clsname, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an edict classname.\n\n_@param_ `edict` — >Index of the entity.\n\n_@param_ `clsname` — >Buffer to store the classname.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@return_ True on success, false if there is no classname set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEdictFlags",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEdictFlags(int edict)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the flags on an edict.  These are not the same as entity flags.\n\n_@param_ `edict` — >Index of the entity.\n\n_@return_ Edict flags.\n\n_@error_ Invalid edict index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEngineTime",
    "labelDetails": {
      "detail": "float",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native float GetEngineTime()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a high-precision time value for profiling the engine.\n\n_@return_ A floating point time value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEngineVersion",
    "labelDetails": {
      "detail": "EngineVersion",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native EngineVersion GetEngineVersion()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the engine version that the currently-loaded SM core was compiled against.\r\n \n The engine version values are not guaranteed to be in any particular order, and should only be compared by (in)equality.\n\n_@return_ An EngineVersion value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntData",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntData(int entity, int offset, int size=4)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and retrieves the integer value at the given offset.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `size` — >Number of bytes to read (valid values are 1, 2, or 4).\n\n_@return_ Value at the given memory location.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntDataArray",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "stock void GetEntDataArray(int entity, int offset, any[] array, int arraySize, int dataSize=4)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Copies an array of cells from an entity at a given offset.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `array` — >Array to read into.\n\n_@param_ `arraySize` — >Number of values to read.\n\n_@param_ `dataSize` — >Size of each value in bytes (1, 2, or 4).\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntDataEnt",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntDataEnt(int entity, int offset)",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is deprecated.  Use GetEntDataEnt2 instead, for reasons explained in the notes.\r\n \n Note: This function returns 0 on failure, which may be misleading, as the number 0 is also used for the world entity index.\r\n \n Note: This function makes no attempt to validate the returned entity, and in fact, it could be garbage or completely unexpected.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@return_ Entity index at the given location, or 0 if none.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\n\n_@deprecated_ Use `GetEntDataEnt2()` instead.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "GetEntDataEnt2",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntDataEnt2(int entity, int offset)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and retrieves the entity index at the given offset.\r\n \n Note: This will only work on offsets that are stored as \"entity handles\" (which usually looks like m_h* in properties).  These are not SourceMod Handles, but internal Source structures.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@return_ Entity index at the given location.  If there is no entity,                      or the stored entity is invalid, then -1 is returned.\n\n_@error_ Invalid input entity, or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntDataFloat",
    "labelDetails": {
      "detail": "float",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native float GetEntDataFloat(int entity, int offset)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and retrieves the float value at the given offset.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@return_ Value at the given memory location.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntDataString",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntDataString(int entity, int offset, char[] buffer, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and retrieves the string at the given offset.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlen` — >Maximum length of output string buffer.\n\n_@return_ Number of non-null bytes written.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntDataVector",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void GetEntDataVector(int entity, int offset, float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and retrieves the vector at the given offset.\n\n_@note_ Both a Vector and a QAngle are three floats.  This is a       convenience function and will work with both types.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `vec` — >Vector buffer to store data in.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntProp",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntProp(int entity, PropType type, const char[] prop, int size=4, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an integer value from an entity's property.\r\n \n This function is considered safer and more robust over GetEntData, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `size` — >Number of bytes to write (valid values are 1, 2, or 4).                      This value is auto-detected, and the size parameter is                      only used as a fallback in case detection fails.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@return_ Value at the given property offset.\n\n_@error_ Invalid entity or property not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntPropArraySize",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntPropArraySize(int entity, PropType type, const char[] prop)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the count of values that an entity property's array can store.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@return_ Size of array (in elements) or 0 if property is not an array.\n\n_@error_ Invalid entity or property not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntPropEnt",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntPropEnt(int entity, PropType type, const char[] prop, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an entity index from an entity's property.\r\n \n This function is considered safer and more robust over GetEntDataEnt*, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@return_ Entity index at the given property.                      If there is no entity, or the entity is not valid,                      then -1 is returned.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntPropFloat",
    "labelDetails": {
      "detail": "float",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native float GetEntPropFloat(int entity, PropType type, const char[] prop, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a float value from an entity's property.\r\n \n This function is considered safer and more robust over GetEntDataFloat, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@return_ Value at the given property offset.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntPropString",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntPropString(int entity, PropType type, const char[] prop, char[] buffer, int maxlen, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a network property as a string.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property to use.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlen` — >Maximum length of output string buffer.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@return_ Number of non-null bytes written.\n\n_@error_ Invalid entity, offset out of reasonable bounds, or property is not a valid string.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntPropVector",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void GetEntPropVector(int entity, PropType type, const char[] prop, float vec[3], int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a vector of floats from an entity, given a named network property.\r\n \n This function is considered safer and more robust over GetEntDataVector, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `vec` — >Vector buffer to store data in.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@error_ Invalid entity, property not found, or property not                      actually a vector data type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntSendPropOffs",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "stock int GetEntSendPropOffs(int ent, const char[] prop, bool actual=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Wrapper function for finding a send property for a particular entity.\n\n_@param_ `ent` — >Entity index.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `actual` — >Defaults to false for backwards compatibility.                      If true, the newer `FindSendPropInfo()` function                      is used instead.\n\n_@return_ An offset, or -1 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityAddress",
    "labelDetails": {
      "detail": "Address",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native Address GetEntityAddress(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the memory address of an entity.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ Address of the entity.\n\n_@error_ Invalid entity.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityClassname",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "stock bool GetEntityClassname(int entity, char[] clsname, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the classname of an entity. This is like `GetEdictClassname()`, except it works for ALL entities, not just edicts.\n\n_@param_ `entity` — >Index of the entity.\n\n_@param_ `clsname` — >Buffer to store the classname.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@return_ True on success, false if there is no classname set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityCount",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetEntityCount()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of networked entities in the server.\r\n \n Note: For legacy reasons, this only returns the current count of networked entities (current edicts), rather than total count of current entities.\n\n_@return_ Number of entities in the server.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityFlags",
    "labelDetails": {
      "detail": "int",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "native int GetEntityFlags(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Get an entity's flags.\n\n_@note_ The game's actual flags are internally translated by SM       to match the entity flags defined above as the actual values       can differ per engine.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ Entity's flags, see entity flag defines above.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityGravity",
    "labelDetails": {
      "detail": "float",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock float GetEntityGravity(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an entity's gravity.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ Entity's m_flGravity value.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityMoveType",
    "labelDetails": {
      "detail": "MoveType",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock MoveType GetEntityMoveType(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an entity's movetype.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ Movetype, see enum above.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityNetClass",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native bool GetEntityNetClass(int edict, char[] clsname, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an entity's networkable serverclass name. This is not the same as the classname and is used for networkable state changes.\n\n_@param_ `edict` — >Index of the entity.\n\n_@param_ `clsname` — >Buffer to store the serverclass name.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@return_ True on success, false if the edict is not networkable.\n\n_@error_ Invalid edict index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityRenderColor",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void GetEntityRenderColor(int entity, int &r, int &g, int &b, int &a)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an entity's color.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `r` — >Amount of red (0-255)\n\n_@param_ `g` — >Amount of green (0-255)\n\n_@param_ `b` — >Amount of blue (0-255)\n\n_@param_ `a` — >Amount of alpha (0-255)\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityRenderFx",
    "labelDetails": {
      "detail": "RenderFx",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock RenderFx GetEntityRenderFx(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an entity's render Fx.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ RenderFx value.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEntityRenderMode",
    "labelDetails": {
      "detail": "RenderMode",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock RenderMode GetEntityRenderMode(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an entity's render mode.\n\n_@param_ `entity` — >Entity index.\n\n_@return_ RenderMode value.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEventBool",
    "labelDetails": {
      "detail": "bool",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native bool GetEventBool(Handle event, const char[] key, bool defValue=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the boolean value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `defValue` — >Optional default value to use if the key is not found.\n\n_@return_ The boolean value of the specified event key.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEventFloat",
    "labelDetails": {
      "detail": "float",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native float GetEventFloat(Handle event, const char[] key, float defValue=0.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the floating point value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `defValue` — >Optional default value to use if the key is not found.\n\n_@return_ The floating point value of the specified event key.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEventInt",
    "labelDetails": {
      "detail": "int",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native int GetEventInt(Handle event, const char[] key, int defValue=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the integer value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `defValue` — >Optional default value to use if the key is not found.\n\n_@return_ The integer value of the specified event key.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEventName",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void GetEventName(Handle event, char[] name, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the name of a game event.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `name` — >Buffer to store the name of the event.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@error_ Invalid or corrupt Handle.     \r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetEventString",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void GetEventString(Handle event, const char[] key, char[] value, int maxlength, const char[] defvalue=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the string value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `value` — >Buffer to store the value of the specified event key.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@param_ `defValue` — >Optional default value to use if the key is not found.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetExtensionFileStatus",
    "labelDetails": {
      "detail": "int",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native int GetExtensionFileStatus(const char[] name, char[] error=\"\", int maxlength=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the status of an extension, by filename.\n\n_@param_ `name` — >Extension name (like \"sdktools.ext\").\n\n_@param_ `error` — >Optional error message buffer.\n\n_@param_ `maxlength` — >Length of optional error message buffer.\n\n_@return_ -2 if the extension was not found.                      -1 if the extension was found but failed to load.                      0 if the extension loaded but reported an error.                      1 if the extension is running without error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetFeatureStatus",
    "labelDetails": {
      "detail": "FeatureStatus",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native FeatureStatus GetFeatureStatus(FeatureType type, const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a feature exists, and if so, whether it is usable.\n\n_@param_ `type` — >Feature type.\n\n_@param_ `name` — >Feature name.\n\n_@return_ Feature status.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetFileTime",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native int GetFileTime(const char[] file, FileTimeMode tmode)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a file timestamp as a unix timestamp.\n\n_@param_ `file` — >File name.\n\n_@param_ `tmode` — >Time mode.\n\n_@return_ Time value, or -1 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetForwardFunctionCount",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int GetForwardFunctionCount(Handle fwd)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of functions in a global or private forward's call list.\n\n_@param_ `fwd` — >Handle to global or private forward.\n\n_@return_ Number of functions in forward.\n\n_@error_ Invalid or corrupt forward handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetFunctionByName",
    "labelDetails": {
      "detail": "Function",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native Function GetFunctionByName(Handle plugin, const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a function id from a function name.\n\n_@param_ `plugin` — >Handle of the plugin that contains the function.                      Pass INVALID_HANDLE to search in the calling plugin.\n\n_@param_ `name` — >Name of the function.\n\n_@return_ Function id or INVALID_FUNCTION if not found.\n\n_@error_ Invalid or corrupt plugin handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetGameDescription",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetGameDescription(char[] buffer, int maxlength, bool original=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the game description from the mod.\n\n_@param_ `buffer` — >Buffer to store the description.\n\n_@param_ `maxlength` — >Maximum size of the buffer.\n\n_@param_ `original` — >If true, retrieves the original game description,                      ignoring any potential hooks from plugins.\n\n_@return_ Number of bytes written to the buffer (UTF-8 safe).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetGameFolderName",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetGameFolderName(char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the name of the game's directory.\n\n_@param_ `buffer` — >Buffer to store the directory name.\n\n_@param_ `maxlength` — >Maximum size of the buffer.\n\n_@return_ Number of bytes written to the buffer (UTF-8 safe).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetGameFrameTime",
    "labelDetails": {
      "detail": "float",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native float GetGameFrameTime()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the time the Game took processing the last frame.\n\n_@return_ Game frame time.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetGameTickCount",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetGameTickCount()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the game's internal tick count.\n\n_@return_ Game tick count.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetGameTime",
    "labelDetails": {
      "detail": "float",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native float GetGameTime()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the game time based on the game tick.\n\n_@return_ Game tick time.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetLanguageByCode",
    "labelDetails": {
      "detail": "int",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native int GetLanguageByCode(const char[] code)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the language number from a language code.\n\n_@param_ `code` — >Language code (2-3 characters usually).\n\n_@return_ Language number. -1 if not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetLanguageByName",
    "labelDetails": {
      "detail": "int",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native int GetLanguageByName(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the language number from a language name.\n\n_@param_ `name` — >Language name (case insensitive).\n\n_@return_ Language number. -1 if not found.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetLanguageCount",
    "labelDetails": {
      "detail": "int",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native int GetLanguageCount()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of languages known in languages.cfg.\n\n_@return_ Language count.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetLanguageInfo",
    "labelDetails": {
      "detail": "void",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native void GetLanguageInfo(int language, char[] code=\"\", int codeLen=0, char[] name=\"\", int nameLen=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves info about a given language number.\n\n_@param_ `language` — >Language number.\n\n_@param_ `code` — >Language code buffer (2-3 characters usually).\n\n_@param_ `codeLen` — >Maximum length of the language code buffer.\n\n_@param_ `name` — >Language name buffer.\n\n_@param_ `nameLen` — >Maximum length of the language name buffer.\n\n_@error_ Invalid language number.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMapDisplayName",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool GetMapDisplayName(const char[] map, char[] displayName, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Get the display name of a workshop map.\r\n \n Note: You do not need to call FindMap first.  This native will call FindMap internally.\n\n_@param_ `map` — >Map name (usually same as map path relative to maps/ dir,                      excluding .bsp extension).\n\n_@param_ `displayName` — >Map's display name, i.e. cp_mymapname or de_mymapname.                      If FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound,                      the map cannot be resolved and this native will return false,                      but displayName will be a copy of map.\n\n_@param_ `maxlen` — >Maximum length to write to displayName var.\n\n_@return_ true if FindMap returns FindMap_Found, FindMap_FuzzyMatch, or                      FindMap_NonCanonical.                      false if FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMapHistory",
    "labelDetails": {
      "detail": "void",
      "description": "nextmap.inc"
    },
    "kind": 3,
    "detail": "native void GetMapHistory(int item, char[] map, int mapLen, char[] reason, int reasonLen, int &startTime)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a map from the map history list.\n\n_@param_ `item` — >Item number. Must be 0 or greater and less than `GetMapHistorySize()`.\n\n_@param_ `map` — >Buffer to store the map name.\n\n_@param_ `mapLen` — >Length of map buffer.\n\n_@param_ `reason` — >Buffer to store the change reason.\n\n_@param_ `reasonLen` — >Length of the reason buffer.\n\n_@param_ `startTime` — >Time the map started.\n\n_@error_ Invalid item number.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMapHistorySize",
    "labelDetails": {
      "detail": "int",
      "description": "nextmap.inc"
    },
    "kind": 3,
    "detail": "native int GetMapHistorySize()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the current number of maps in the map history\n\n_@return_ Number of maps.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMapTimeLeft",
    "labelDetails": {
      "detail": "bool",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native bool GetMapTimeLeft(int &timeleft)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns an estimate of the time left before the map ends.  If the server has not processed any frames yet (i.e. no players have joined the map yet), then the time left returned will always be infinite.\n\n_@param_ `timeleft` — >Variable to store the time, in seconds.  If the                      value is less than 0, the time limit is infinite.\n\n_@return_ True if the operation is supported, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMapTimeLimit",
    "labelDetails": {
      "detail": "bool",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native bool GetMapTimeLimit(int &time)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the current map time limit.  If the server has not processed any frames yet (i.e. no players have joined the map yet), then the time limit returned will always be 0.\n\n_@param_ `time` — >Set to the number of total seconds in the map time                      limit, or 0 if there is no time limit set.\n\n_@return_ True on success, false if operation is not supported.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMaxClients",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetMaxClients()",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is deprecated. Use the MaxClients variable instead.\r\n \n Returns the maximum number of clients allowed on the server.  This may  return 0 if called before `OnMapStart()`, and thus should not be called  in `OnPluginStart()`.  \r\n \n You should not globally cache the value to `GetMaxClients()` because it can change from  SourceTV or TF2's arena mode.  Use the \"MaxClients\" dynamic variable documented at the  top of this file.\n\n_@return_ Maximum number of clients allowed.\n\n_@deprecated_ Use MaxClients variable instead.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "GetMaxEntities",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int GetMaxEntities()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the maximum number of networked entities.\r\n \n Note: For legacy reasons, this only returns the maximum networked entities (maximum edicts), rather than total maximum entities.\n\n_@return_ Maximum number of networked entities.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMaxHumanPlayers",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetMaxHumanPlayers()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the maximum number of human players allowed on the server.  This is  a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients.\r\n \n You should not globally cache the value to `GetMaxHumanPlayers()` because it can change across game modes. You may still cache it locally.\n\n_@return_ Maximum number of humans allowed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMaxPageItems",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuExitBackButton",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuExitButton",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuItem",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuItemCount",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuOptionFlags",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuPagination",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuSelectionPosition",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuStyle",
    "labelDetails": {
      "detail": "Handle",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuStyleHandle",
    "labelDetails": {
      "detail": "Handle",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuTitle",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMenuVoteInfo",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetMyHandle",
    "labelDetails": {
      "detail": "Handle",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native Handle GetMyHandle()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the calling plugin's Handle.\n\n_@return_ Handle of the calling plugin.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNativeArray",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int GetNativeArray(int param, any[] local, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an array from a native parameter (always by reference).\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@param_ `local` — >Local array to copy into.\n\n_@param_ `size` — >Maximum size of local array.\n\n_@return_ SP_ERROR_NONE on success, anything else on failure.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNativeCell",
    "labelDetails": {
      "detail": "any",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native any GetNativeCell(int param)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a cell from a native parameter.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@return_ Cell value at the parameter number.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNativeCellRef",
    "labelDetails": {
      "detail": "any",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native any GetNativeCellRef(int param)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a cell from a native parameter, by reference.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@return_ Cell value at the parameter number.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNativeFunction",
    "labelDetails": {
      "detail": "Function",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native Function GetNativeFunction(int param)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets a function pointer from a native parameter.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@return_ Function pointer at the given parameter number.\n\n_@error_ Invalid parameter number, or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNativeString",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int GetNativeString(int param, char[] buffer, int maxlength, int &bytes=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a string from a native parameter.\n\n_@note_ Output conditions are undefined on failure.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@param_ `buffer` — >Buffer to store the string in.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@param_ `bytes` — >Optionally store the number of bytes written.\n\n_@return_ SP_ERROR_NONE on success, any other integer on failure.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNativeStringLength",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int GetNativeStringLength(int param, int &length)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays.\n\n_@note_ If this function succeeds, Get/SetNativeString will also succeed.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@param_ `length` — >Stores the length of the string.\n\n_@return_ SP_ERROR_NONE on success, any other integer on failure.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetNextMap",
    "labelDetails": {
      "detail": "bool",
      "description": "nextmap.inc"
    },
    "kind": 3,
    "detail": "native bool GetNextMap(char[] map, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns SourceMod's internal nextmap.\n\n_@param_ `map` — >Buffer to store the nextmap name.\n\n_@param_ `maxlen` — >Maximum length of the map buffer.\n\n_@return_ True if a Map was found and copied, false if no nextmap is set (map will be unchanged).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPackPosition",
    "labelDetails": {
      "detail": "DataPackPos",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native DataPackPos GetPackPosition(Handle pack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the read or write position in a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@return_ Position in the data pack, only usable with calls to SetPackPosition.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPanelCurrentKey",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPanelStyle",
    "labelDetails": {
      "detail": "Handle",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPanelTextRemaining",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPluginFilename",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void GetPluginFilename(Handle plugin, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a plugin's file name relative to the plugins folder.\n\n_@param_ `plugin` — >Plugin Handle (INVALID_HANDLE uses the calling plugin).\n\n_@param_ `buffer` — >Buffer to the store the file name.\n\n_@param_ `maxlength` — >Maximum length of the name buffer.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPluginInfo",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native bool GetPluginInfo(Handle plugin, PluginInfo info, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a plugin's public info.\n\n_@param_ `plugin` — >Plugin Handle (INVALID_HANDLE uses the calling plugin).\n\n_@param_ `info` — >Plugin info property to retrieve.\n\n_@param_ `buffer` — >Buffer to store info in.\n\n_@param_ `maxlength` — >Maximum length of buffer.\n\n_@return_ True on success, false if property is not available.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPluginIterator",
    "labelDetails": {
      "detail": "Handle",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native Handle GetPluginIterator()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns an iterator that can be used to search through plugins.\n\n_@return_ Handle to iterate with.  Must be closed via                      `CloseHandle()`.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetPluginStatus",
    "labelDetails": {
      "detail": "PluginStatus",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native PluginStatus GetPluginStatus(Handle plugin)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a plugin's status.\n\n_@param_ `plugin` — >Plugin Handle (INVALID_HANDLE uses the calling plugin).\n\n_@return_ Status code for the plugin.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetRandomFloat",
    "labelDetails": {
      "detail": "float",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native float GetRandomFloat(float fMin=0.0, float fMax=1.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a random floating point number from the Half-Life 2 Random Stream.\n\n_@param_ `fMin` — >Minimum random bound.\n\n_@param_ `fMax` — >Maximum random bound.\n\n_@return_ A random number between (inclusive) fMin and fMax.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetRandomInt",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetRandomInt(int nmin, int nmax)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a random number from the Half-Life 2 Random Stream.\n\n_@param_ `nmin` — >Minimum random bound.\n\n_@param_ `nmax` — >Maximum random bound.\n\n_@return_ A random number between (inclusive) nmin and nmax.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetServerAuthId",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void GetServerAuthId(AuthIdType authType, char[] auth, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the server's authentication string (SteamID).\r\n \n Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.)\n\n_@param_ `authType` — >Auth id type and format to use.                      (Only AuthId_Steam3 and AuthId_SteamID64 are supported)\n\n_@param_ `auth` — >Buffer to store the server's auth id.\n\n_@param_ `maxlen` — >Maximum length of string buffer (includes NULL terminator).\n\n_@error_ Invalid AuthIdType given.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetServerLanguage",
    "labelDetails": {
      "detail": "int",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native int GetServerLanguage()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the server's language.\n\n_@return_ Language number server is using.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetServerSteamAccountId",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GetServerSteamAccountId()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the server's Steam account ID.\n\n_@return_ Steam account ID or 0 if not available.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetStackBlockSize",
    "labelDetails": {
      "detail": "int",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native int GetStackBlockSize(Handle stack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the blocksize the stack was created with.\n\n_@param_ `stack` — >Stack Handle.\n\n_@return_ The blocksize of the stack.\n\n_@error_ Invalid Handle\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetSteamAccountID",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetSteamAccountID(int client, bool validate=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples.\n\n_@param_ `client` — >Client Index.\n\n_@param_ `validate` — >Check backend validation status.                      DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES,                      You WILL KNOW if you need to use this, MOST WILL NOT.\n\n_@return_ Steam account ID or 0 if not available.\n\n_@error_ If the client is not connected or the index is invalid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetSysTickCount",
    "labelDetails": {
      "detail": "int",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native int GetSysTickCount()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the operating system's \"tick count,\" which is a number of milliseconds since the operating system loaded.  This can be used for basic benchmarks.\n\n_@return_ Tick count in milliseconds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTickInterval",
    "labelDetails": {
      "detail": "float",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native float GetTickInterval()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of seconds in between game server ticks.\r\n \n Note: A tick, in this context, is a frame.\n\n_@return_ Number of seconds in between ticks.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTickedTime",
    "labelDetails": {
      "detail": "float",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native float GetTickedTime()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the simulated game time.\r\n \n This time is internally maintained by SourceMod and is based on the game tick count and tick rate.  Unlike `GetGameTime()`, it will increment past map changes and while no players are connected.  Unlike `GetEngineTime()`, it will not increment based on the system clock (i.e. it is still bound to the ticking process).\n\n_@return_ Time based on the game tick count.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTime",
    "labelDetails": {
      "detail": "int",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native int GetTime(int bigStamp[2]={0,0})",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the system time as a unix timestamp.\n\n_@param_ `bigStamp` — >Optional array to store the 64bit timestamp in.\n\n_@return_ 32bit timestamp (number of seconds since unix epoch).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTrieArray",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool GetTrieArray(Handle map, const char[] key, any[] array, int max_size, int &size=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an array in a Map.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@param_ `array` — >Buffer to store array.\n\n_@param_ `max_size` — >Maximum size of array buffer.\n\n_@param_ `size` — >Optional parameter to store the number of elements written to the buffer.\n\n_@return_ True on success.  False if the key is not set, or the key is set                       as a value or string (not an array).\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTrieSize",
    "labelDetails": {
      "detail": "int",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native int GetTrieSize(Handle map)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the number of elements in a map.\n\n_@param_ `map` — >Map Handle.\n\n_@return_ Number of elements in the trie.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTrieSnapshotKey",
    "labelDetails": {
      "detail": "int",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native int GetTrieSnapshotKey(Handle snapshot, int index, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the key string of a given key in a map snapshot.\n\n_@param_ `snapshot` — >Map snapshot.\n\n_@param_ `index` — >Key index (starting from 0).\n\n_@param_ `buffer` — >String buffer.\n\n_@param_ `maxlength` — >Maximum buffer length.\n\n_@return_ Number of bytes written to the buffer.\n\n_@error_ Invalid Handle or index out of range.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTrieString",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool GetTrieString(Handle map, const char[] key, char[] value, int max_size, int &size=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a string in a Map.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@param_ `value` — >Buffer to store value.\n\n_@param_ `max_size` — >Maximum size of string buffer.\n\n_@param_ `size` — >Optional parameter to store the number of bytes written to the buffer.\n\n_@return_ True on success.  False if the key is not set, or the key is set                       as a value or array (not a string).\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetTrieValue",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool GetTrieValue(Handle map, const char[] key, any &value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a value in a Map.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@param_ `value` — >Variable to store value.\n\n_@return_ True on success.  False if the key is not set, or the key is set                       as an array or string (not a value).\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetURandomFloat",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float GetURandomFloat()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a uniform random float in the range [0, 1).\r\n \n Note: Uniform random number streams are seeded automatically per-plugin.\n\n_@return_ Uniform random floating-point number.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetURandomInt",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native int GetURandomInt()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a random integer in the range [0, 2^31-1].\r\n \n Note: Uniform random number streams are seeded automatically per-plugin.\n\n_@return_ Random integer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetUserAdmin",
    "labelDetails": {
      "detail": "AdminId",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native AdminId GetUserAdmin(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a client's AdminId.\n\n_@param_ `client` — >Player's index.\n\n_@return_ AdminId of the client, or INVALID_ADMIN_ID if none.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetUserFlagBits",
    "labelDetails": {
      "detail": "int",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native int GetUserFlagBits(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns client access flags.  If the client is not an admin, the result is always 0.\n\n_@param_ `client` — >Player's index.\n\n_@return_ Flags\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetUserMessageId",
    "labelDetails": {
      "detail": "UserMsg",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native UserMsg GetUserMessageId(const char[] msg)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the ID of a given message, or -1 on failure.\n\n_@param_ `msg` — >String containing message name (case sensitive).\n\n_@return_ A message index, or INVALID_MESSAGE_ID on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetUserMessageName",
    "labelDetails": {
      "detail": "bool",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native bool GetUserMessageName(UserMsg msg_id, char[] msg, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the name of a message by ID.\n\n_@param_ `msg_id` — >Message index.\n\n_@param_ `msg` — >Buffer to store the name of the message.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@return_ True if message index is valid, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetUserMessageType",
    "labelDetails": {
      "detail": "UserMessageType",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native UserMessageType GetUserMessageType()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns usermessage serialization type used for the current engine\n\n_@return_ The supported usermessage type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetVectorAngles",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native void GetVectorAngles(const float vec[3], float angle[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns angles from a vector.\n\n_@param_ `vec` — >Vector.\n\n_@param_ `angle` — >Angle buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetVectorCrossProduct",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native void GetVectorCrossProduct(const float vec1[3], const float vec2[3], float result[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Computes the cross product of two vectors.  Any input array can be the same as the output array.\n\n_@param_ `vec1` — >First vector.\n\n_@param_ `vec2` — >Second vector.\n\n_@param_ `result` — >Resultant vector.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetVectorDistance",
    "labelDetails": {
      "detail": "float",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native float GetVectorDistance(const float vec1[3], const float vec2[3], bool squared=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Calculates the distance between two vectors.\n\n_@param_ `vec1` — >First vector.\n\n_@param_ `vec2` — >Second vector.\n\n_@param_ `squared` — >If true, the result will be squared (for optimization).\n\n_@return_ Vector distance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetVectorDotProduct",
    "labelDetails": {
      "detail": "float",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native float GetVectorDotProduct(const float vec1[3], const float vec2[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Calculates the dot product of two vectors.\n\n_@param_ `vec1` — >First vector.\n\n_@param_ `vec2` — >Second vector.\n\n_@return_ Dot product of the two vectors.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetVectorLength",
    "labelDetails": {
      "detail": "float",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native float GetVectorLength(const float vec[3], bool squared=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Calculates a vector's length.\n\n_@param_ `vec` — >Vector.\n\n_@param_ `squared` — >If true, the result will be squared (for optimization).\n\n_@return_ Vector length (magnitude).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GetVectorVectors",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native void GetVectorVectors(const float vec[3], float right[3], float up[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns direction vectors from a vector.\n\n_@param_ `vec` — >Vector.\n\n_@param_ `right` — >Right vector buffer or NULL_VECTOR.\n\n_@param_ `up` — >Up vector buffer or NULL_VECTOR.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "GlobalForward",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 7,
    "detail": "methodmap GlobalForward"
  },
  {
    "label": "GroupId",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum GroupId",
    "documentation": {
      "kind": "markdown",
      "value": "\n Identifies a unique entry in the group permissions cache.  These are not Handles.\r\n "
    }
  },
  {
    "label": "GroupId",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 7,
    "detail": "enum GroupId",
    "documentation": {
      "kind": "markdown",
      "value": "\n Identifies a unique entry in the group permissions cache.  These are not Handles.\r\n "
    }
  },
  {
    "label": "GuessSDKVersion",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int GuessSDKVersion()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Guesses the SDK version a mod was compiled against.  If nothing specific is known about the game, the engine version is used instead.\r\n \n The return values are guaranteed to increase chronologically (that is, a later release will have a higher value).\n\n_@return_ SOURCE_SDK version code.\n\n_@deprecated_ See `GetEngineVersion()`\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "Handle",
    "labelDetails": {
      "description": "handles.inc"
    },
    "kind": 13,
    "detail": "enum Handle",
    "documentation": {
      "kind": "markdown",
      "value": "\n Preset Handle values.\r\n "
    }
  },
  {
    "label": "HasEntProp",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "stock bool HasEntProp(int entity, PropType type, const char[] prop)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Checks if an entity property exists on an entity.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@return_ Whether the property exists on the entity.\n\n_@error_ Invalid entity.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "HookConVarChange",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void HookConVarChange(Handle convar, ConVarChanged callback)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a hook for when a console variable's value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `callback` — >An OnConVarChanged function pointer.\n\n_@error_ Invalid or corrupt Handle or invalid callback function.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "HookEvent",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void HookEvent(const char[] name, EventHook callback, EventHookMode mode=EventHookMode_Post)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a hook for when a game event is fired.\n\n_@param_ `name` — >Name of event.\n\n_@param_ `callback` — >An EventHook function pointer.\n\n_@param_ `mode` — >Optional EventHookMode determining the type of hook.\n\n_@error_ Invalid event name or invalid callback function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "HookEventEx",
    "labelDetails": {
      "detail": "bool",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native bool HookEventEx(const char[] name, EventHook callback, EventHookMode mode=EventHookMode_Post)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a hook for when a game event is fired.\n\n_@param_ `name` — >Name of event.\n\n_@param_ `callback` — >An EventHook function pointer.\n\n_@param_ `mode` — >Optional EventHookMode determining the type of hook.\n\n_@return_ True if event exists and was hooked successfully, false otherwise.\n\n_@error_ Invalid callback function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "HookUserMessage",
    "labelDetails": {
      "detail": "void",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native void HookUserMessage(UserMsg msg_id, MsgHook hook, bool intercept=false, MsgPostHook post=INVALID_FUNCTION)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Hooks a user message.\n\n_@param_ `msg_id` — >Message index.\n\n_@param_ `hook` — >Function to use as a hook.\n\n_@param_ `intercept` — >If intercept is true, message will be fully intercepted,                      allowing the user to block the message.  Otherwise,                      the hook is normal and ignores the return value.\n\n_@param_ `post` — >Notification function.\n\n_@error_ Invalid message index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "INVALID_ADMIN_ID",
    "labelDetails": {
      "description": "AdminId::INVALID_ADMIN_ID"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "INVALID_ENT_REFERENCE",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define INVALID_ENT_REFERENCE 0xFFFFFFFF",
    "tags": []
  },
  {
    "label": "INVALID_FCVAR_FLAGS",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define INVALID_FCVAR_FLAGS (-1)",
    "tags": []
  },
  {
    "label": "INVALID_FUNCTION",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "INVALID_GROUP_ID",
    "labelDetails": {
      "description": "GroupId::INVALID_GROUP_ID"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "INVALID_HANDLE",
    "labelDetails": {
      "description": "Handle::INVALID_HANDLE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "INVALID_MESSAGE_ID",
    "labelDetails": {
      "description": "UserMsg::INVALID_MESSAGE_ID"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "IN_ALT1",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_ALT1 (1 << 14)",
    "tags": []
  },
  {
    "label": "IN_ALT2",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_ALT2 (1 << 15)",
    "tags": []
  },
  {
    "label": "IN_ATTACK",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_ATTACK (1 << 0)",
    "tags": []
  },
  {
    "label": "IN_ATTACK2",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_ATTACK2 (1 << 11)",
    "tags": []
  },
  {
    "label": "IN_ATTACK3",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_ATTACK3 (1 << 25)",
    "tags": []
  },
  {
    "label": "IN_BACK",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_BACK (1 << 4)",
    "tags": []
  },
  {
    "label": "IN_BULLRUSH",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_BULLRUSH (1 << 22)",
    "tags": []
  },
  {
    "label": "IN_CANCEL",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_CANCEL (1 << 6)",
    "tags": []
  },
  {
    "label": "IN_DUCK",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_DUCK (1 << 2)",
    "tags": []
  },
  {
    "label": "IN_FORWARD",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_FORWARD (1 << 3)",
    "tags": []
  },
  {
    "label": "IN_GRENADE1",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_GRENADE1 (1 << 23)",
    "documentation": {
      "kind": "markdown",
      "value": " grenade 1 "
    },
    "tags": []
  },
  {
    "label": "IN_GRENADE2",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_GRENADE2 (1 << 24)",
    "documentation": {
      "kind": "markdown",
      "value": " grenade 2 "
    },
    "tags": []
  },
  {
    "label": "IN_JUMP",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_JUMP (1 << 1)",
    "tags": []
  },
  {
    "label": "IN_LEFT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_LEFT (1 << 7)",
    "tags": []
  },
  {
    "label": "IN_MOVELEFT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_MOVELEFT (1 << 9)",
    "tags": []
  },
  {
    "label": "IN_MOVERIGHT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_MOVERIGHT (1 << 10)",
    "tags": []
  },
  {
    "label": "IN_RELOAD",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_RELOAD (1 << 13)",
    "tags": []
  },
  {
    "label": "IN_RIGHT",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_RIGHT (1 << 8)",
    "tags": []
  },
  {
    "label": "IN_RUN",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_RUN (1 << 12)",
    "tags": []
  },
  {
    "label": "IN_SCORE",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_SCORE (1 << 16)",
    "documentation": {
      "kind": "markdown",
      "value": " Used by client.dll for when scoreboard is held down "
    },
    "tags": []
  },
  {
    "label": "IN_SPEED",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_SPEED (1 << 17)",
    "documentation": {
      "kind": "markdown",
      "value": " Player is holding the speed key "
    },
    "tags": []
  },
  {
    "label": "IN_USE",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_USE (1 << 5)",
    "tags": []
  },
  {
    "label": "IN_WALK",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_WALK (1 << 18)",
    "documentation": {
      "kind": "markdown",
      "value": " Player holding walk key "
    },
    "tags": []
  },
  {
    "label": "IN_WEAPON1",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_WEAPON1 (1 << 20)",
    "documentation": {
      "kind": "markdown",
      "value": " weapon defines these bits "
    },
    "tags": []
  },
  {
    "label": "IN_WEAPON2",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_WEAPON2 (1 << 21)",
    "documentation": {
      "kind": "markdown",
      "value": " weapon defines these bits "
    },
    "tags": []
  },
  {
    "label": "IN_ZOOM",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define IN_ZOOM (1 << 19)",
    "documentation": {
      "kind": "markdown",
      "value": " Zoom key for HUD zoom "
    },
    "tags": []
  },
  {
    "label": "ITEMDRAW_CONTROL",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "ITEMDRAW_DEFAULT",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "ITEMDRAW_DISABLED",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "ITEMDRAW_IGNORE",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "ITEMDRAW_NOTEXT",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "ITEMDRAW_RAWLINE",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "ITEMDRAW_SPACER",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "Identity",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 13
  },
  {
    "label": "Identity_Core",
    "labelDetails": {
      "description": "Identity::Identity_Core"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Identity_Extension",
    "labelDetails": {
      "description": "Identity::Identity_Extension"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Identity_Plugin",
    "labelDetails": {
      "description": "Identity::Identity_Plugin"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ImmunityType",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum ImmunityType",
    "documentation": {
      "kind": "markdown",
      "value": "\n \n\n**DEPRECATED**, do not use.\r\n "
    }
  },
  {
    "label": "Immunity_Default",
    "labelDetails": {
      "description": "ImmunityType::Immunity_Default"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Immunity_Global",
    "labelDetails": {
      "description": "ImmunityType::Immunity_Global"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ImplodeStrings",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int ImplodeStrings(const char[][] strings, int numStrings, const char[] join, char[] buffer, int maxLength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Joins an array of strings into one string, with a \"join\" string inserted in between each given string.  This function complements ExplodeString.\n\n_@param_ `strings` — >An array of strings.\n\n_@param_ `numStrings` — >Number of strings in the array.\n\n_@param_ `join` — >The join string to insert between each string.\n\n_@param_ `buffer` — >Output buffer to write the joined string to.\n\n_@param_ `maxLength` — >Maximum length of the output buffer.\n\n_@return_ Number of bytes written to the output buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "InsertMenuItem",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "InsertServerCommand",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void InsertServerCommand(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Inserts a server command at the beginning of the server command buffer.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Int64ToString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int Int64ToString(const int num[2], char[] str, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a 64-bit integer to a string.\n\n_@param_ `num` — >Array containing the upper and lower                      32-bits of a 64-bit integer.\n\n_@param_ `str` — >Buffer to store string in.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@return_ Number of characters written to the buffer,                      not including the null terminator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IntToString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int IntToString(int num, char[] str, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts an integer to a string.\n\n_@param_ `num` — >Integer to convert.\n\n_@param_ `str` — >Buffer to store string in.\n\n_@param_ `maxlength` — >Maximum length of string buffer.\n\n_@return_ Number of characters written to the buffer,                      not including the null terminator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "InternalShowMenu",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsCharAlpha",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native bool IsCharAlpha(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a character is an ASCII alphabet character.\n\n_@note_ Multi-byte characters will always return false.\n\n_@param_ `chr` — >Character to test.\n\n_@return_ True if character is alphabetical, otherwise false.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsCharLower",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native bool IsCharLower(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether an alphabetic character is lowercase.\n\n_@note_ Multi-byte characters will always return false.\n\n_@param_ `chr` — >Character to test.\n\n_@return_ True if character is lowercase, otherwise false.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsCharMB",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int IsCharMB(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a character is multi-byte or not.\n\n_@param_ `chr` — >Character to test.\n\n_@return_ 0 for a normal 7-bit ASCII character,                      otherwise number of bytes in multi-byte character.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsCharNumeric",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native bool IsCharNumeric(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a character is numeric.\n\n_@note_ Multi-byte characters will always return false.\n\n_@param_ `chr` — >Character to test.\n\n_@return_ True if character is numeric, otherwise false.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsCharSpace",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native bool IsCharSpace(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a character is whitespace.\n\n_@note_ Multi-byte characters will always return false.\n\n_@param_ `chr` — >Character to test.\n\n_@return_ True if character is whitespace, otherwise false.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsCharUpper",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native bool IsCharUpper(int chr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether an alphabetic character is uppercase.\n\n_@note_ Multi-byte characters will always return false.\n\n_@param_ `chr` — >Character to test.\n\n_@return_ True if character is uppercase, otherwise false.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsChatTrigger",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool IsChatTrigger()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether the current say hook is a chat trigger.\r\n \n This function is only meaningful inside say or say_team hooks.\n\n_@return_ True if a chat trigger, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientAuthorized",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientAuthorized(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player has been authenticated.\n\n_@param_ `client` — >Player index.\n\n_@return_ True if player has been authenticated, false otherwise.\n\n_@error_ Invalid client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientConnected",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientConnected(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player is connected.\n\n_@param_ `client` — >Player index.\n\n_@return_ True if player is connected to the server, false otherwise.\n\n_@error_ Invalid client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientInGame",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientInGame(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player has entered the game.\n\n_@param_ `client` — >Player index (index does not have to be connected).\n\n_@return_ True if player has entered the game, false otherwise.\n\n_@error_ Invalid client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientInKickQueue",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientInKickQueue(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a client is in the \"kick queue\" (i.e. the client will be kicked  shortly and thus they should not appear as valid).\n\n_@param_ `client` — >Player index (must be connected).\n\n_@return_ True if in the kick queue, false otherwise.\n\n_@error_ Invalid client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientInVotePool",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientObserver",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientObserver(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player is an observer/spectator.\n\n_@param_ `client` — >Player index.\n\n_@return_ True if player is an observer, false otherwise.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientReplay",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientReplay(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player is the Replay bot.\n\n_@param_ `client` — >Player index.\n\n_@return_ True if player is the Replay bot, false otherwise.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientSourceTV",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientSourceTV(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player is the SourceTV bot.\n\n_@param_ `client` — >Player index.\n\n_@return_ True if player is the SourceTV bot, false otherwise.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsClientTimingOut",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsClientTimingOut(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a client is timing out\n\n_@param_ `client` — >Player's index.\n\n_@return_ True if client is timing out, false otherwise.\n\n_@error_ Invalid client index, client not connected, or fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsDecalPrecached",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool IsDecalPrecached(const char[] decal)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a given decal is precached.\n\n_@param_ `decal` — >Name of the decal to check.\n\n_@return_ True if precached, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsDedicatedServer",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool IsDedicatedServer()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether the server is dedicated.\n\n_@return_ True if dedicated, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsEndOfFile",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool IsEndOfFile(Handle file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Tests if the end of file has been reached.\n\n_@param_ `file` — >Handle to the file.\n\n_@return_ True if end of file has been reached, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsEntNetworkable",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native bool IsEntNetworkable(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not an entity has a valid networkable edict.\n\n_@param_ `entity` — >Index of the entity.\n\n_@return_ True if networkable, false if invalid or not networkable.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsFakeClient",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsFakeClient(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a certain player is a fake client.\n\n_@param_ `client` — >Player index.\n\n_@return_ True if player is a fake client, false otherwise.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsGenericPrecached",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool IsGenericPrecached(const char[] generic)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a given generic file is precached.\n\n_@param_ `generic` — >Name of the generic file to check.\n\n_@return_ True if precached, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsMapValid",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool IsMapValid(const char[] map)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a map is valid or not.\n\n_@param_ `map` — >Map name, excluding .bsp extension.\n\n_@return_ True if valid, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsModelPrecached",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool IsModelPrecached(const char[] model)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a given model is precached.\n\n_@param_ `model` — >Name of the model to check.\n\n_@return_ True if precached, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsNativeParamNullString",
    "labelDetails": {
      "detail": "bool",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native bool IsNativeParamNullString(int param)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Check if the native parameter is the NULL_STRING.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@return_ True if NULL_STRING, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsNativeParamNullVector",
    "labelDetails": {
      "detail": "bool",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native bool IsNativeParamNullVector(int param)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Check if the native parameter is the NULL_VECTOR.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@return_ True if NULL_VECTOR, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsNewVoteAllowed",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsNullString",
    "labelDetails": {
      "detail": "bool",
      "description": "core.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsNullVector",
    "labelDetails": {
      "detail": "bool",
      "description": "core.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsPackReadable",
    "labelDetails": {
      "detail": "bool",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native bool IsPackReadable(Handle pack, int bytes)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not a specified number of bytes from the data pack position to the end can be read.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `bytes` — >Number of bytes to simulate reading.\n\n_@return_ True if can be read, false otherwise.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsPlayerAlive",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool IsPlayerAlive(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if the client is alive or dead.\r\n \n Note: This function was originally in SDKTools and was moved to core.\n\n_@param_ `client` — >Player's index.\n\n_@return_ True if the client is alive, false otherwise.\n\n_@error_ Invalid client index, client not in game, or no mod support.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsPlayerInGame",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "stock bool IsPlayerInGame(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Backwards compatibility stock - use IsClientInGame\n\n_@deprecated_ Renamed to IsClientInGame\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "IsPluginDebugging",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native bool IsPluginDebugging(Handle plugin)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves whether or not a plugin is being debugged.\n\n_@param_ `plugin` — >Plugin Handle (INVALID_HANDLE uses the calling plugin).\n\n_@return_ True if being debugged, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsServerProcessing",
    "labelDetails": {
      "detail": "bool",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native bool IsServerProcessing()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not the server is processing frames or not.\r\n \n The server does not process frames until at least one client joins the game. If server hibernation is disabled, once the first player has joined, even if that player leaves, the server's timers and entities will continue to work.\n\n_@return_ True if the server is ticking, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsSoundPrecached",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool IsSoundPrecached(const char[] sound)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a given sound is precached.\n\n_@param_ `sound` — >Name of the sound to check.\n\n_@return_ True if precached, false otherwise.\n\n_@deprecated_ Doesn't work correctly, always returns true.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "IsStackEmpty",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native bool IsStackEmpty(Handle stack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Checks if a stack is empty.\n\n_@param_ `stack` — >Stack Handle.\n\n_@return_ True if empty, false if not empty.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsTranslatedForLanguage",
    "labelDetails": {
      "detail": "bool",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native bool IsTranslatedForLanguage(const char[] phrase, int language)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Determines if there is a translation for the specified language.\n\n_@param_ `phrase` — >Phrase to check.\n\n_@param_ `language` — >Language number.\n\n_@return_ True if translation exists.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsValidConVarChar",
    "labelDetails": {
      "detail": "bool",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "stock bool IsValidConVarChar(int c)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns true if the supplied character is valid in a ConVar name.\n\n_@param_ `c` — >Character to validate.\n\n_@return_ True is valid for ConVars, false otherwise\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsValidEdict",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native bool IsValidEdict(int edict)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not an edict index is valid.\n\n_@param_ `edict` — >Index of the edict.\n\n_@return_ True if valid, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsValidEntity",
    "labelDetails": {
      "detail": "bool",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native bool IsValidEntity(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not an entity is valid.  Returns false if there is no matching CBaseEntity for this entity index.\n\n_@param_ `entity` — >Index of the entity.\n\n_@return_ True if valid, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "IsValidHandle",
    "labelDetails": {
      "detail": "bool",
      "description": "handles.inc"
    },
    "kind": 3,
    "detail": "native bool IsValidHandle(Handle hndl)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Do not use this function.  Returns if a Handle and its contents are readable, whereas INVALID_HANDLE only checks for the absence of a Handle.\r\n \n This function is intended only for tests where the validity of a Handle can absolutely not be known.\r\n \n Do not use this to check the return values of functions, or to check if timers should be closed (except in very rare cases). This function is for very specific usage and using it for general purpose routines can and will hide very subtle bugs.\n\n_@param_ `hndl` — >Handle to test for validity.\n\n_@return_ True if handle is valid, false otherwise.\n\n_@deprecated_ Do not use this function.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "IsVoteInProgress",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KeyValues",
    "labelDetails": {
      "description": "keyvalues.inc"
    },
    "kind": 7,
    "detail": "methodmap KeyValues"
  },
  {
    "label": "KeyValuesToFile",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KeyValuesToFile(Handle kv, const char[] file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a KeyValues tree to a file.  The tree is dumped from the current position.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `file` — >File to dump write to.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KickClient",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void KickClient(int client, const char[] format=\"\", any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Disconnects a client from the server as soon as the next frame starts.\r\n \n Note: Originally, `KickClient()` was immediate.  The delay was introduced  because despite warnings, plugins were using it in ways that would crash.  The new safe version can break cases that rely on immediate disconnects,  but ensures that plugins do not accidentally cause crashes.\r\n \n If you need immediate disconnects, use `KickClientEx()`.\r\n \n Note: `IsClientInKickQueue()` will return true before the kick occurs.\n\n_@param_ `client` — >Client index.\n\n_@param_ `format` — >Optional formatting rules for disconnect reason.                      Note that a period is automatically appended to the string by the engine.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KickClientEx",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void KickClientEx(int client, const char[] format=\"\", any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Immediately disconnects a client from the server.\r\n \n Kicking clients from certain events or callbacks may cause crashes.  If in  doubt, create a short (0.1 second) timer to kick the client in the next  available frame.\n\n_@param_ `client` — >Client index.\n\n_@param_ `format` — >Optional formatting rules for disconnect reason.                      Note that a period is automatically appended to the string by the engine.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KillTimer",
    "labelDetails": {
      "detail": "void",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native void KillTimer(Handle timer, bool autoClose=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Kills a timer.  Use this instead of `CloseHandle()` if you need more options.\n\n_@param_ `timer` — >Timer Handle to kill.\n\n_@param_ `autoClose` — >If autoClose is true, the data that was passed to `CreateTimer()` will                      be closed as a handle if TIMER_DATA_HNDL_CLOSE was not specified.\n\n_@error_ Invalid timer handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvCopySubkeys",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvCopySubkeys(Handle origin, Handle dest)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Makes a new copy of all subkeys in the origin KeyValues to the destination KeyValues. NOTE: All KeyValues are processed from the current location not the root one.\n\n_@param_ `origin` — >Origin KeyValues Handle.\n\n_@param_ `dest` — >Destination KeyValues Handle.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvDataTypes",
    "labelDetails": {
      "description": "keyvalues.inc"
    },
    "kind": 13,
    "detail": "enum KvDataTypes",
    "documentation": {
      "kind": "markdown",
      "value": "\n KeyValue data value types\r\n "
    }
  },
  {
    "label": "KvData_Color",
    "labelDetails": {
      "description": "KvDataTypes::KvData_Color"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_Float",
    "labelDetails": {
      "description": "KvDataTypes::KvData_Float"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_Int",
    "labelDetails": {
      "description": "KvDataTypes::KvData_Int"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_NUMTYPES",
    "labelDetails": {
      "description": "KvDataTypes::KvData_NUMTYPES"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_None",
    "labelDetails": {
      "description": "KvDataTypes::KvData_None"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_Ptr",
    "labelDetails": {
      "description": "KvDataTypes::KvData_Ptr"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_String",
    "labelDetails": {
      "description": "KvDataTypes::KvData_String"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_UInt64",
    "labelDetails": {
      "description": "KvDataTypes::KvData_UInt64"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvData_WString",
    "labelDetails": {
      "description": "KvDataTypes::KvData_WString"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "KvDeleteKey",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvDeleteKey(Handle kv, const char[] key)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes the given key from the current position.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key.\n\n_@return_ True on success, false if key did not exist.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvDeleteThis",
    "labelDetails": {
      "detail": "int",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native int KvDeleteThis(Handle kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes the current sub-key and attempts to set the position to the sub-key after the removed one.  If no such sub-key exists, the position will be the parent key in the traversal stack. Given the sub-key having position \"N\" in the traversal stack, the removal will always take place from position \"N-1.\"\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@return_ 1 if removal succeeded and there was another key.                      0 if the current node was not contained in the                        previous node, or no previous node exists.                     -1 if removal succeeded and there were no more keys,                        thus the state is as if `KvGoBack()` was called.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvFindKeyById",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvFindKeyById(Handle kv, int id, char[] name, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds a KeyValues name by id.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `id` — >KeyValues id.\n\n_@param_ `name` — >Buffer to store the name.\n\n_@param_ `maxlength` — >Maximum length of the value buffer.\n\n_@return_ True on success, false if id not found.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetColor",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvGetColor(Handle kv, const char[] key, int &r, int &g, int &b, int &a)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a set of color values from a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `r` — >Red value, set by reference.\n\n_@param_ `g` — >Green value, set by reference.\n\n_@param_ `b` — >Blue value, set by reference.\n\n_@param_ `a` — >Alpha value, set by reference.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetDataType",
    "labelDetails": {
      "detail": "KvDataTypes",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native KvDataTypes KvGetDataType(Handle kv, const char[] key)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the data type at a key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Key name.\n\n_@return_ KvDataType value of the key.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetFloat",
    "labelDetails": {
      "detail": "float",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native float KvGetFloat(Handle kv, const char[] key, float defvalue=0.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a floating point value from a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `defvalue` — >Optional default value to use if the key is not found.\n\n_@return_ Floating point value of the key.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetNameSymbol",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvGetNameSymbol(Handle kv, const char[] key, int &id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Finds a KeyValues id inside a KeyValues tree.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Key name.\n\n_@param_ `id` — >Id of the found KeyValue.\n\n_@return_ True on success, false if key not found.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetNum",
    "labelDetails": {
      "detail": "int",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native int KvGetNum(Handle kv, const char[] key, int defvalue=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves an integer value from a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `defvalue` — >Optional default value to use if the key is not found.\n\n_@return_ Integer value of the key.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetSectionName",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvGetSectionName(Handle kv, char[] section, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the current section name.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `section` — >Buffer to store the section name.\n\n_@param_ `maxlength` — >Maximum length of the name buffer.\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetSectionSymbol",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvGetSectionSymbol(Handle kv, int &id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the current section id.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `id` — >Id of the current section.\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetString",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvGetString(Handle kv, const char[] key, char[] value, int maxlength, const char[] defvalue=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a string value from a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `value` — >Buffer to store key value in.\n\n_@param_ `maxlength` — >Maximum length of the value buffer.\n\n_@param_ `defvalue` — >Optional default value to use if the key is not found.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetUInt64",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvGetUInt64(Handle kv, const char[] key, int value[2], int defvalue[2]={0,0})",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a large integer value from a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `value` — >Array to represent the large integer.\n\n_@param_ `defvalue` — >Optional default value to use if the key is not found.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGetVector",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvGetVector(Handle kv, const char[] key, float vec[3], const float defvalue[3]={0.0, 0.0, 0.0})",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a vector value from a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `vec` — >Destination vector to store the value in.\n\n_@param_ `defvalue` — >Optional default value to use if the key is not found.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGoBack",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvGoBack(Handle kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Jumps back to the previous position.  Returns false if there are no previous positions (i.e., at the root node).  This should be called once for each successful Jump call, in order to return to the top node. This function pops one node off the internal traversal stack.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@return_ True on success, false if there is no higher node.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGotoFirstSubKey",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvGotoFirstSubKey(Handle kv, bool keyOnly=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the current position in the KeyValues tree to the first sub key. This native adds to the internal traversal stack.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `keyOnly` — >If false, non-keys will be traversed (values).\n\n_@return_ True on success, false if there was no first sub key.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvGotoNextKey",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvGotoNextKey(Handle kv, bool keyOnly=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the current position in the KeyValues tree to the next sub key. This native does NOT add to the internal traversal stack, and thus `KvGoBack()` is not needed for each successive call to this function.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `keyOnly` — >If false, non-keys will be traversed (values).\n\n_@return_ True on success, false if there was no next sub key.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvJumpToKey",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvJumpToKey(Handle kv, const char[] key, bool create=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the current position in the KeyValues tree to the given key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key.\n\n_@param_ `create` — >If true, and the key does not exist, it will be created.\n\n_@return_ True if the key exists, false if it does not and was not created.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvJumpToKeySymbol",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool KvJumpToKeySymbol(Handle kv, int id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the current position in the KeyValues tree to the given key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `id` — >KeyValues id.\n\n_@return_ True if the key exists, false if it does not.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvNodesInStack",
    "labelDetails": {
      "detail": "int",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native int KvNodesInStack(Handle kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the position in the jump stack; I.e. the number of calls required for KvGoBack to return to the root node.  If at the root node, 0 is returned.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@return_ Number of non-root nodes in the jump stack.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvRewind",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvRewind(Handle kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the position back to the top node, emptying the entire node traversal history.  This can be used instead of looping `KvGoBack()` if recursive iteration is not important.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSavePosition",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSavePosition(Handle kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Saves the current position in the traversal stack onto the traversal stack.  This can be useful if you wish to use `KvGotoNextKey()` and have the previous key saved for backwards traversal.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetColor",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetColor(Handle kv, const char[] key, int r, int g, int b, int a=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a set of color values of a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `r` — >Red value.\n\n_@param_ `g` — >Green value.\n\n_@param_ `b` — >Blue value.\n\n_@param_ `a` — >Alpha value.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetEscapeSequences",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetEscapeSequences(Handle kv, bool useEscapes)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets whether or not the KeyValues parser will read escape sequences. For example, \\n would be read as a literal newline.  This defaults to false for new KeyValues structures.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `useEscapes` — >Whether or not to read escape sequences.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetFloat",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetFloat(Handle kv, const char[] key, float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a floating point value of a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `value` — >Floating point value.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetNum",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetNum(Handle kv, const char[] key, int value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an integer value of a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `value` — >Value number.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetSectionName",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetSectionName(Handle kv, const char[] section)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the current section name.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `section` — >Section name.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetString",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetString(Handle kv, const char[] key, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a string value of a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `value` — >String value.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetUInt64",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetUInt64(Handle kv, const char[] key, const int value[2])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a large integer value of a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `value` — >Large integer value (0=High bits, 1=Low bits)\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "KvSetVector",
    "labelDetails": {
      "detail": "void",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native void KvSetVector(Handle kv, const char[] key, const float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a vector value of a KeyValues key.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `key` — >Name of the key, or NULL_STRING.\n\n_@param_ `vec` — >Vector value.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LANG_SERVER",
    "labelDetails": {
      "description": "lang.inc"
    },
    "kind": 21,
    "detail": "#define LANG_SERVER 0",
    "documentation": {
      "kind": "markdown",
      "value": " Translate using the server's language "
    },
    "tags": []
  },
  {
    "label": "LibraryExists",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native bool LibraryExists(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a library exists.  This function should be considered expensive; it should only be called on plugin to determine availability of resources.  Use `OnLibraryAdded()`/`OnLibraryRemoved()` to detect changes in libraries.\n\n_@param_ `name` — >Library name of a plugin or extension.\n\n_@return_ True if exists, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LoadFromAddress",
    "labelDetails": {
      "detail": "any",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native any LoadFromAddress(Address addr, NumberType size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Load up to 4 bytes from a memory address.\n\n_@param_ `addr` — >Address to a memory location.\n\n_@param_ `size` — >How many bytes should be read.                      If loading a floating-point value, use NumberType_Int32.\n\n_@return_ The value that is stored at that address.\n\n_@error_ Address is null or pointing to reserved memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LoadGameConfigFile",
    "labelDetails": {
      "detail": "GameData",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native GameData LoadGameConfigFile(const char[] file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Loads a game config file.\n\n_@param_ `file` — >File to load.  The path must be relative to the 'gamedata' folder under the config folder                      and the extension should be omitted.\n\n_@return_ A handle to the game config file or INVALID_HANDLE on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LoadMaps",
    "labelDetails": {
      "detail": "int",
      "description": "helpers.inc"
    },
    "kind": 3,
    "detail": "stock int LoadMaps(Handle array, int &fileTime = 0, Handle fileCvar = INVALID_HANDLE)",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is no longer supported.  It has been replaced with `ReadMapList()`,  which uses a more unified caching and configuration mechanism.  This function also  has a bug where if the cvar contents changes, the fileTime change won't be recognized.\r\n \n Loads a specified array with maps. The maps will be either loaded from mapcyclefile, or if supplied a cvar containing a file name. If the file in the cvar is bad, it will use mapcyclefile. The fileTime parameter is used to store a timestamp of the file. If specified, the file will only be reloaded if it has changed.\n\n_@param_ `array` — >Valid array handle, should be created with `CreateArray(33)` or larger.\n\n_@param_ `fileTime` — >Variable containing the \"last changed\" time of the file. Used to avoid needless reloading.\n\n_@param_ `fileCvar` — >CVAR set to the file to be loaded. Optional.\n\n_@return_ Number of maps loaded or 0 if in error.\n\n_@deprecated_ Use `ReadMapList()` instead.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "LoadTranslations",
    "labelDetails": {
      "detail": "void",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native void LoadTranslations(const char[] file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Loads a translation file for the plugin calling this native. If no extension is specified, .txt is assumed.\n\n_@param_ `file` — >Translation file.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogAction",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void LogAction(int client, int target, const char[] message, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Logs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of `ShowActivity()`.\n\n_@param_ `client` — >Client performing the action, 0 for server, or -1 if not                      applicable.\n\n_@param_ `target` — >Client being targetted, or -1 if not applicable.\n\n_@param_ `message` — >Message format.\n\n_@param_ `...` — >Message formatting parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogError",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void LogError(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Logs a plugin error message to the SourceMod logs.\n\n_@param_ `format` — >String format.\n\n_@param_ `...` — >Format arguments.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogMessage",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void LogMessage(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Logs a plugin message to the SourceMod logs.  The log message will be prefixed by the plugin's logtag (filename).\n\n_@param_ `format` — >String format.\n\n_@param_ `...` — >Format arguments.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogStackTrace",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void LogStackTrace(const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Logs a stack trace from the current function call. Code execution continues after the call\n\n_@param_ `fmt` — >Format string to send with the stack trace.\n\n_@param_ `...` — >Format arguments.\n\n_@error_ Always logs a stack trace.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogToFile",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void LogToFile(const char[] file, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Logs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended.\n\n_@param_ `file` — >File to write the log message in.\n\n_@param_ `format` — >String format.\n\n_@param_ `...` — >Format arguments.\n\n_@error_ File could not be opened/written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogToFileEx",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void LogToFileEx(const char[] file, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Same as `LogToFile()`, except no plugin logtag is prepended.\n\n_@param_ `file` — >File to write the log message in.\n\n_@param_ `format` — >String format.\n\n_@param_ `...` — >Format arguments.\n\n_@error_ File could not be opened/written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogToGame",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void LogToGame(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Logs a generic message to the HL2 logs.\n\n_@param_ `format` — >String format.\n\n_@param_ `...` — >Format arguments.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogToOpenFile",
    "labelDetails": {
      "detail": "void",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native void LogToOpenFile(Handle hndl, const char[] message, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Same as `LogToFile()`, except uses an open file Handle.  The file must be opened in text appending mode.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `message` — >Message format.\n\n_@param_ `...` — >Message format parameters.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "LogToOpenFileEx",
    "labelDetails": {
      "detail": "void",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native void LogToOpenFileEx(Handle hndl, const char[] message, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Same as `LogToFileEx()`, except uses an open file Handle.  The file must be opened in text appending mode.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `message` — >Message format.\n\n_@param_ `...` — >Message format parameters.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Logarithm",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float Logarithm(float value, float base=10.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the logarithm of any base specified.\n\n_@param_ `value` — >Input value.\n\n_@param_ `base` — >Logarithm base to use, default is 10.\n\n_@return_ `log(value)`/`log(base)`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MAPLIST_FLAG_CLEARARRAY",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 21,
    "detail": "#define MAPLIST_FLAG_CLEARARRAY (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " If an input array is specified, clear it before adding. "
    },
    "tags": []
  },
  {
    "label": "MAPLIST_FLAG_MAPSFOLDER",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 21,
    "detail": "#define MAPLIST_FLAG_MAPSFOLDER (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " On failure, use all maps in the maps folder. "
    },
    "tags": []
  },
  {
    "label": "MAPLIST_FLAG_NO_DEFAULT",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 21,
    "detail": "#define MAPLIST_FLAG_NO_DEFAULT (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " Do not read \"default\" or \"mapcyclefile\" on failure. "
    },
    "tags": []
  },
  {
    "label": "MAXPLAYERS",
    "labelDetails": {
      "description": "clients.inc"
    },
    "kind": 21,
    "detail": "#define MAXPLAYERS 65",
    "documentation": {
      "kind": "markdown",
      "value": " Maximum number of players SourceMod supports "
    },
    "tags": []
  },
  {
    "label": "MAX_AUTHID_LENGTH",
    "labelDetails": {
      "description": "clients.inc"
    },
    "kind": 21,
    "detail": "#define MAX_AUTHID_LENGTH 64",
    "documentation": {
      "kind": "markdown",
      "value": " Maximum buffer required to store any AuthID type "
    },
    "tags": []
  },
  {
    "label": "MAX_NAME_LENGTH",
    "labelDetails": {
      "description": "clients.inc"
    },
    "kind": 21,
    "detail": "#define MAX_NAME_LENGTH 128",
    "documentation": {
      "kind": "markdown",
      "value": " Maximum buffer required to store a client name "
    },
    "tags": []
  },
  {
    "label": "MAX_TARGET_LENGTH",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define MAX_TARGET_LENGTH 64",
    "tags": []
  },
  {
    "label": "MENUFLAG_BUTTON_EXIT",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENUFLAG_BUTTON_EXITBACK",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENUFLAG_BUTTON_NOVOTE",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENUFLAG_NO_SOUND",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENU_ACTIONS_ALL",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENU_ACTIONS_DEFAULT",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENU_NO_PAGINATION",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MENU_TIME_FOREVER",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "MOTDPANEL_TYPE_FILE",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define MOTDPANEL_TYPE_FILE 3",
    "documentation": {
      "kind": "markdown",
      "value": " Treat msg as a filename to be opened "
    },
    "tags": []
  },
  {
    "label": "MOTDPANEL_TYPE_INDEX",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define MOTDPANEL_TYPE_INDEX 1",
    "documentation": {
      "kind": "markdown",
      "value": " Msg is auto determined by the engine "
    },
    "tags": []
  },
  {
    "label": "MOTDPANEL_TYPE_TEXT",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define MOTDPANEL_TYPE_TEXT 0",
    "documentation": {
      "kind": "markdown",
      "value": " Treat msg as plain text "
    },
    "tags": []
  },
  {
    "label": "MOTDPANEL_TYPE_URL",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define MOTDPANEL_TYPE_URL 2",
    "documentation": {
      "kind": "markdown",
      "value": " Treat msg as an URL link "
    },
    "tags": []
  },
  {
    "label": "MOVETYPE_CUSTOM",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_CUSTOM"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_FLY",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_FLY"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_FLYGRAVITY",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_FLYGRAVITY"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_ISOMETRIC",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_ISOMETRIC"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_LADDER",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_LADDER"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_NOCLIP",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_NOCLIP"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_NONE",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_NONE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_OBSERVER",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_OBSERVER"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_PUSH",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_PUSH"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_STEP",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_STEP"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_VPHYSICS",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_VPHYSICS"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MOVETYPE_WALK",
    "labelDetails": {
      "description": "MoveType::MOVETYPE_WALK"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MakeCompatEntRef",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int MakeCompatEntRef(int ref)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a reference into a backwards compatible version.\n\n_@param_ `ref` — >Entity reference.\n\n_@return_ Bcompat reference.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MakeVectorFromPoints",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "stock void MakeVectorFromPoints(const float pt1[3], const float pt2[3], float output[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Builds a vector from two points by subtracting the points.\n\n_@param_ `pt1` — >First point (to be subtracted from the second).\n\n_@param_ `pt2` — >Second point.\n\n_@param_ `output` — >Output vector buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MarkNativeAsOptional",
    "labelDetails": {
      "detail": "void",
      "description": "core.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MaxClients",
    "labelDetails": {
      "detail": "int",
      "description": "global"
    },
    "kind": 6,
    "detail": "public const int MaxClients;",
    "documentation": {
      "kind": "markdown",
      "value": " Maximum number of players the server supports (dynamic) "
    },
    "tags": []
  },
  {
    "label": "Menu",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 7
  },
  {
    "label": "MenuAction",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 13
  },
  {
    "label": "MenuAction_Cancel",
    "labelDetails": {
      "description": "MenuAction::MenuAction_Cancel"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_Display",
    "labelDetails": {
      "description": "MenuAction::MenuAction_Display"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_DisplayItem",
    "labelDetails": {
      "description": "MenuAction::MenuAction_DisplayItem"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_DrawItem",
    "labelDetails": {
      "description": "MenuAction::MenuAction_DrawItem"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_End",
    "labelDetails": {
      "description": "MenuAction::MenuAction_End"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_Select",
    "labelDetails": {
      "description": "MenuAction::MenuAction_Select"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_Start",
    "labelDetails": {
      "description": "MenuAction::MenuAction_Start"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_VoteCancel",
    "labelDetails": {
      "description": "MenuAction::MenuAction_VoteCancel"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_VoteEnd",
    "labelDetails": {
      "description": "MenuAction::MenuAction_VoteEnd"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuAction_VoteStart",
    "labelDetails": {
      "description": "MenuAction::MenuAction_VoteStart"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuCancel_Disconnected",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuCancel_Exit",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuCancel_ExitBack",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuCancel_Interrupted",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuCancel_NoDisplay",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuCancel_Timeout",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuEnd_Cancelled",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuEnd_Exit",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuEnd_ExitBack",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuEnd_Selected",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuEnd_VotingCancelled",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuEnd_VotingDone",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuHandler",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 8,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MenuSetClientMapping",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MenuShufflePerClient",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MenuSource",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 13
  },
  {
    "label": "MenuSource_External",
    "labelDetails": {
      "description": "MenuSource::MenuSource_External"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuSource_None",
    "labelDetails": {
      "description": "MenuSource::MenuSource_None"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuSource_Normal",
    "labelDetails": {
      "description": "MenuSource::MenuSource_Normal"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuSource_RawPanel",
    "labelDetails": {
      "description": "MenuSource::MenuSource_RawPanel"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuStyle",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 13
  },
  {
    "label": "MenuStyle_Default",
    "labelDetails": {
      "description": "MenuStyle::MenuStyle_Default"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuStyle_Radio",
    "labelDetails": {
      "description": "MenuStyle::MenuStyle_Radio"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MenuStyle_Valve",
    "labelDetails": {
      "description": "MenuStyle::MenuStyle_Valve"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "MorePlugins",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native bool MorePlugins(Handle iter)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether there are more plugins available in the iterator.\n\n_@param_ `iter` — >Handle to the plugin iterator.\n\n_@return_ True on more plugins, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MoveType",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 13,
    "detail": "enum MoveType"
  },
  {
    "label": "MsgHook",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 8,
    "detail": "typeset MsgHook",
    "documentation": {
      "kind": "markdown",
      "value": "\n Hook function types for user messages.\r\n"
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MsgPostHook",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 8,
    "detail": "typedef MsgPostHook = function void (UserMsg msg_id, bool sent);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a message hook has completed.\n\n_@param_ `msg_id` — >Message index.\n\n_@param_ `sent` — >True if message was sent, false if blocked.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "MultiTargetFilter",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 8,
    "detail": "typeset MultiTargetFilter",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds clients to a multi-target filter.\n\n_@param_ `pattern` — >Pattern name.\n\n_@param_ `clients` — >Array to fill with unique, valid client indexes.\n\n_@param_ `client` — >Client that triggered this filter.\n\n_@return_ True if pattern was recognized, false otherwise.\n\n_@note_ To see if the client param is available, use FeatureType_Capability and FEATURECAP_MULTITARGETFILTER_CLIENTPARAM.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "NULL_STRING",
    "labelDetails": {
      "detail": "char",
      "description": "global"
    },
    "kind": 6,
    "tags": []
  },
  {
    "label": "NULL_VECTOR",
    "labelDetails": {
      "detail": "float",
      "description": "global"
    },
    "kind": 6,
    "tags": []
  },
  {
    "label": "NativeCall",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 8,
    "detail": "typeset NativeCall",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "NegateVector",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "stock void NegateVector(float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Negatives a vector.\n\n_@param_ `vec` — >Vector.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "NetFlow",
    "labelDetails": {
      "description": "clients.inc"
    },
    "kind": 13,
    "detail": "enum NetFlow",
    "documentation": {
      "kind": "markdown",
      "value": "\n Network flow directions.\r\n "
    }
  },
  {
    "label": "NetFlow_Both",
    "labelDetails": {
      "description": "NetFlow::NetFlow_Both"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "NetFlow_Incoming",
    "labelDetails": {
      "description": "NetFlow::NetFlow_Incoming"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "NetFlow_Outgoing",
    "labelDetails": {
      "description": "NetFlow::NetFlow_Outgoing"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "NormalizeVector",
    "labelDetails": {
      "detail": "float",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "native float NormalizeVector(const float vec[3], float result[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Normalizes a vector.  The input array can be the same as the output array.\n\n_@param_ `vec` — >Vector.\n\n_@param_ `result` — >Resultant vector.\n\n_@return_ Vector length.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "NotifyPostAdminCheck",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void NotifyPostAdminCheck(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Signals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled.\r\n \n Note: This must be sent even if no admin id was assigned.\n\n_@param_ `client` — >Client index.\n\n_@error_ Invalid client index or client not in-game AND authorized.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "NumberType",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 13,
    "detail": "enum NumberType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Represents how many bytes we can read from an address with one load\r\n "
    }
  },
  {
    "label": "NumberType_Int16",
    "labelDetails": {
      "description": "NumberType::NumberType_Int16"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "NumberType_Int32",
    "labelDetails": {
      "description": "NumberType::NumberType_Int32"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "NumberType_Int8",
    "labelDetails": {
      "description": "NumberType::NumberType_Int8"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "OnAllPluginsLoaded",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnAllPluginsLoaded()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called after all plugins have been loaded.  This is called once for every plugin.  If a plugin late loads, it will be called immediately after `OnPluginStart()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnAutoConfigsBuffered",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnAutoConfigsBuffered()",
    "documentation": {
      "kind": "markdown",
      "value": "\n This is called once, right after `OnMapStart()` but any time before `OnConfigsExecuted()`.  It is called after the \"exec sourcemod.cfg\" command and all `AutoExecConfig()` exec commands have been added to the `ServerCommand()` buffer.\r\n \n If you need to load per-map settings that override default values, adding commands to the `ServerCommand()` buffer here will guarantee that they're set before `OnConfigsExecuted()`.\r\n \n Unlike `OnMapStart()` and `OnConfigsExecuted()`, this is not called on late loads that occur after `OnMapStart()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnBanClient",
    "labelDetails": {
      "detail": "Action",
      "description": "banning.inc"
    },
    "kind": 3,
    "detail": "forward Action OnBanClient(int client,\n         int time, \n         int flags, \n         const char[] reason, \n         const char[] kick_message, \n         const char[] command,\n         any source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called for calls to `BanClient()` with a non-empty command.\n\n_@param_ `client` — >Client being banned.\n\n_@param_ `time` — >Time the client is being banned for (0 = permanent).\n\n_@param_ `flags` — >One if AUTHID or IP will be enabled.  If AUTO is also                       enabled, it means Core autodetected which to use.\n\n_@param_ `reason` — >Reason passed via `BanClient()`.\n\n_@param_ `kick_message` — >Kick message passed via `BanClient()`.\n\n_@param_ `command` — >Command string to identify the ban source.\n\n_@param_ `source` — >Source value passed via `BanClient()`.\n\n_@return_ Plugin_Handled to block the actual server banning.                      Kicking will still occur.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnBanIdentity",
    "labelDetails": {
      "detail": "Action",
      "description": "banning.inc"
    },
    "kind": 3,
    "detail": "forward Action OnBanIdentity(const char[] identity,\n        int time,\n        int flags,\n        const char[] reason,\n        const char[] command,\n        any source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called for calls to `BanIdentity()` with a non-empty command.\n\n_@param_ `identity` — >Identity string being banned (authstring or ip).\n\n_@param_ `time` — >Time the client is being banned for (0 = permanent).\n\n_@param_ `flags` — >Ban flags (only IP or AUTHID are valid here).\n\n_@param_ `reason` — >Reason passed via `BanIdentity()`.\n\n_@param_ `command` — >Command string to identify the ban source.\n\n_@param_ `source` — >Source value passed via `BanIdentity()`.\n\n_@return_ Plugin_Handled to block the actual server banning.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientAuthorized",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientAuthorized(int client, const char[] auth)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client receives an auth ID.  The state of a client's  authorization as an admin is not guaranteed here.  Use  `OnClientPostAdminCheck()` if you need a client's admin status.\r\n \n This is called by bots, but the ID will be \"BOT\".\n\n_@param_ `client` — >Client index.\n\n_@param_ `auth` — >Client Steam2 id, if available, else engine auth id.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientCommand",
    "labelDetails": {
      "detail": "Action",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward Action OnClientCommand(int client, int args)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client is sending a command.\r\n \n As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks.\n\n_@param_ `client` — >Client index.\n\n_@param_ `args` — >Number of arguments.\n\n_@return_ Plugin_Handled blocks the command from being sent,                      and Plugin_Continue resumes normal functionality.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientCommandKeyValues",
    "labelDetails": {
      "detail": "Action",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward Action OnClientCommandKeyValues(int client, KeyValues kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client is sending a KeyValues command.\n\n_@param_ `client` — >Client index.\n\n_@param_ `kv` — >Editable KeyValues data to be sent as the command.                      (This handle should not be stored and will be closed                      after this forward completes.)\n\n_@return_ Plugin_Handled blocks the command from being sent,                      and Plugin_Continue resumes normal functionality.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientCommandKeyValues_Post",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientCommandKeyValues_Post(int client, KeyValues kv)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called after a client has sent a KeyValues command.\n\n_@param_ `client` — >Client index.\n\n_@param_ `kv` — >KeyValues data sent as the command.                      (This handle should not be stored and will be closed                      after this forward completes.)\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientConnect",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward bool OnClientConnect(int client, char[] rejectmsg, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is  rejected by this forward or any other, OnClientDisconnect will not be called.\r\n \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.\n\n_@param_ `client` — >Client index.\n\n_@param_ `rejectmsg` — >Buffer to store the rejection message when the connection is refused.\n\n_@param_ `maxlen` — >Maximum number of characters for rejection buffer.\n\n_@return_ True to validate client's connection, false to refuse it.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientConnected",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientConnected(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called once a client successfully connects.  This callback is paired with OnClientDisconnect.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientDisconnect",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientDisconnect(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client is disconnecting from the server.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientDisconnect_Post",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientDisconnect_Post(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client is disconnected from the server.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientFloodCheck",
    "labelDetails": {
      "detail": "bool",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward bool OnClientFloodCheck(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client has sent chat text.  This must return either true or false to indicate that a client is or is not spamming the server.\r\n \n The return value is a hint only.  Core or another plugin may decide otherwise.\n\n_@param_ `client` — >Client index.  The server (0) will never be passed.\n\n_@return_ True if client is spamming the server, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientFloodResult",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientFloodResult(int client, bool blocked)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called after a client's flood check has been computed.  This can be used by antiflood algorithms to decay/increase flooding weights.\r\n \n Since the result from \"OnClientFloodCheck\" isn't guaranteed to be the final result, it is generally a good idea to use this to play with other algorithms nicely.\n\n_@param_ `client` — >Client index.  The server (0) will never be passed.\n\n_@param_ `blocked` — >True if client flooded last \"say\", false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientLanguageChanged",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientLanguageChanged(int client, int language)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the language was received from the player.\n\n_@param_ `client` — >Client index.\n\n_@param_ `language` — >Language number.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientPostAdminCheck",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientPostAdminCheck(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called once a client is authorized and fully in-game, and  after all post-connection authorizations have been performed.  \r\n \n This callback is guaranteed to occur on all clients, and always  after each `OnClientPutInServer()` call.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientPostAdminFilter",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientPostAdminFilter(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called directly before `OnClientPostAdminCheck()` as a method to  alter administrative permissions before plugins perform final  post-connect operations.  \r\n \n In general, do not use this function unless you are specifically  attempting to change access permissions.  Use `OnClientPostAdminCheck()`  instead if you simply want to perform post-connect authorization  routines.\r\n \n See `OnClientPostAdminCheck()` for more information.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientPreAdminCheck",
    "labelDetails": {
      "detail": "Action",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward Action OnClientPreAdminCheck(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called once a client is authorized and fully in-game, but  before admin checks are done.  This can be used to override  the default admin checks for a client.  You should only use  this for overriding; use `OnClientPostAdminCheck()` instead  if you want notification.\r\n \n Note: If handled/blocked, PostAdminCheck must be signalled  manually via `NotifyPostAdminCheck()`.\r\n \n This callback is guaranteed to occur on all clients, and always  after each `OnClientPutInServer()` call.\n\n_@param_ `client` — >Client index.\n\n_@return_ Plugin_Handled to block admin checks.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientPutInServer",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientPutInServer(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a client is entering the game.\r\n \n Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use `OnClientPostAdminCheck()` if you need to verify whether  connecting players are admins.\r\n \n `GetClientCount()` will include clients as they are passed through this  function, as clients are already in game at this point.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientSayCommand",
    "labelDetails": {
      "detail": "Action",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "forward Action OnClientSayCommand(int client, const char[] command, const char[] sArgs)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Global listener for the chat commands.\n\n_@param_ `client` — >Client index.\n\n_@param_ `command` — >Command name.\n\n_@param_ `sArgs` — >Chat argument string.\n\n_@return_ An Action value. Returning Plugin_Handled bypasses the game function call.                      Returning Plugin_Stop bypasses the post hook as well as the game function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientSayCommand_Post",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientSayCommand_Post(int client, const char[] command, const char[] sArgs)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Global post listener for the chat commands.\n\n_@param_ `client` — >Client index.\n\n_@param_ `command` — >Command name.\n\n_@param_ `sArgs` — >Chat argument string.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnClientSettingsChanged",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "forward void OnClientSettingsChanged(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called whenever the client's settings are changed.\n\n_@param_ `client` — >Client index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnConfigsExecuted",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnConfigsExecuted()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the map has loaded, servercfgfile (server.cfg) has been executed, and all plugin configs are done executing.  This is the best place to initialize plugin functions which are based on cvar data.\n\n_@note_ This will always be called once and only once per map.  It will be       called after `OnMapStart()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnGameFrame",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnGameFrame()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called before every server frame.  Note that you should avoid doing expensive computations or declaring large local arrays.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnLibraryAdded",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnLibraryAdded(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called after a library is added. A library is either a plugin name or extension name, as exposed via its include file.\n\n_@param_ `name` — >Library name.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnLibraryRemoved",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnLibraryRemoved(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called right before a library is removed. A library is either a plugin name or extension name, as exposed via its include file.\n\n_@param_ `name` — >Library name.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnLogAction",
    "labelDetails": {
      "detail": "Action",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "forward Action OnLogAction(Handle source,\n         Identity ident,\n         int client,\n         int target,\n         const char[] message)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when an action is going to be logged.\n\n_@param_ `source` — >Handle to the object logging the action, or INVALID_HANDLE                      if Core is logging the action.\n\n_@param_ `ident` — >Type of object logging the action (plugin, ext, or core).\n\n_@param_ `client` — >Client the action is from; 0 for server, -1 if not applicable.\n\n_@param_ `target` — >Client the action is targetting, or -1 if not applicable.\n\n_@param_ `message` — >Message that is being logged.\n\n_@return_ Plugin_Continue will perform the default logging behavior.                      Plugin_Handled will stop Core from logging the message.                      Plugin_Stop is the same as Handled, but prevents any other                      plugins from handling the message.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnMapEnd",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnMapEnd()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called right before a map ends.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnMapInit",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnMapInit(const char[] mapName)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the map starts loading.\n\n_@param_ `mapName` — >Name of the map\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnMapStart",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnMapStart()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the map is loaded.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnMapTimeLeftChanged",
    "labelDetails": {
      "detail": "void",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "forward void OnMapTimeLeftChanged()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Notification that the map's time left has changed via a change in the time limit or a change in the game rules (such as mp_restartgame).  This is useful for plugins trying to create timers based on the time left in the map.\r\n \n Calling `ExtendMapTimeLimit()` from here, without proper precaution, will cause infinite recursion.\r\n \n If the operation is not supported, this will never be called. If the server has not yet processed any frames (i.e. no players have joined the map yet), then this will be called once the server begins ticking, even if there is no time limit set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnNotifyPluginUnloaded",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnNotifyPluginUnloaded(Handle plugin)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a plugin unloaded.\n\n_@param_ `plugin` — >Plugin Handle who unloaded.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnPluginEnd",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnPluginEnd()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the plugin is about to be unloaded.\r\n \n It is not necessary to close any handles or remove hooks in this function. SourceMod guarantees that plugin shutdown automatically and correctly releases all resources.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnPluginPauseChange",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnPluginPauseChange(bool pause)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the plugin's pause status is changing.\n\n_@param_ `pause` — >True if the plugin is being paused, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnPluginStart",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnPluginStart()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the plugin is fully initialized and all known external references are resolved. This is only called once in the lifetime of the plugin, and is paired with `OnPluginEnd()`.\r\n \n If any run-time error is thrown during this callback, the plugin will be marked as failed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnRebuildAdminCache",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "forward void OnRebuildAdminCache(AdminCachePart part)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when part of the cache needs to be rebuilt.\n\n_@param_ `part` — >Part of the admin cache to rebuild.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnRemoveBan",
    "labelDetails": {
      "detail": "Action",
      "description": "banning.inc"
    },
    "kind": 3,
    "detail": "forward Action OnRemoveBan(const char[] identity,\n         int flags,\n         const char[] command,\n         any source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called for calls to `RemoveBan()` with a non-empty command.\n\n_@param_ `identity` — >Identity string being banned (authstring or ip).\n\n_@param_ `flags` — >Ban flags (only IP or AUTHID are valid here).\n\n_@param_ `command` — >Command string to identify the ban source.\n\n_@param_ `source` — >Source value passed via `BanIdentity()`.\n\n_@return_ Plugin_Handled to block the actual unbanning.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OnServerCfg",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "forward void OnServerCfg()",
    "documentation": {
      "kind": "markdown",
      "value": "\n\n_@deprecated_ Use `OnConfigsExecuted()` instead.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "OpenDirectory",
    "labelDetails": {
      "detail": "DirectoryListing",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native DirectoryListing OpenDirectory(const char[] path, bool use_valve_fs=false, const char[] valve_path_id=\"GAME\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Opens a directory/folder for contents enumeration.\n\n_@note_ Directories are closed with `CloseHandle()` or delete.\n\n_@note_ Directories Handles can be cloned.\n\n_@note_ `OpenDirectory()` supports the \"file:\" notation.\n\n_@param_ `path` — >Path to open.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to find files existing in any of                      the Valve search paths, rather than solely files                      existing directly in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ A Handle to the directory, null on error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OpenFile",
    "labelDetails": {
      "detail": "File",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native File OpenFile(const char[] file, const char[] mode, bool use_valve_fs=false, const char[] valve_path_id=\"GAME\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Opens or creates a file, returning a File handle on success. File handles should be closed with delete or `CloseHandle()`.\r\n \n The open mode may be one of the following strings:   \"r\": Open an existing file for reading.   \"w\": Create a file for writing, or truncate (delete the contents of) an        existing file and then open it for writing.   \"a\": Create a file for writing, or open an existing file such that writes        will be appended to the end.   \"r+\": Open an existing file for both reading and writing.   \"w+\": Create a file for reading and writing, or truncate an existing file         and then open it for reading and writing.   \"a+\": Create a file for both reading and writing, or open an existing file         such that writes will be appended to the end.\r\n \n The open mode may also contain an additional character after \"r\", \"w\", or \"a\", but before any \"+\" sign. This character may be \"b\" (indicating binary mode) or \"t\" (indicating text mode). By default, \"text\" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\\n' character (0xA) to be written as \"\\r\\n\" (0xD, 0xA).\r\n \n Example: \"rb\" opens a binary file for reading; \"at\" opens a text file for appending.\n\n_@param_ `file` — >File to open.\n\n_@param_ `mode` — >Open mode.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to find files existing in valve                      search paths, rather than solely files existing directly                      in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ A File handle, or null if the file could not be opened.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "OverrideRule",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum OverrideRule",
    "documentation": {
      "kind": "markdown",
      "value": "\n Access override rules.\r\n "
    }
  },
  {
    "label": "OverrideType",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 13,
    "detail": "enum OverrideType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Access override types.\r\n "
    }
  },
  {
    "label": "Override_Command",
    "labelDetails": {
      "description": "OverrideType::Override_Command"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Override_CommandGroup",
    "labelDetails": {
      "description": "OverrideType::Override_CommandGroup"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PB_FIELD_NOT_REPEATED",
    "labelDetails": {
      "description": "protobuf.inc"
    },
    "kind": 21,
    "detail": "#define PB_FIELD_NOT_REPEATED -1",
    "tags": []
  },
  {
    "label": "PLATFORM_MAX_PATH",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define PLATFORM_MAX_PATH 256",
    "documentation": {
      "kind": "markdown",
      "value": " Maximum path length. "
    },
    "tags": []
  },
  {
    "label": "PLAYER_FLAG_BITS",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define PLAYER_FLAG_BITS 9",
    "tags": []
  },
  {
    "label": "Panel",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 7
  },
  {
    "label": "ParamType",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 13,
    "detail": "enum ParamType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Describes the various ways to pass parameters to functions or forwards.\r\n "
    }
  },
  {
    "label": "Param_Any",
    "labelDetails": {
      "description": "ParamType::Param_Any"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_Array",
    "labelDetails": {
      "description": "ParamType::Param_Array"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_Cell",
    "labelDetails": {
      "description": "ParamType::Param_Cell"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_CellByRef",
    "labelDetails": {
      "description": "ParamType::Param_CellByRef"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_Float",
    "labelDetails": {
      "description": "ParamType::Param_Float"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_FloatByRef",
    "labelDetails": {
      "description": "ParamType::Param_FloatByRef"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_String",
    "labelDetails": {
      "description": "ParamType::Param_String"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Param_VarArgs",
    "labelDetails": {
      "description": "ParamType::Param_VarArgs"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PathType",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 13,
    "detail": "enum PathType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Path types.\r\n "
    }
  },
  {
    "label": "Path_SM",
    "labelDetails": {
      "description": "PathType::Path_SM"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PbAddAngle",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddAngle(Handle pb, const char[] field, const float angle[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add an XYZ angle to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `angle` — >Angle value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddBool",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddBool(Handle pb, const char[] field, bool value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add a bool to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >Boolean value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddColor",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddColor(Handle pb, const char[] field, const int color[4])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add an RGBA color to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `color` — >Color value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddFloat",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddFloat(Handle pb, const char[] field, float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add a float or double to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >Float value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddInt",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddInt(Handle pb, const char[] field, int value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add an int32, uint32, sint32, fixed32, sfixed32, or enum value to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >Integer value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddMessage",
    "labelDetails": {
      "detail": "Handle",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native Handle PbAddMessage(Handle pb, const char[] field)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds an embedded protobuf message to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@return_ protobuf handle to added, embedded message.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddString",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddString(Handle pb, const char[] field, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add a string to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >String value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddVector",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddVector(Handle pb, const char[] field, const float vec[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add an XYZ vector to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `vec` — >Vector value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbAddVector2D",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbAddVector2D(Handle pb, const char[] field, const float vec[2])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Add an XY vector to a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `vec` — >Vector value to add.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbGetRepeatedFieldCount",
    "labelDetails": {
      "detail": "int",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native int PbGetRepeatedFieldCount(Handle pb, const char[] field)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets the number of elements in a repeated field of a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@return_ Number of elements in the field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadAngle",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbReadAngle(Handle pb, const char[] field, float buffer[3], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads an XYZ angle value from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `buffer` — >Destination angle buffer.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadBool",
    "labelDetails": {
      "detail": "bool",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native bool PbReadBool(Handle pb, const char[] field, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a bool from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `index` — >Index into repeated field.\n\n_@return_ Boolean value read.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadColor",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbReadColor(Handle pb, const char[] field, int buffer[4], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads an RGBA color value from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `buffer` — >Destination color buffer.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadFloat",
    "labelDetails": {
      "detail": "float",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native float PbReadFloat(Handle pb, const char[] field, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a float or downcasted double from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `index` — >Index into repeated field.\n\n_@return_ Float value read.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadInt",
    "labelDetails": {
      "detail": "int",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native int PbReadInt(Handle pb, const char[] field, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads an int32, uint32, sint32, fixed32, sfixed32, or enum value from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `index` — >Index into repeated field.\n\n_@return_ Integer value read.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadMessage",
    "labelDetails": {
      "detail": "Handle",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native Handle PbReadMessage(Handle pb, const char[] field)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieve a handle to an embedded protobuf message in a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@return_ protobuf handle to embedded message.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadRepeatedMessage",
    "labelDetails": {
      "detail": "Handle",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native Handle PbReadRepeatedMessage(Handle pb, const char[] field, int index)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieve a handle to an embedded protobuf message in a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `index` — >Index in the repeated field.\n\n_@return_ protobuf handle to embedded message.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadString",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbReadString(Handle pb, const char[] field, char[] buffer, int maxlength, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a string from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadVector",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbReadVector(Handle pb, const char[] field, float buffer[3], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads an XYZ vector value from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `buffer` — >Destination vector buffer.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbReadVector2D",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbReadVector2D(Handle pb, const char[] field, float buffer[2], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads an XY vector value from a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `buffer` — >Destination vector buffer.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbRemoveRepeatedFieldValue",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbRemoveRepeatedFieldValue(Handle pb, const char[] field, int index)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a value by index from a protobuf message repeated field.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetAngle",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetAngle(Handle pb, const char[] field, const float angle[3], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an XYZ angle on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `angle` — >Angle value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetBool",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetBool(Handle pb, const char[] field, bool value, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a bool on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >Boolean value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetColor",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetColor(Handle pb, const char[] field, const int color[4], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an RGBA color on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `color` — >Color value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetFloat",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetFloat(Handle pb, const char[] field, float value, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a float or double on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >Float value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetInt",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetInt(Handle pb, const char[] field, int value, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an int32, uint32, sint32, fixed32, sfixed32, or enum value on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >Integer value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetString",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetString(Handle pb, const char[] field, const char[] value, int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a string on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `value` — >String value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetVector",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetVector(Handle pb, const char[] field, const float vec[3], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an XYZ vector on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `vec` — >Vector value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PbSetVector2D",
    "labelDetails": {
      "detail": "void",
      "description": "protobuf.inc"
    },
    "kind": 3,
    "detail": "native void PbSetVector2D(Handle pb, const char[] field, const float vec[2], int index = -1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an XY vector on a protobuf message.\n\n_@param_ `pb` — >protobuf handle.\n\n_@param_ `field` — >Field name.\n\n_@param_ `vec` — >Vector value to set.\n\n_@param_ `index` — >Index into repeated field.\n\n_@error_ Invalid or incorrect Handle, non-existent field, or incorrect field type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PlInfo_Author",
    "labelDetails": {
      "description": "PluginInfo::PlInfo_Author"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PlInfo_Description",
    "labelDetails": {
      "description": "PluginInfo::PlInfo_Description"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PlInfo_Name",
    "labelDetails": {
      "description": "PluginInfo::PlInfo_Name"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PlInfo_URL",
    "labelDetails": {
      "description": "PluginInfo::PlInfo_URL"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PlInfo_Version",
    "labelDetails": {
      "description": "PluginInfo::PlInfo_Version"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PluginInfo",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 13
  },
  {
    "label": "PluginStatus",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 13
  },
  {
    "label": "Plugin_BadLoad",
    "labelDetails": {
      "description": "PluginStatus::Plugin_BadLoad"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Changed",
    "labelDetails": {
      "description": "Action::Plugin_Changed"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Continue",
    "labelDetails": {
      "description": "Action::Plugin_Continue"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Created",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Created"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Error",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Error"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Evicted",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Evicted"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Failed",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Failed"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Handled",
    "labelDetails": {
      "description": "Action::Plugin_Handled"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Loaded",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Loaded"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Paused",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Paused"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Running",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Running"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Stop",
    "labelDetails": {
      "description": "Action::Plugin_Stop"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Plugin_Uncompiled",
    "labelDetails": {
      "description": "PluginStatus::Plugin_Uncompiled"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PopStack",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "stock bool PopStack(Handle stack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pops a value off a stack, ignoring it completely.\n\n_@param_ `stack` — >Stack Handle.\n\n_@return_ True if something was popped, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PopStackArray",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native bool PopStackArray(Handle stack, any[] buffer, int size=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pops an array of cells from a stack.\n\n_@param_ `stack` — >Stack Handle.\n\n_@param_ `buffer` — >Buffer to store the array in.\n\n_@param_ `size` — >If not set, assumes the buffer size is equal to the                      blocksize.  Otherwise, the size passed is used.\n\n_@return_ True on success, false if the stack is empty.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PopStackCell",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native bool PopStackCell(Handle stack, any &value, int block=0, bool asChar=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pops a cell value from a stack.\n\n_@param_ `stack` — >Stack Handle.\n\n_@param_ `value` — >Variable to store the value.\n\n_@param_ `block` — >Optionally specify which block to read from                      (useful if the blocksize \\> 0).\n\n_@param_ `asChar` — >Optionally read as a byte instead of a cell.\n\n_@return_ True on success, false if the stack is empty.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PopStackString",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native bool PopStackString(Handle stack, char[] buffer, int maxlength, int &written=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pops a string value from a stack.\n\n_@param_ `stack` — >Stack Handle.\n\n_@param_ `buffer` — >Buffer to store string.\n\n_@param_ `maxlength` — >Maximum size of the buffer.\n\n_@return_ True on success, false if the stack is empty.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Pow",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float Pow(float value, float exponent)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the value raised to the power of the exponent.\n\n_@param_ `value` — >Value to be raised.\n\n_@param_ `exponent` — >Value to raise the base.\n\n_@return_ value^exponent.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrecacheDecal",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int PrecacheDecal(const char[] decal, bool preload=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Precaches a given decal.\n\n_@param_ `decal` — >Name of the decal to precache.\n\n_@param_ `preload` — >If preload is true the file will be precached before level startup.\n\n_@return_ Returns a decal index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrecacheGeneric",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int PrecacheGeneric(const char[] generic, bool preload=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Precaches a given generic file.\n\n_@param_ `generic` — >Name of the generic file to precache.\n\n_@param_ `preload` — >If preload is true the file will be precached before level startup.\n\n_@return_ Returns a generic file index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrecacheModel",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int PrecacheModel(const char[] model, bool preload=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Precaches a given model.\n\n_@param_ `model` — >Name of the model to precache.\n\n_@param_ `preload` — >If preload is true the file will be precached before level startup.\n\n_@return_ Returns the model index, 0 for error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrecacheSentenceFile",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int PrecacheSentenceFile(const char[] file, bool preload=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Precaches a given sentence file.\n\n_@param_ `file` — >Name of the sentence file to precache.\n\n_@param_ `preload` — >If preload is true the file will be precached before level startup.\n\n_@return_ Returns a sentence file index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrecacheSound",
    "labelDetails": {
      "detail": "bool",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native bool PrecacheSound(const char[] sound, bool preload=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Precaches a given sound.\n\n_@param_ `sound` — >Name of the sound to precache.\n\n_@param_ `preload` — >If preload is true the file will be precached before level startup.\n\n_@return_ True if successfully precached, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintCenterText",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void PrintCenterText(int client, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Prints a message to a specific client in the center of the screen.\n\n_@param_ `client` — >Client index.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintCenterTextAll",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "stock void PrintCenterTextAll(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Prints a message to all clients in the center of the screen.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintHintText",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void PrintHintText(int client, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Prints a message to a specific client with a hint box.\n\n_@param_ `client` — >Client index.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintHintTextToAll",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "stock void PrintHintTextToAll(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Prints a message to all clients with a hint box.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintToChat",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void PrintToChat(int client, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Prints a message to a specific client in the chat area.\n\n_@param_ `client` — >Client index.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintToChatAll",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "stock void PrintToChatAll(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Prints a message to all clients in the chat area.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintToConsole",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void PrintToConsole(int client, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sends a message to a client's console.\n\n_@param_ `client` — >Client index.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ If the client is not connected an error will be thrown.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintToConsoleAll",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "stock void PrintToConsoleAll(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sends a message to every client's console.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrintToServer",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void PrintToServer(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sends a message to the server console.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PrivateForward",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 7,
    "detail": "methodmap PrivateForward < GlobalForward"
  },
  {
    "label": "ProcessTargetString",
    "labelDetails": {
      "detail": "int",
      "description": "commandfilters.inc"
    },
    "kind": 3,
    "detail": "native int ProcessTargetString(const char[] pattern,\n          int admin, \n          int[] targets,\n          int max_targets,\n          int filter_flags,\n          char[] target_name,\n          int tn_maxlength,\n          bool &tn_is_ml)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Processes a generic command target string, and resolves it to a list  of clients or one client, based on filtering rules and a pattern.\r\n \n Note that you should use LoadTranslations(\"common.phrases\") in `OnPluginStart()`,  as that file is guaranteed to contain all of the translatable phrases that  `ProcessTargetString()` will return.\n\n_@param_ `pattern` — >Pattern to find clients against.\n\n_@param_ `admin` — >Admin performing the action, or 0 if the server.\n\n_@param_ `targets` — >Array to hold targets.\n\n_@param_ `max_targets` — >Maximum size of the targets array.\n\n_@param_ `filter_flags` — >Filter flags.\n\n_@param_ `target_name` — >Buffer to store the target name.\n\n_@param_ `tn_maxlength` — >Maximum length of the target name buffer.\n\n_@param_ `tn_is_ml` — >OUTPUT: Will be true if the target name buffer is an ML phrase,                      false if it is a normal string.\n\n_@return_ If a multi-target pattern was used, the number of clients found                       is returned.  If a single-target pattern was used, 1 is returned                       if one valid client is found.  Otherwise, a COMMAND_TARGET reason                       for failure is returned.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PropFieldType",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 13,
    "detail": "enum PropFieldType"
  },
  {
    "label": "PropField_Entity",
    "labelDetails": {
      "description": "PropFieldType::PropField_Entity"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_Float",
    "labelDetails": {
      "description": "PropFieldType::PropField_Float"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_Integer",
    "labelDetails": {
      "description": "PropFieldType::PropField_Integer"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_String",
    "labelDetails": {
      "description": "PropFieldType::PropField_String"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_String_T",
    "labelDetails": {
      "description": "PropFieldType::PropField_String_T"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_Unsupported",
    "labelDetails": {
      "description": "PropFieldType::PropField_Unsupported"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_Variant",
    "labelDetails": {
      "description": "PropFieldType::PropField_Variant"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropField_Vector",
    "labelDetails": {
      "description": "PropFieldType::PropField_Vector"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "PropType",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 13,
    "detail": "enum PropType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Property types for entities.\r\n "
    }
  },
  {
    "label": "Prop_Data",
    "labelDetails": {
      "description": "PropType::Prop_Data"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Prop_Send",
    "labelDetails": {
      "description": "PropType::Prop_Send"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Protobuf",
    "labelDetails": {
      "description": "protobuf.inc"
    },
    "kind": 7,
    "detail": "methodmap Protobuf"
  },
  {
    "label": "PushArrayArray",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int PushArrayArray(Handle array, const any[] values, int size=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes an array of cells onto the end of an array.  The cells are pushed as a block (i.e. the entire array sits at the index), rather than pushing each cell individually.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `values` — >Block of values to copy.\n\n_@param_ `size` — >If not set, the number of elements copied from the array                      will be equal to the blocksize.  If set higher than the                      blocksize, the operation will be truncated.\n\n_@return_ Index of the new entry.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PushArrayCell",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int PushArrayCell(Handle array, any value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a value onto the end of an array, adding a new index.\r\n \n This may safely be used even if the array has a blocksize greater than 1.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `value` — >Value to push.\n\n_@return_ Index of the new entry.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PushArrayString",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int PushArrayString(Handle array, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a string onto the end of an array, truncating it if it is too big.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `value` — >String to push.\n\n_@return_ Index of the new entry.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PushStackArray",
    "labelDetails": {
      "detail": "void",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native void PushStackArray(Handle stack, const any[] values, int size=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually.\n\n_@param_ `stack` — >Stack Handle.\n\n_@param_ `values` — >Block of values to copy.\n\n_@param_ `size` — >If not set, the number of elements copied from the array                      will be equal to the blocksize.  If set higher than the                       blocksize, the operation will be truncated.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PushStackCell",
    "labelDetails": {
      "detail": "void",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native void PushStackCell(Handle stack, any value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a value onto the end of the stack, adding a new index.\r\n \n This may safely be used even if the stack has a blocksize greater than 1.\n\n_@param_ `stack` — >Stack Handle.\n\n_@param_ `value` — >Value to push.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "PushStackString",
    "labelDetails": {
      "detail": "void",
      "description": "adt_stack.inc"
    },
    "kind": 3,
    "detail": "native void PushStackString(Handle stack, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Pushes a copy of a string onto the end of a stack, truncating it if it is  too big.\n\n_@param_ `stack` — >Stack Handle.\n\n_@param_ `value` — >String to push.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "QUERYCOOKIE_FAILED",
    "labelDetails": {
      "description": "QueryCookie::QUERYCOOKIE_FAILED"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "QueryClientConVar",
    "labelDetails": {
      "detail": "QueryCookie",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native QueryCookie QueryClientConVar(int client, const char[] cvarName, ConVarQueryFinished callback, any value=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a query to retrieve the value of a client's console variable.\n\n_@param_ `client` — >Player index.\n\n_@param_ `cvarName` — >Name of client convar to query.\n\n_@param_ `callback` — >A function to use as a callback when the query has finished.\n\n_@param_ `value` — >Optional value to pass to the callback function.\n\n_@return_ A cookie that uniquely identifies the query.                       Returns QUERYCOOKIE_FAILED on failure, such as when used on a bot.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "QueryCookie",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 13,
    "detail": "enum QueryCookie",
    "documentation": {
      "kind": "markdown",
      "value": "\n Console variable query helper values.\r\n "
    }
  },
  {
    "label": "RENDERFX_CLAMP_MIN_SCALE",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_CLAMP_MIN_SCALE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_DISTORT",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_DISTORT"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_ENV_RAIN",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_ENV_RAIN"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_ENV_SNOW",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_ENV_SNOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_EXPLODE",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_EXPLODE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_FADE_FAST",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_FADE_FAST"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_FADE_SLOW",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_FADE_SLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_FLICKER_FAST",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_FLICKER_FAST"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_FLICKER_SLOW",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_FLICKER_SLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_GLOWSHELL",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_GLOWSHELL"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_HOLOGRAM",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_HOLOGRAM"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_MAX",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_MAX"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_NONE",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_NONE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_NO_DISSIPATION",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_NO_DISSIPATION"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_PULSE_FAST",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_PULSE_FAST"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_PULSE_FAST_WIDE",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_PULSE_FAST_WIDE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_PULSE_FAST_WIDER",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_PULSE_FAST_WIDER"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_PULSE_SLOW",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_PULSE_SLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_PULSE_SLOW_WIDE",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_PULSE_SLOW_WIDE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_RAGDOLL",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_RAGDOLL"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_SOLID_FAST",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_SOLID_FAST"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_SOLID_SLOW",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_SOLID_SLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_SPOTLIGHT",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_SPOTLIGHT"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_STROBE_FAST",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_STROBE_FAST"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_STROBE_FASTER",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_STROBE_FASTER"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDERFX_STROBE_SLOW",
    "labelDetails": {
      "description": "RenderFx::RENDERFX_STROBE_SLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_ENVIRONMENTAL",
    "labelDetails": {
      "description": "RenderMode::RENDER_ENVIRONMENTAL"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_GLOW",
    "labelDetails": {
      "description": "RenderMode::RENDER_GLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_NONE",
    "labelDetails": {
      "description": "RenderMode::RENDER_NONE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_NORMAL",
    "labelDetails": {
      "description": "RenderMode::RENDER_NORMAL"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_TRANSADD",
    "labelDetails": {
      "description": "RenderMode::RENDER_TRANSADD"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_TRANSADDFRAMEBLEND",
    "labelDetails": {
      "description": "RenderMode::RENDER_TRANSADDFRAMEBLEND"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_TRANSALPHA",
    "labelDetails": {
      "description": "RenderMode::RENDER_TRANSALPHA"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_TRANSALPHAADD",
    "labelDetails": {
      "description": "RenderMode::RENDER_TRANSALPHAADD"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_TRANSCOLOR",
    "labelDetails": {
      "description": "RenderMode::RENDER_TRANSCOLOR"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_TRANSTEXTURE",
    "labelDetails": {
      "description": "RenderMode::RENDER_TRANSTEXTURE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RENDER_WORLDGLOW",
    "labelDetails": {
      "description": "RenderMode::RENDER_WORLDGLOW"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "REQUIRE_EXTENSIONS",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "REQUIRE_PLUGIN",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "RadToDeg",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "stock float RadToDeg(float angle)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts radians to degrees.\n\n_@param_ `angle` — >Radians.\n\n_@return_ Degrees.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RangeType_Audibility",
    "labelDetails": {
      "description": "ClientRangeType::RangeType_Audibility"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "RangeType_Visibility",
    "labelDetails": {
      "description": "ClientRangeType::RangeType_Visibility"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "ReadCommandIterator",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool ReadCommandIterator(Handle iter, \n        char[] name, \n        int nameLen, \n        int &eflags=0, \n        char[] desc=\"\", \n        int descLen=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned.\n\n_@param_ `iter` — >Command iterator Handle.\n\n_@param_ `name` — >Name buffer.\n\n_@param_ `nameLen` — >Name buffer size.\n\n_@param_ `eflags` — >Effective default flags of a command.\n\n_@param_ `desc` — >Command description buffer.\n\n_@param_ `descLen` — >Command description buffer size.\n\n_@return_ True on success, false if there are no more commands.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadDirEntry",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool ReadDirEntry(Handle dir, char[] buffer, int maxlength, FileType &type=FileType_Unknown)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads the current directory entry as a local filename, then moves to the next file.\n\n_@note_ Contents of buffers are undefined when returning false.\n\n_@note_ Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux.\n\n_@param_ `dir` — >Handle to a directory.\n\n_@param_ `buffer` — >String buffer to hold directory name.\n\n_@param_ `maxlength` — >Maximum size of string buffer.\n\n_@param_ `type` — >Optional variable to store the file type.\n\n_@return_ True on success, false if there are no more files to read.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadFile",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native int ReadFile(Handle hndl, any[] items, int num_items, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads binary data from a file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `items` — >Array to store each item read.\n\n_@param_ `num_items` — >Number of items to read into the array.\n\n_@param_ `size` — >Size of each element, in bytes, to be read.                      Valid sizes are 1, 2, or 4.\n\n_@return_ Number of elements read, or -1 on error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadFileCell",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "stock int ReadFileCell(Handle hndl, int &data, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a single binary cell from a file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `data` — >Variable to store the data read.\n\n_@param_ `size` — >Size of the data to read in bytes.  Valid                      sizes are 1, 2, or 4 bytes.\n\n_@return_ Number of elements read (max 1), or -1 on error.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadFileLine",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool ReadFileLine(Handle hndl, char[] buffer, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a line from a text file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `buffer` — >String buffer to hold the line.\n\n_@param_ `maxlength` — >Maximum size of string buffer.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadFileString",
    "labelDetails": {
      "detail": "int",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native int ReadFileString(Handle hndl, char[] buffer, int max_size, int read_count=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a UTF8 or ANSI string from a file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `buffer` — >Buffer to store the string.\n\n_@param_ `max_size` — >Maximum size of the string buffer.\n\n_@param_ `read_count` — >If -1, reads until a null terminator is encountered in                      the file.  Otherwise, read_count bytes are read                      into the buffer provided.  In this case the buffer                      is not explicitly null terminated, and the buffer                      will contain any null terminators read from the file.\n\n_@return_ Number of characters written to the buffer, or -1                      if an error was encountered.\n\n_@error_ Invalid Handle, or read_count \\> max_size.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadFlagString",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int ReadFlagString(const char[] flags, int &numchars=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a string of flag characters to a bit string.\n\n_@param_ `flags` — >Flag ASCII string.\n\n_@param_ `numchars` — >Optional variable to store the number of bytes read.\n\n_@return_ Bit string of ADMFLAG values.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadMapList",
    "labelDetails": {
      "detail": "Handle",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native Handle ReadMapList(Handle array=INVALID_HANDLE,\n                          int &serial=-1,\n                          const char[] str=\"default\",\n                          int flags=(1<<1))",
    "documentation": {
      "kind": "markdown",
      "value": "\n Loads a map list to an ADT Array.\r\n \n A map list is a list of maps from a file.  SourceMod allows easy configuration of maplists through addons/sourcemod/configs/maplists.cfg.  Each entry is given a name and a file (for example, \"rtv\" =\\> \"rtv.cfg\"), or a name and a redirection (for example, \"rtv\" =\\> \"default\").  This native will read a map list entry, cache the file, and return the list of maps it holds.\r\n \n Serial change numbers are used to identify if a map list has changed.  Thus, if you pass a serial change number and it's equal to what SourceMod currently knows about the map list, then SourceMod won't re-parse the file.\r\n \n If the maps end up being read from the maps folder (MAPLIST_FLAG_MAPSFOLDER), they are automatically sorted in alphabetical, ascending order.\r\n \n Arrays created by this function are temporary and must be freed via `CloseHandle()`. Modifying arrays created by this function will not affect future return values or or the contents of arrays returned to other plugins.\n\n_@param_ `array` — >Array to store the map list.  If INVALID_HANDLE, a new blank                      array will be created.  The blocksize should be at least 16;                      otherwise results may be truncated.  Items are added to the array                      as strings.  The array is never checked for duplicates, and it is                      not read beforehand.  Only the serial number is used to detect                      changes.\n\n_@param_ `serial` — >Serial number to identify last known map list change.  If -1, the                      the value will not be checked.  If the map list has since changed,                      the serial is updated (even if -1 was passed).  If there is an error                      finding a valid maplist, then the serial is set to -1.\n\n_@param_ `str` — >Config name, or \"default\" for the default map list.  Config names                      should be somewhat descriptive.  For example, the admin menu uses                      a config name of \"admin menu\".  The list names can be configured                      by users in addons/sourcemod/configs/maplists.cfg.\n\n_@param_ `flags` — >MAPLIST_FLAG flags.\n\n_@return_ On failure:                      INVALID_HANDLE is returned, the serial is set to -1, and the input                      array (if any) is left unchanged.                      On no change:                      INVALID_HANDLE is returned, the serial is unchanged, and the input                      array (if any) is left unchanged.                      On success:                      A valid array Handle is returned, containing at least one map string.                      If an array was passed, the return value is equal to the passed Array                      Handle.  If the passed array was not cleared, it will have grown by at                      least one item.  The serial number is updated to a positive number.\n\n_@error_ Invalid array Handle that is not INVALID_HANDLE.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadPackCell",
    "labelDetails": {
      "detail": "any",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native any ReadPackCell(Handle pack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a cell from a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@return_ Cell value.\n\n_@error_ Invalid handle, or bounds error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadPackFloat",
    "labelDetails": {
      "detail": "float",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native float ReadPackFloat(Handle pack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a float from a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@return_ Float value.\n\n_@error_ Invalid handle, or bounds error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadPackFunction",
    "labelDetails": {
      "detail": "Function",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native Function ReadPackFunction(Handle pack)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a function pointer from a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@return_ Function pointer.\n\n_@error_ Invalid handle, or bounds error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadPackString",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void ReadPackString(Handle pack, char[] buffer, int maxlen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads a string from a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlen` — >Maximum length of output string buffer.\n\n_@error_ Invalid handle, or bounds error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReadPlugin",
    "labelDetails": {
      "detail": "Handle",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native Handle ReadPlugin(Handle iter)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the current plugin in the iterator and advances the iterator.\n\n_@param_ `iter` — >Handle to the plugin iterator.\n\n_@return_ Current plugin the iterator is at, before                      the iterator is advanced.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RedrawClientVoteMenu",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RedrawMenuItem",
    "labelDetails": {
      "detail": "int",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RegAdminCmd",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void RegAdminCmd(const char[] cmd,\n     ConCmd callback,\n     int adminflags,\n     const char[] description=\"\",\n     const char[] group=\"\",\n     int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are  automatically checked before allowing it to continue.\r\n \n Admin commands are case sensitive from both the client and server.\n\n_@param_ `cmd` — >String containing command to register.\n\n_@param_ `callback` — >A function to use as a callback for when the command is invoked.\n\n_@param_ `adminflags` — >Administrative flags (bitstring) to use for permissions.\n\n_@param_ `description` — >Optional description to use for help.\n\n_@param_ `group` — >String containing the command group to use.  If empty,                      the plugin's filename will be used instead.\n\n_@param_ `flags` — >Optional console flags.\n\n_@error_ Command name is the same as an existing convar.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RegConsoleCmd",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void RegConsoleCmd(const char[] cmd, ConCmd callback, const char[] description=\"\", int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a console command, or hooks an already existing one.\r\n \n Console commands are case sensitive.  However, if the command already exists in the game,  a client may enter the command in any case.  SourceMod corrects for this automatically,  and you should only hook the \"real\" version of the command.\n\n_@param_ `cmd` — >Name of the command to hook or create.\n\n_@param_ `callback` — >A function to use as a callback for when the command is invoked.\n\n_@param_ `description` — >Optional description to use for command creation.\n\n_@param_ `flags` — >Optional flags to use for command creation.\n\n_@error_ Command name is the same as an existing convar.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RegPluginLibrary",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void RegPluginLibrary(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Registers a library name for identifying as a dependency to other plugins.\n\n_@param_ `name` — >Library name.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RegServerCmd",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void RegServerCmd(const char[] cmd, SrvCmd callback, const char[] description=\"\", int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a server-only console command, or hooks an already existing one.  \r\n \n Server commands are case sensitive.\n\n_@param_ `cmd` — >Name of the command to hook or create.\n\n_@param_ `callback` — >A function to use as a callback for when the command is invoked.\n\n_@param_ `description` — >Optional description to use for command creation.\n\n_@param_ `flags` — >Optional flags to use for command creation.\n\n_@error_ Command name is the same as an existing convar.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RegisterAuthIdentType",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void RegisterAuthIdentType(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Registers an authentication identity type.  You normally never need to call this except for very specific systems.\n\n_@param_ `name` — >Codename to use for your authentication type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveAdmin",
    "labelDetails": {
      "detail": "bool",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native bool RemoveAdmin(AdminId id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes an admin entry from the cache.\n\n_@note_ This will remove any bindings to a specific user.\n\n_@param_ `id` — >AdminId index to remove/invalidate.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveAllFromForward",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int RemoveAllFromForward(Handle fwd, Handle plugin)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes all instances of a plugin from a private forward's call list.\n\n_@note_ Functions will be removed automatically if their parent plugin is unloaded.\n\n_@param_ `fwd` — >Handle to private forward.\n\n_@param_ `plugin` — >Handle of the plugin to remove instances of.                      Pass INVALID_HANDLE to specify the calling plugin.\n\n_@return_ Number of functions removed from forward.\n\n_@error_ Invalid or corrupt private forward handle or invalid or corrupt plugin handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveAllMenuItems",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveBan",
    "labelDetails": {
      "detail": "bool",
      "description": "banning.inc"
    },
    "kind": 3,
    "detail": "native bool RemoveBan(const char[] identity, \n       int flags, \n       const char[] command=\"\", \n       any source=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a ban that was written to the server (either in memory or on disk).\n\n_@param_ `identity` — >String to unban (ip or authstring).\n\n_@param_ `flags` — >Flags (only IP and AUTHID are valid flags here).\n\n_@param_ `command` — >Command string to identify the source.  If this is left                       empty, then OnRemoveBan will not be called.\n\n_@param_ `source` — >A source value that could be interpreted as a player                       index of any sort (not actually checked by Core).\n\n_@return_ True on success, false on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveCommandListener",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void RemoveCommandListener(CommandListener callback, const char[] command=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a previously added command listener, in reverse order of being added.\n\n_@param_ `callback` — >Callback.\n\n_@param_ `command` — >Command, or if not specified, a global listener.                      The command is case insensitive.\n\n_@error_ Callback has no active listeners.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveDir",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool RemoveDir(const char[] path)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a directory.\n\n_@note_ On most Operating Systems you cannot remove a directory which has files inside it.\n\n_@param_ `path` — >Path to the directory.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveEdict",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void RemoveEdict(int edict)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes an edict from the world.\n\n_@param_ `edict` — >Index of the edict.\n\n_@error_ Invalid edict index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveEntity",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void RemoveEntity(int entity)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Marks an entity for deletion.\n\n_@param_ `entity` — >Index of the entity.\n\n_@error_ Invalid entity index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveFromArray",
    "labelDetails": {
      "detail": "void",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native void RemoveFromArray(Handle array, int index)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes an array index, shifting the entire array down from that position on.  For example, if item 8 of 10 is removed, the last 3 items will then be (6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array to remove at.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveFromForward",
    "labelDetails": {
      "detail": "bool",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native bool RemoveFromForward(Handle fwd, Handle plugin, Function func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a function from a private forward's call list.\n\n_@note_ Only removes one instance.\n\n_@note_ Functions will be removed automatically if their parent plugin is unloaded.\n\n_@param_ `fwd` — >Handle to private forward.\n\n_@param_ `plugin` — >Handle of the plugin that contains the function.                      Pass INVALID_HANDLE to specify the calling plugin.\n\n_@param_ `func` — >Function to remove from forward.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveFromTrie",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool RemoveFromTrie(Handle map, const char[] key)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a key entry from a Map.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@return_ True on success, false if the value was never set.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveGameLogHook",
    "labelDetails": {
      "detail": "void",
      "description": "logging.inc"
    },
    "kind": 3,
    "detail": "native void RemoveGameLogHook(GameLogHook hook)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a game log hook.\n\n_@param_ `hook` — >Hook function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveMenuItem",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveMultiTargetFilter",
    "labelDetails": {
      "detail": "void",
      "description": "commandfilters.inc"
    },
    "kind": 3,
    "detail": "native void RemoveMultiTargetFilter(const char[] pattern, MultiTargetFilter filter)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a multi-target filter function from `ProcessTargetString()`.\n\n_@param_ `pattern` — >Pattern to match (case sensitive).\n\n_@param_ `filter` — >Filter function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveServerTag",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void RemoveServerTag(const char[] tag)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a tag previously added by the calling plugin.\n\n_@param_ `tag` — >Tag string to remove.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RemoveUserFlags",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void RemoveUserFlags(int client, AdminFlag ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes flags from a client.  If the client is not an admin, this has no effect.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `...` — >Flags to remove from the client.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RenameFile",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool RenameFile(const char[] newpath, const char[] oldpath, bool use_valve_fs=false, const char[] valve_path_id=\"DEFAULT_WRITE_PATH\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Renames a file.\n\n_@param_ `newpath` — >New path to the file.\n\n_@param_ `oldpath` — >Path to the existing file.\n\n_@param_ `use_valve_fs` — >If true, the Valve file system will be used instead.                      This can be used to rename files in the game's                      Valve search paths, rather than directly in the gamedir.\n\n_@param_ `valve_path_id` — >If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.\n\n_@return_ True on success or use_valve_fs specified, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RenderFx",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 13,
    "detail": "enum RenderFx"
  },
  {
    "label": "RenderMode",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 13,
    "detail": "enum RenderMode"
  },
  {
    "label": "ReplaceString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int ReplaceString(char[] text, int maxlength, const char[] search, const char[] replace, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given a string, replaces all occurrences of a search string with a  replacement string.\n\n_@param_ `text` — >String to perform search and replacements on.\n\n_@param_ `maxlength` — >Maximum length of the string buffer.\n\n_@param_ `search` — >String to search for.\n\n_@param_ `replace` — >String to replace the search string with.\n\n_@param_ `caseSensitive` — >If true (default), search is case sensitive.\n\n_@return_ Number of replacements that were performed.\n\n_@error_ 'search' parameter is empty.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReplaceStringEx",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int ReplaceStringEx(char[] text, int maxlength, const char[] search, const char[] replace, int searchLen=-1, int replaceLen=-1, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Given a string, replaces the first occurrence of a search string with a  replacement string.\n\n_@param_ `text` — >String to perform search and replacements on.\n\n_@param_ `maxlength` — >Maximum length of the string buffer.\n\n_@param_ `search` — >String to search for.\n\n_@param_ `replace` — >String to replace the search string with.\n\n_@param_ `searchLen` — >If higher than -1, its value will be used instead of                      a `strlen()` call on the search parameter.\n\n_@param_ `replaceLen` — >If higher than -1, its value will be used instead of                      a `strlen()` call on the replace parameter.\n\n_@param_ `caseSensitive` — >If true (default), search is case sensitive.\n\n_@return_ Index into the buffer (relative to the start) from where                      the last replacement ended, or -1 if no replacements were                      made.\n\n_@error_ 'search' parameter is empty.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReplySource",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 13,
    "detail": "enum ReplySource",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reply sources for commands.\r\n "
    }
  },
  {
    "label": "ReplyToCommand",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ReplyToCommand(int client, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Replies to a message in a command.\r\n \n A client index of 0 will use `PrintToServer()`. If the command was from the console, `PrintToConsole()` is used. If the command was from chat, `PrintToChat()` is used.\n\n_@param_ `client` — >Client index, or 0 for server.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ If the client is not connected or invalid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ReplyToTargetError",
    "labelDetails": {
      "detail": "void",
      "description": "commandfilters.inc"
    },
    "kind": 3,
    "detail": "stock void ReplyToTargetError(int client, int reason)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Replies to a client with a given message describing a targetting  failure reason.\r\n \n Note: The translation phrases are found in common.phrases.txt.\n\n_@param_ `client` — >Client index, or 0 for server.\n\n_@param_ `reason` — >COMMAND_TARGET reason.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RequestFrame",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void RequestFrame(RequestFrameCallback Function, any data=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a single use Next Frame hook.\n\n_@param_ `Function` — >Function to call on the next frame.\n\n_@param_ `data` — >Value to be passed on the invocation of the Function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RequestFrameCallback",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 8,
    "detail": "typeset RequestFrameCallback",
    "documentation": {
      "kind": "markdown",
      "value": "\n Defines a RequestFrame Callback.\n\n_@param_ `data` — >Data passed to the RequestFrame native.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RequireFeature",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void RequireFeature(FeatureType type, const char[] name,\n                           const char[] fmt=\"\", any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Requires that a given feature is available. If it is not, `SetFailState()` is called with the given message.\n\n_@param_ `type` — >Feature type.\n\n_@param_ `name` — >Feature name.\n\n_@param_ `fmt` — >Message format string, or empty to use default.\n\n_@param_ `...` — >Message format parameters, if any.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ResetConVar",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void ResetConVar(Handle convar, bool replicate=false, bool notify=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Resets the console variable to its default value.\n \n Note: The replicate and notify params are only relevant for the original, Dark Messiah, and Episode 1 engines. Newer engines automatically do these things when the convar value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `replicate` — >If set to true, the new convar value will be set on all clients.                      This will only work if the convar has the FCVAR_REPLICATED flag                      and actually exists on clients.\n\n_@param_ `notify` — >If set to true, clients will be notified that the convar has changed.                      This will only work if the convar has the FCVAR_NOTIFY flag.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ResetPack",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void ResetPack(Handle pack, bool clear=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Resets the position in a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `clear` — >If true, clears the contained data.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ResizeArray",
    "labelDetails": {
      "detail": "void",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native void ResizeArray(Handle array, int newsize)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Resizes an array.  If the size is smaller than the current size, the array is truncated.  If the size is larger than the current size, the data at the additional indexes will not be initialized.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `newsize` — >New size.\n\n_@error_ Invalid Handle or out of memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RoundFloat",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "stock int RoundFloat(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Rounds a floating point number using the \"round to nearest\" algorithm.\n\n_@param_ `value` — >Floating point value to round.\n\n_@return_ The value rounded to the nearest integer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RoundToCeil",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native int RoundToCeil(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Rounds a float to the next highest integer value.\n\n_@param_ `value` — >Input value to be rounded.\n\n_@return_ Rounded value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RoundToFloor",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native int RoundToFloor(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Rounds a float to the next lowest integer value.\n\n_@param_ `value` — >Input value to be rounded.\n\n_@return_ Rounded value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RoundToNearest",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native int RoundToNearest(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Standard IEEE rounding.\n\n_@param_ `value` — >Input value to be rounded.\n\n_@return_ Rounded value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RoundToZero",
    "labelDetails": {
      "detail": "int",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native int RoundToZero(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Rounds a float to the closest integer to zero.\n\n_@param_ `value` — >Input value to be rounded.\n\n_@return_ Rounded value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "RunAdminCacheChecks",
    "labelDetails": {
      "detail": "bool",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native bool RunAdminCacheChecks(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin.\r\n \n Note: This function is based on the internal cache only.\n\n_@param_ `client` — >Client index.\n\n_@return_ True if access was changed, false if it did not.\n\n_@error_ Invalid client index or client not in-game AND authorized.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SEEK_CUR",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define SEEK_CUR 1",
    "documentation": {
      "kind": "markdown",
      "value": " Seek from current position. "
    },
    "tags": []
  },
  {
    "label": "SEEK_END",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define SEEK_END 2",
    "documentation": {
      "kind": "markdown",
      "value": " Seek from end position. "
    },
    "tags": []
  },
  {
    "label": "SEEK_SET",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define SEEK_SET 0",
    "documentation": {
      "kind": "markdown",
      "value": " Seek from start. "
    },
    "tags": []
  },
  {
    "label": "SMCError",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 13,
    "detail": "enum SMCError",
    "documentation": {
      "kind": "markdown",
      "value": "\n Parse error codes.\r\n "
    }
  },
  {
    "label": "SMCError_Custom",
    "labelDetails": {
      "description": "SMCError::SMCError_Custom"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidProperty1",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidProperty1"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidSection1",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidSection1"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidSection2",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidSection2"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidSection3",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidSection3"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidSection4",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidSection4"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidSection5",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidSection5"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_InvalidTokens",
    "labelDetails": {
      "description": "SMCError::SMCError_InvalidTokens"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_Okay",
    "labelDetails": {
      "description": "SMCError::SMCError_Okay"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_StreamError",
    "labelDetails": {
      "description": "SMCError::SMCError_StreamError"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_StreamOpen",
    "labelDetails": {
      "description": "SMCError::SMCError_StreamOpen"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCError_TokenOverflow",
    "labelDetails": {
      "description": "SMCError::SMCError_TokenOverflow"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCParse_Continue",
    "labelDetails": {
      "description": "SMCResult::SMCParse_Continue"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCParse_Halt",
    "labelDetails": {
      "description": "SMCResult::SMCParse_Halt"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCParse_HaltFail",
    "labelDetails": {
      "description": "SMCResult::SMCParse_HaltFail"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SMCParser",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 7,
    "detail": "methodmap SMCParser",
    "documentation": {
      "kind": "markdown",
      "value": "An SMCParser is a callback-driven parser for SourceMod configuration files.SMC files are similar to Valve KeyValues format, with two key differences:(1) SMC cannot handle single-item entries (that is, a key with no value).(2) SMC files can have multi-line comment blocks, whereas KeyValues cannot."
    }
  },
  {
    "label": "SMCResult",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 13,
    "detail": "enum SMCResult",
    "documentation": {
      "kind": "markdown",
      "value": "\n Parse result directive.\r\n "
    }
  },
  {
    "label": "SMC_CreateParser",
    "labelDetails": {
      "detail": "SMCParser",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native SMCParser SMC_CreateParser()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new SMC file format parser.  This is used to set parse hooks.\n\n_@return_ A new Handle to an SMC Parse structure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_EndSection",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 8,
    "detail": "typedef SMC_EndSection = function SMCResult (SMCParser smc);",
    "documentation": {
      "kind": "markdown",
      "value": " Called when the parser finds the end of the current section.\n\n_@param_ `smc` — >The SMCParser.\n\n_@return_ An SMCResult action to take.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_GetErrorString",
    "labelDetails": {
      "detail": "bool",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native bool SMC_GetErrorString(SMCError error, char[] buffer, int buf_max)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Gets an error string for an SMCError code.\n\n_@note_ SMCError_Okay returns false.\n\n_@note_ SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false.\n\n_@param_ `error` — >The SMCParseError code.\n\n_@param_ `buffer` — >A string buffer for the error (contents undefined on failure).\n\n_@param_ `buf_max` — >The maximum size of the buffer.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_KeyValue",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 8,
    "detail": "typedef SMC_KeyValue = function SMCResult (SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the parser finds a new key/value pair.\r\n \n Note: Enclosing quotes are always stripped.\n\n_@param_ `smc` — >The SMCParser.\n\n_@param_ `key` — >String containing key name.\n\n_@param_ `value` — >String containing value name.\n\n_@param_ `key_quotes` — >Whether or not the key was enclosed in quotes.\n\n_@param_ `value_quotes` — >Whether or not the value was enclosed in quotes.\n\n_@return_ An SMCResult action to take.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_NewSection",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 8,
    "detail": "typedef SMC_NewSection = function SMCResult (SMCParser smc, const char[] name, bool opt_quotes);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when the parser is entering a new section or sub-section.\r\n \n Note: Enclosing quotes are always stripped.\n\n_@param_ `smc` — >The SMC Parser.\n\n_@param_ `name` — >String containing section name.\n\n_@param_ `opt_quotes` — >True if the section name was quote-enclosed in the file.\n\n_@return_ An SMCResult action to take.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_ParseEnd",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 8,
    "detail": "typedef SMC_ParseEnd = function void (SMCParser smc, bool halted, bool failed);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when parsing is halted.\n\n_@param_ `smc` — >The SMCParser.\n\n_@param_ `halted` — >True if abnormally halted, false otherwise.\n\n_@param_ `failed` — >True if parsing failed, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_ParseFile",
    "labelDetails": {
      "detail": "SMCError",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native SMCError SMC_ParseFile(Handle smc, const char[] file, int &line=0, int &col=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Parses an SMC file.\n\n_@param_ `smc` — >A Handle to an SMC Parse structure.\n\n_@param_ `file` — >A string containing the file path.\n\n_@param_ `line` — >An optional by reference cell to store the last line number read.\n\n_@param_ `col` — >An optional by reference cell to store the last column number read.\n\n_@return_ An SMCParseError result.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_ParseStart",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 8,
    "detail": "typedef SMC_ParseStart = function void (SMCParser smc);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when parsing is started.\n\n_@param_ `smc` — >The SMC Parse Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_RawLine",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 8,
    "detail": "typedef SMC_RawLine = function SMCResult (SMCParser smc, const char[] line, int lineno);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Callback for whenever a new line of text is about to be parsed.\n\n_@param_ `smc` — >The SMCParser.\n\n_@param_ `line` — >A string containing the raw line from the file.\n\n_@param_ `lineno` — >The line number it occurs on.\n\n_@return_ An SMCResult action to take.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_SetParseEnd",
    "labelDetails": {
      "detail": "void",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native void SMC_SetParseEnd(Handle smc, SMC_ParseEnd func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the SMC_ParseEnd of a parse handle.\n\n_@param_ `smc` — >Handle to an SMC Parse.\n\n_@param_ `func` — >SMC_ParseEnd function.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_SetParseStart",
    "labelDetails": {
      "detail": "void",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native void SMC_SetParseStart(Handle smc, SMC_ParseStart func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the SMC_ParseStart function of a parse Handle.\n\n_@param_ `smc` — >Handle to an SMC Parse.\n\n_@param_ `func` — >SMC_ParseStart function.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_SetRawLine",
    "labelDetails": {
      "detail": "void",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native void SMC_SetRawLine(Handle smc, SMC_RawLine func)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a raw line reader on an SMC parser Handle.\n\n_@param_ `smc` — >Handle to an SMC Parse.\n\n_@param_ `func` — >SMC_RawLine function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SMC_SetReaders",
    "labelDetails": {
      "detail": "void",
      "description": "textparse.inc"
    },
    "kind": 3,
    "detail": "native void SMC_SetReaders(Handle smc, SMC_NewSection ns, SMC_KeyValue kv, SMC_EndSection es)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the three main reader functions.\n\n_@param_ `smc` — >An SMC parse Handle.\n\n_@param_ `ns` — >An SMC_NewSection function pointer.\n\n_@param_ `kv` — >An SMC_KeyValue function pointer.\n\n_@param_ `es` — >An SMC_EndSection function pointer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SM_PARAM_COPYBACK",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SM_PARAM_COPYBACK (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Copy an array/reference back after call "
    },
    "tags": []
  },
  {
    "label": "SM_PARAM_STRING_BINARY",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SM_PARAM_STRING_BINARY (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " Treat the string as a binary string "
    },
    "tags": []
  },
  {
    "label": "SM_PARAM_STRING_COPY",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SM_PARAM_STRING_COPY (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " String should be copied into the plugin "
    },
    "tags": []
  },
  {
    "label": "SM_PARAM_STRING_UTF8",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SM_PARAM_STRING_UTF8 (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " String should be UTF-8 handled "
    },
    "tags": []
  },
  {
    "label": "SM_REPLY_TO_CHAT",
    "labelDetails": {
      "description": "ReplySource::SM_REPLY_TO_CHAT"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SM_REPLY_TO_CONSOLE",
    "labelDetails": {
      "description": "ReplySource::SM_REPLY_TO_CONSOLE"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SOURCEMOD_PLUGINAPI_VERSION",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "SOURCEMOD_VERSION",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_VERSION \"1.11.0.6863\"",
    "tags": []
  },
  {
    "label": "SOURCEMOD_V_CSET",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_V_CSET \"01203a5a\"",
    "tags": []
  },
  {
    "label": "SOURCEMOD_V_MAJOR",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_V_MAJOR 1",
    "tags": []
  },
  {
    "label": "SOURCEMOD_V_MINOR",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_V_MINOR 11",
    "tags": []
  },
  {
    "label": "SOURCEMOD_V_RELEASE",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_V_RELEASE 0",
    "tags": []
  },
  {
    "label": "SOURCEMOD_V_REV",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_V_REV 6863",
    "tags": []
  },
  {
    "label": "SOURCEMOD_V_TAG",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define SOURCEMOD_V_TAG \"\"",
    "tags": []
  },
  {
    "label": "SOURCE_SDK_ALIENSWARM",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_ALIENSWARM 60",
    "documentation": {
      "kind": "markdown",
      "value": " SDK+Engine released after Alien Swarm "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_BLOODYGOODTIME",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_BLOODYGOODTIME 32",
    "documentation": {
      "kind": "markdown",
      "value": " Modified version of ep2 engine used by Bloody Good Time (no SDK) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_CSGO",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_CSGO 80",
    "documentation": {
      "kind": "markdown",
      "value": " Engine released after CS:GO (no SDK yet) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_CSS",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_CSS 34",
    "documentation": {
      "kind": "markdown",
      "value": " Sometime-older version of Source 2009 SDK+Engine, used for Counter-Strike: Source "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_DARKMESSIAH",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_DARKMESSIAH 15",
    "documentation": {
      "kind": "markdown",
      "value": " Modified version of original engine used by Dark Messiah (no SDK) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_DOTA",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_DOTA 90",
    "documentation": {
      "kind": "markdown",
      "value": " Engine released after Dota 2 (no SDK) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_EPISODE1",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_EPISODE1 20",
    "documentation": {
      "kind": "markdown",
      "value": " SDK+Engine released after Episode 1 "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_EPISODE2",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_EPISODE2 30",
    "documentation": {
      "kind": "markdown",
      "value": " SDK+Engine released after Episode 2/Orange Box "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_EPISODE2VALVE",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_EPISODE2VALVE 35",
    "documentation": {
      "kind": "markdown",
      "value": " SDK+Engine released after Episode 2/Orange Box, \"Source 2009\" or \"Source MP\" "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_EYE",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_EYE 33",
    "documentation": {
      "kind": "markdown",
      "value": " Modified version of ep2 engine used by E.Y.E Divine Cybermancy (no SDK) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_LEFT4DEAD",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_LEFT4DEAD 40",
    "documentation": {
      "kind": "markdown",
      "value": " Engine released after Left 4 Dead (no SDK yet) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_LEFT4DEAD2",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_LEFT4DEAD2 50",
    "documentation": {
      "kind": "markdown",
      "value": " Engine released after Left 4 Dead 2 (no SDK yet) "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_ORIGINAL",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_ORIGINAL 10",
    "documentation": {
      "kind": "markdown",
      "value": " Original Source engine (still used by \"The Ship\") "
    },
    "tags": []
  },
  {
    "label": "SOURCE_SDK_UNKNOWN",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define SOURCE_SDK_UNKNOWN 0",
    "documentation": {
      "kind": "markdown",
      "value": " Could not determine the engine version "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_ABORTED",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_ABORTED 25",
    "documentation": {
      "kind": "markdown",
      "value": " Function call was aborted "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_ARRAY_BOUNDS",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_ARRAY_BOUNDS 15",
    "documentation": {
      "kind": "markdown",
      "value": " Array index is out of bounds "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_ARRAY_TOO_BIG",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_ARRAY_TOO_BIG 19",
    "documentation": {
      "kind": "markdown",
      "value": " A dynamic array is too big "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_DECOMPRESSOR",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_DECOMPRESSOR 2",
    "documentation": {
      "kind": "markdown",
      "value": " A decompressor was not found "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_DIVIDE_BY_ZERO",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_DIVIDE_BY_ZERO 14",
    "documentation": {
      "kind": "markdown",
      "value": " Division by zero "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_FILE_FORMAT",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_FILE_FORMAT 1",
    "documentation": {
      "kind": "markdown",
      "value": " File format unrecognized "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_HEAPLEAK",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_HEAPLEAK 18",
    "documentation": {
      "kind": "markdown",
      "value": " A native leaked an item on the heap "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_HEAPLOW",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_HEAPLOW 3",
    "documentation": {
      "kind": "markdown",
      "value": " Not enough space left on the heap "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_HEAPMIN",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_HEAPMIN 13",
    "documentation": {
      "kind": "markdown",
      "value": " Heap went beyond its minimum value "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_INDEX",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_INDEX 7",
    "documentation": {
      "kind": "markdown",
      "value": " Invalid index parameter "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_INSTRUCTION_PARAM",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_INSTRUCTION_PARAM 16",
    "documentation": {
      "kind": "markdown",
      "value": " Instruction had an invalid parameter "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_INVALID_ADDRESS",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_INVALID_ADDRESS 5",
    "documentation": {
      "kind": "markdown",
      "value": " A memory address was not valid "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_INVALID_INSTRUCTION",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_INVALID_INSTRUCTION 10",
    "documentation": {
      "kind": "markdown",
      "value": " Invalid instruction was encountered "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_INVALID_NATIVE",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_INVALID_NATIVE 21",
    "documentation": {
      "kind": "markdown",
      "value": " Native was pending or invalid "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_MEMACCESS",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_MEMACCESS 11",
    "documentation": {
      "kind": "markdown",
      "value": " Invalid memory access "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_NATIVE",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_NATIVE 23",
    "documentation": {
      "kind": "markdown",
      "value": " Error originates from a native "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_NONE",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_NONE 0",
    "documentation": {
      "kind": "markdown",
      "value": " No error occurred "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_NOTDEBUGGING",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_NOTDEBUGGING 9",
    "documentation": {
      "kind": "markdown",
      "value": " Debug mode was not on or debug section not found "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_NOT_FOUND",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_NOT_FOUND 6",
    "documentation": {
      "kind": "markdown",
      "value": " The object in question was not found "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_NOT_RUNNABLE",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_NOT_RUNNABLE 24",
    "documentation": {
      "kind": "markdown",
      "value": " Function or plugin is not runnable "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_PARAM",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_PARAM 4",
    "documentation": {
      "kind": "markdown",
      "value": " Invalid parameter or parameter type "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_PARAMS_MAX",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_PARAMS_MAX 22",
    "documentation": {
      "kind": "markdown",
      "value": " Maximum number of parameters reached "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_STACKLEAK",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_STACKLEAK 17",
    "documentation": {
      "kind": "markdown",
      "value": " A native leaked an item on the stack "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_STACKLOW",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_STACKLOW 8",
    "documentation": {
      "kind": "markdown",
      "value": " Not enough space left on the stack "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_STACKMIN",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_STACKMIN 12",
    "documentation": {
      "kind": "markdown",
      "value": " Stack went beyond its minimum value "
    },
    "tags": []
  },
  {
    "label": "SP_ERROR_TRACKER_BOUNDS",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_ERROR_TRACKER_BOUNDS 20",
    "documentation": {
      "kind": "markdown",
      "value": " Tracker stack is out of bounds "
    },
    "tags": []
  },
  {
    "label": "SP_PARAMFLAG_BYREF",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define SP_PARAMFLAG_BYREF (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Internal use only. "
    },
    "tags": []
  },
  {
    "label": "SQLConnectCallback",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 8,
    "detail": "typedef SQLConnectCallback = function void (Database db, const char[] error, any data);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Callback for receiving asynchronous database connections.\n\n_@param_ `db` — >Handle to the database connection.\n\n_@param_ `error` — >Error string if there was an error.  The error could be                       empty even if an error condition exists, so it is important                       to check the actual Handle value instead.\n\n_@param_ `data` — >Data passed in via the original threaded invocation.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQLQueryCallback",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 8,
    "detail": "typedef SQLQueryCallback = function void (Database db, DBResultSet results, const char[] error, any data);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Callback for receiving asynchronous database query results.\n\n_@param_ `db` — >Cloned handle to the database connection.\n\n_@param_ `results` — >Result object, or null on failure.\n\n_@param_ `error` — >Error string if there was an error.  The error could be                       empty even if an error condition exists, so it is important                       to check the actual results value instead.\n\n_@param_ `data` — >Data passed in via the original threaded invocation.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQLTCallback",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 8,
    "detail": "typedef SQLTCallback = function void (Handle owner, Handle hndl, const char[] error, any data);",
    "documentation": {
      "kind": "markdown",
      "value": "\n General callback for threaded SQL stuff.\n\n_@param_ `owner` — >Parent object of the Handle (or INVALID_HANDLE if none).\n\n_@param_ `hndl` — >Handle to the child object (or INVALID_HANDLE if none).\n\n_@param_ `error` — >Error string if there was an error.  The error could be                       empty even if an error condition exists, so it is important                       to check the actual Handle value instead.\n\n_@param_ `data` — >Data passed in via the original threaded invocation.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQLTxnFailure",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 8,
    "detail": "typedef SQLTxnFailure = function void (Database db, any data, int numQueries, const char[] error, int failIndex, any[] queryData);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Callback for a failed transaction.\n\n_@param_ `db` — >Database handle.\n\n_@param_ `data` — >Data value passed to `SQL_ExecuteTransaction()`.\n\n_@param_ `numQueries` — >Number of queries executed in the transaction.\n\n_@param_ `error` — >Error message.\n\n_@param_ `failIndex` — >Index of the query that failed, or -1 if something else.\n\n_@param_ `queryData` — >An array of each data value passed to `SQL_AddQuery()`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQLTxnSuccess",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 8,
    "detail": "typeset SQLTxnSuccess",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_AddQuery",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_AddQuery(Transaction txn, const char[] query, any data=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds a query to a transaction object.\n\n_@param_ `txn` — >A transaction handle.\n\n_@param_ `query` — >Query string.\n\n_@param_ `data` — >Extra data value to pass to the final callback.\n\n_@return_ The index of the query in the transaction's query list.\n\n_@error_ Invalid transaction handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_BindParamFloat",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_BindParamFloat(Handle statement, int param, float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Binds a parameter in a prepared statement to a given float value.\n\n_@param_ `statement` — >A statement (prepared query) Handle.\n\n_@param_ `param` — >The parameter index (starting from 0).\n\n_@param_ `value` — >The float number to bind.\n\n_@error_ Invalid statement Handle or parameter index, or                      SQL error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_BindParamInt",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_BindParamInt(Handle statement, int param, int number, bool signed=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Binds a parameter in a prepared statement to a given integer value.\n\n_@param_ `statement` — >A statement (prepared query) Handle.\n\n_@param_ `param` — >The parameter index (starting from 0).\n\n_@param_ `number` — >The number to bind.\n\n_@param_ `signed` — >True to bind the number as signed, false to                       bind it as unsigned.\n\n_@error_ Invalid statement Handle or parameter index, or                      SQL error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_BindParamString",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_BindParamString(Handle statement, int param, const char[] value, bool copy)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Binds a parameter in a prepared statement to a given string value.\n\n_@param_ `statement` — >A statement (prepared query) Handle.\n\n_@param_ `param` — >The parameter index (starting from 0).\n\n_@param_ `value` — >The string to bind.\n\n_@param_ `copy` — >Whether or not SourceMod should copy the value                      locally if necessary.  If the string contents                      won't change before calling `SQL_Execute()`, this                      can be set to false for optimization.\n\n_@error_ Invalid statement Handle or parameter index, or                      SQL error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_CheckConfig",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_CheckConfig(const char[] name)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if a named configuration is present in databases.cfg.\n\n_@param_ `name` — >Configuration name.\n\n_@return_ True if it exists, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_Connect",
    "labelDetails": {
      "detail": "Database",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native Database SQL_Connect(const char[] confname, bool persistent, char[] error, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates an SQL connection from a named configuration.\n\n_@param_ `confname` — >Named configuration.\n\n_@param_ `persistent` — >True to re-use a previous persistent connection if                      possible, false otherwise.\n\n_@param_ `error` — >Error buffer.\n\n_@param_ `maxlength` — >Maximum length of the error buffer.\n\n_@return_ A database connection Handle, or INVALID_HANDLE on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_ConnectCustom",
    "labelDetails": {
      "detail": "Database",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native Database SQL_ConnectCustom(Handle keyvalues,\n          char[] error,\n          int maxlength,\n          bool persistent)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Connects to a database using key value pairs containing the database info. The key/value pairs should match what would be in databases.cfg.\r\n \n I.e. \"driver\" should be \"default\" or a driver name (or omitted for  the default).  For SQLite, only the \"database\" parameter is needed in addition. For drivers which require external connections, more of the parameters may be  needed.\r\n \n In general it is discouraged to use this function.  Connections should go through  databases.cfg for greatest flexibility on behalf of users.\n\n_@param_ `keyvalues` — >Key/value pairs from a KeyValues handle, describing the connection.\n\n_@param_ `error` — >Error buffer.\n\n_@param_ `maxlength` — >Maximum length of the error buffer.\n\n_@param_ `persistent` — >True to re-use a previous persistent connection if                      possible, false otherwise.\n\n_@return_ A database connection Handle, or INVALID_HANDLE on failure.                      On failure the error buffer will be filled with a message.\n\n_@error_ Invalid KeyValues handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_ConnectEx",
    "labelDetails": {
      "detail": "Handle",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native Handle SQL_ConnectEx(Handle driver, \n       const char[] host,\n       const char[] user, \n       const char[] pass,\n       const char[] database,\n       char[] error,\n       int maxlength,\n       bool persistent=true,\n       int port=0,\n       int maxTimeout=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is deprecated.  Use SQL_ConnectCustom or SQLite_UseDatabase instead.\n\n_@deprecated_ "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "SQL_CreateTransaction",
    "labelDetails": {
      "detail": "Transaction",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native Transaction SQL_CreateTransaction()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new transaction object. A transaction object is a list of queries that can be sent to the database thread and executed as a single transaction.\n\n_@return_ A transaction handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_DefConnect",
    "labelDetails": {
      "detail": "Database",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "stock Database SQL_DefConnect(char[] error, int maxlength, bool persistent=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a default SQL connection.\n\n_@param_ `error` — >Error buffer.\n\n_@param_ `maxlength` — >Maximum length of the error buffer.\n\n_@param_ `persistent` — >True to re-use a previous persistent connection                      if possible, false otherwise.\n\n_@return_ A database connection Handle, or INVALID_HANDLE on failure.                      On failure the error buffer will be filled with a message.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_EscapeString",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_EscapeString(Handle database, \n        const char[] string, \n        char[] buffer, \n        int maxlength, \n        int &written=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Escapes a database string for literal insertion.  This is not needed for binding strings in prepared statements.  \r\n \n Generally, database strings are inserted into queries enclosed in  single quotes (').  If user input has a single quote in it, the  quote needs to be escaped.  This function ensures that any unsafe  characters are safely escaped according to the database engine and  the database's character set.\r\n \n NOTE: SourceMod only guarantees properly escaped strings when the query encloses the string in single quotes. While drivers tend to allow double quotes (\") instead, the string may be not be escaped (for example, on SQLite)!\n\n_@param_ `database` — >A database Handle.\n\n_@param_ `string` — >String to quote.\n\n_@param_ `buffer` — >Buffer to store quoted string in.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@param_ `written` — >Optionally returns the number of bytes written.\n\n_@return_ True on success, false if buffer is not big enough.                      The buffer must be at least 2*`strlen(string)`+1.\n\n_@error_ Invalid database or statement Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_Execute",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_Execute(Handle statement)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a prepared statement.  All parameters must be bound beforehand.\n\n_@param_ `statement` — >A statement (prepared query) Handle.\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid statement Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_ExecuteTransaction",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_ExecuteTransaction(\n  Handle db,\n  Transaction txn,\n  SQLTxnSuccess onSuccess = INVALID_FUNCTION,\n  SQLTxnFailure onError = INVALID_FUNCTION,\n  any data=0,\n  DBPriority priority=DBPrio_Normal)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sends a transaction to the database thread. The transaction handle is automatically closed. When the transaction completes, the optional callback is invoked.\n\n_@param_ `db` — >A database handle.\n\n_@param_ `txn` — >A transaction handle.\n\n_@param_ `onSuccess` — >An optional callback to receive a successful transaction.\n\n_@param_ `onError` — >An optional callback to receive an error message.\n\n_@param_ `data` — >An optional value to pass to callbacks.\n\n_@param_ `prio` — >Priority queue to use.\n\n_@error_ An invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FastQuery",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_FastQuery(Handle database, const char[] query, int len=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a query and ignores the result set.\n\n_@param_ `database` — >A database Handle.\n\n_@param_ `query` — >Query string.\n\n_@param_ `len` — >Optional parameter to specify the query length, in                       bytes.  This can be used to send binary queries that                       have a premature terminator.\n\n_@return_ True if query succeeded, false otherwise.  Use                      SQL_GetError to find the last error.\n\n_@error_ Invalid database Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FetchFloat",
    "labelDetails": {
      "detail": "float",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native float SQL_FetchFloat(Handle query, int field, DBResult &result=DBVal_Error)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Fetches a float from a field in the current row of a result set.   If the result is NULL, a value of 0.0 will be returned.  A NULL  check can be done with the result parameter, or `SQL_IsFieldNull()`.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `field` — >The field index (starting from 0).\n\n_@param_ `result` — >Optional variable to store the status of the return value.\n\n_@return_ A float value.\n\n_@error_ Invalid query Handle or field index, invalid                      type conversion requested from the database,                      or no current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FetchInt",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_FetchInt(Handle query, int field, DBResult &result=DBVal_Error)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Fetches an integer from a field in the current row of a result set.   If the result is NULL, a value of 0 will be returned.  A NULL  check can be done with the result parameter, or `SQL_IsFieldNull()`.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `field` — >The field index (starting from 0).\n\n_@param_ `result` — >Optional variable to store the status of the return value.\n\n_@return_ An integer value.\n\n_@error_ Invalid query Handle or field index, invalid                      type conversion requested from the database,                      or no current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FetchMoreResults",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_FetchMoreResults(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Advances to the next set of results.\r\n \n In some SQL implementations, multiple result sets can exist on one query.   This is possible in MySQL with simple queries when executing a CALL  query.  If this is the case, all result sets must be processed before another query is made.\n\n_@param_ `query` — >A query Handle.\n\n_@return_ True if there was another result set, false otherwise.\n\n_@error_ Invalid query Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FetchRow",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_FetchRow(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Fetches a row from the current result set.  This must be  successfully called before any results are fetched.\r\n \n If this function fails, `SQL_MoreRows()` can be used to tell if there was an error or the result set is finished.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@return_ True if a row was fetched, false otherwise.\n\n_@error_ Invalid query Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FetchSize",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_FetchSize(Handle query, int field)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the length of a field's data in the current row of a result set.  This only needs to be called for strings to determine how many bytes to use.  Note that the return value does not include the null terminator.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `field` — >The field index (starting from 0).\n\n_@return_ Number of bytes for the field's data size.\n\n_@error_ Invalid query Handle or field index or no                      current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FetchString",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_FetchString(Handle query, int field, char[] buffer, int maxlength, DBResult &result=DBVal_Error)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Fetches a string from a field in the current row of a result set.   If the result is NULL, an empty string will be returned.  A NULL  check can be done with the result parameter, or `SQL_IsFieldNull()`.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `field` — >The field index (starting from 0).\n\n_@param_ `buffer` — >String buffer.\n\n_@param_ `maxlength` — >Maximum size of the string buffer.\n\n_@param_ `result` — >Optional variable to store the status of the return value.\n\n_@return_ Number of bytes written.\n\n_@error_ Invalid query Handle or field index, invalid                      type conversion requested from the database,                      or no current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FieldNameToNum",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_FieldNameToNum(Handle query, const char[] name, int &field)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a field index by name.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `name` — >Name of the field (case sensitive).\n\n_@param_ `field` — >Variable to store field index in.\n\n_@return_ True if found, false if not found.\n\n_@error_ Invalid query Handle or no current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FieldNumToName",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_FieldNumToName(Handle query, int field, char[] name, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the name of a field by index.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `field` — >Field number (starting from 0).\n\n_@param_ `name` — >Name buffer.\n\n_@param_ `maxlength` — >Maximum length of the name buffer.\n\n_@error_ Invalid query Handle, invalid field index, or                      no current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_FormatQuery",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_FormatQuery(Handle database, char[] buffer, int maxlength, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Formats a string according to the SourceMod format rules (see documentation). All format specifiers are escaped (see SQL_EscapeString) unless the '!' flag is used.\n\n_@param_ `database` — >A database Handle.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@return_ Number of cells written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetAffectedRows",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_GetAffectedRows(Handle hndl)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of affected rows from the last query.\n\n_@param_ `hndl` — >A database OR statement Handle.\n\n_@return_ Number of rows affected by the last query.\n\n_@error_ Invalid database or statement Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetDriver",
    "labelDetails": {
      "detail": "DBDriver",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native DBDriver SQL_GetDriver(const char[] name=\"\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns a driver Handle from a name string.\r\n \n If the driver is not found, SourceMod will attempt to load an extension named dbi.\\<name\\>.ext.[dll|so].\n\n_@param_ `name` — >Driver identification string, or an empty                      string to return the default driver.\n\n_@return_ Driver Handle, or INVALID_HANDLE on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetDriverIdent",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_GetDriverIdent(Handle driver, char[] ident, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a driver's identification string.\r\n \n Example: \"mysql\", \"sqlite\"\n\n_@param_ `driver` — >Driver Handle, or INVALID_HANDLE for the default driver.\n\n_@param_ `ident` — >Identification string buffer.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@error_ Invalid Handle other than INVALID_HANDLE.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetDriverProduct",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_GetDriverProduct(Handle driver, char[] product, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves a driver's product string.\r\n \n Example: \"MySQL\", \"SQLite\"\n\n_@param_ `driver` — >Driver Handle, or INVALID_HANDLE for the default driver.\n\n_@param_ `product` — >Product string buffer.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@error_ Invalid Handle other than INVALID_HANDLE.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetError",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_GetError(Handle hndl, char[] error, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the error reported by the last query.\n\n_@param_ `hndl` — >A database, query, OR statement Handle.\n\n_@param_ `error` — >Error buffer.\n\n_@param_ `maxlength` — >Maximum length of the buffer.\n\n_@return_ True if there was an error, false otherwise.\n\n_@error_ Invalid database, query, or statement Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetFieldCount",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_GetFieldCount(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the number of fields in the last result set.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@return_ Number of fields in the current result set.\n\n_@error_ Invalid query Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetInsertId",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_GetInsertId(Handle hndl)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the last query's insertion id.\n\n_@param_ `hndl` — >A database, query, OR statement Handle.\n\n_@return_ Last query's insertion id.\n\n_@error_ Invalid database, query, or statement Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_GetRowCount",
    "labelDetails": {
      "detail": "int",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native int SQL_GetRowCount(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Retrieves the number of rows in the last result set.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@return_ Number of rows in the current result set.\n\n_@error_ Invalid query Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_HasResultSet",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_HasResultSet(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether or not a result set exists.  This will return true even if 0 results were returned, but false on queries like UPDATE, INSERT, or DELETE.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@return_ True if there is a result set, false otherwise.\n\n_@error_ Invalid query Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_IsFieldNull",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_IsFieldNull(Handle query, int field)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether a field's data in the current row of a result set is  NULL or not.  NULL is an SQL type which means \"no data.\"\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@param_ `field` — >The field index (starting from 0).\n\n_@return_ True if data is NULL, false otherwise.\n\n_@error_ Invalid query Handle or field index, or no                      current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_IsSameConnection",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_IsSameConnection(Handle hndl1, Handle hndl2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Tells whether two database handles both point to the same database  connection.\n\n_@param_ `hndl1` — >First database Handle.\n\n_@param_ `hndl2` — >Second database Handle.\n\n_@return_ True if the Handles point to the same                       connection, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_LockDatabase",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_LockDatabase(Handle database)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Locks a database so threading operations will not interrupt.\r\n \n If you are using a database Handle for both threading and non-threading, this MUST be called before doing any set of non-threading DB operations. Otherwise you risk corrupting the database driver's memory or network connection.\r\n \n Leaving a lock on a database and then executing a threaded query results in a dead lock! Make sure to call `SQL_UnlockDatabase()`!\r\n \n If the lock cannot be acquired, the main thread will pause until the  threaded operation has concluded.\n\n_@param_ `database` — >A database Handle.\n\n_@error_ Invalid database Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_MoreRows",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_MoreRows(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns if there are more rows.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@return_ True if there are more rows, false otherwise.\n\n_@error_ Invalid query Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_PrepareQuery",
    "labelDetails": {
      "detail": "DBStatement",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native DBStatement SQL_PrepareQuery(Handle database, const char[] query, char[] error, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Creates a new prepared statement query.  Prepared statements can be executed any number of times.  They can also have placeholder parameters, similar to variables, which can be bound safely and securely (for example, you do not need to quote bound strings).\r\n \n Statement handles will work in any function that accepts a Query handle.\n\n_@param_ `database` — >A database Handle.\n\n_@param_ `query` — >Query string.\n\n_@param_ `error` — >Error buffer.\n\n_@param_ `maxlength` — >Maximum size of the error buffer.\n\n_@return_ A new statement Handle on success, INVALID_HANDLE                      otherwise.  The Handle must be freed with `CloseHandle()`.\n\n_@error_ Invalid database Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_Query",
    "labelDetails": {
      "detail": "DBResultSet",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native DBResultSet SQL_Query(Handle database, const char[] query, int len=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a simple query and returns a new query Handle for receiving the results.\n\n_@param_ `database` — >A database Handle.\n\n_@param_ `query` — >Query string.\n\n_@param_ `len` — >Optional parameter to specify the query length, in                       bytes.  This can be used to send binary queries that                       have a premature terminator.\n\n_@return_ A new Query Handle on success, INVALID_HANDLE                      otherwise.  The Handle must be freed with `CloseHandle()`.\n\n_@error_ Invalid database Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_QuoteString",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "stock bool SQL_QuoteString(Handle database,\n         const char[] string,\n         char[] buffer,\n         int maxlength,\n         int &written=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is deprecated.  Use SQL_EscapeString instead.\n\n_@deprecated_ "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "SQL_ReadDriver",
    "labelDetails": {
      "detail": "DBDriver",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native DBDriver SQL_ReadDriver(Handle database, char[] ident=\"\", int ident_length=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Reads the driver of an opened database.\n\n_@param_ `database` — >Database Handle.\n\n_@param_ `ident` — >Option buffer to store the identification string.\n\n_@param_ `ident_length` — >Maximum length of the buffer.\n\n_@return_ Driver Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_Rewind",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_Rewind(Handle query)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Rewinds a result set back to the first result.\n\n_@param_ `query` — >A query (or statement) Handle.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid query Handle or no current result set.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_SetCharset",
    "labelDetails": {
      "detail": "bool",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native bool SQL_SetCharset(Handle database, const char[] charset)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the character set of the current connection.  Like SET NAMES .. in mysql, but stays after connection problems.\r\n \n Example: \"utf8\", \"latin1\"\n\n_@param_ `database` — >Database Handle.\n\n_@param_ `charset` — >The character set string to change to.\n\n_@return_ True, if character set was changed, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_TConnect",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_TConnect(SQLTCallback callback, const char[] name=\"default\", any data=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Connects to a database via a thread.  This can be used instead of `SQL_Connect()` if you wish for non-blocking functionality.\r\n \n It is not necessary to use this to use threaded queries.  However, if you  don't (or you mix threaded/non-threaded queries), you should see  `SQL_LockDatabase()`.\n\n_@param_ `callback` — >Callback; new Handle will be in hndl, owner is the driver.                      If no driver was found, the owner is INVALID_HANDLE.\n\n_@param_ `name` — >Database name.\n\n_@param_ `data` — >Extra data value to pass to the callback.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_TQuery",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_TQuery(Handle database, SQLTCallback callback, const char[] query, any data=0, DBPriority prio=DBPrio_Normal)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a simple query via a thread.  The query Handle is passed through the callback.\r\n \n The database Handle returned through the callback is always a new Handle, and if necessary, `SQL_IsSameConnection()` should be used to test against other connections.\r\n \n The query Handle returned through the callback is temporary and destroyed  at the end of the callback.  If you need to hold onto it, use `CloneHandle()`.\n\n_@param_ `database` — >A database Handle.\n\n_@param_ `callback` — >Callback; database is in \"owner\" and the query Handle                      is passed in \"hndl\".\n\n_@param_ `query` — >Query string.\n\n_@param_ `data` — >Extra data value to pass to the callback.\n\n_@param_ `prio` — >Priority queue to use.\n\n_@error_ Invalid database Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQL_UnlockDatabase",
    "labelDetails": {
      "detail": "void",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "native void SQL_UnlockDatabase(Handle database)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Unlocks a database so threading operations may continue.\n\n_@param_ `database` — >A database Handle.\n\n_@error_ Invalid database Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SQLite_UseDatabase",
    "labelDetails": {
      "detail": "Database",
      "description": "dbi.inc"
    },
    "kind": 3,
    "detail": "stock Database SQLite_UseDatabase(const char[] database, char[] error, int maxlength)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Grabs a handle to an SQLite database, creating one if it does not exist.  \r\n \n Unless there are extenuating circumstances, you should consider using \"sourcemod-local\" as the  database name.  This provides some unification between plugins on behalf of users.\r\n \n As a precaution, you should always create some sort of unique prefix to your table names so  there are no conflicts, and you should never drop or modify tables that you do not own.\n\n_@param_ `database` — >Database name.\n\n_@param_ `error` — >Error buffer.\n\n_@param_ `maxlength` — >Maximum length of the error buffer.\n\n_@return_ A database connection Handle, or INVALID_HANDLE on failure.                      On failure the error buffer will be filled with a message.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ScaleVector",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "stock void ScaleVector(float vec[3], float scale)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Scales a vector.\n\n_@param_ `vec` — >Vector.\n\n_@param_ `scale` — >Scale value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SearchForClients",
    "labelDetails": {
      "detail": "int",
      "description": "helpers.inc"
    },
    "kind": 3,
    "detail": "stock int SearchForClients(const char[] pattern, int[] clients, int maxClients)",
    "documentation": {
      "kind": "markdown",
      "value": "\n\n_@deprecated_ Use `FindTarget()` or `ProcessTargetString()`.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "SendConVarValue",
    "labelDetails": {
      "detail": "bool",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native bool SendConVarValue(int client, Handle convar, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Replicates a convar value to a specific client. This does not change the actual convar value.\n\n_@param_ `client` — >Client index\n\n_@param_ `convar` — >ConVar handle\n\n_@param_ `value` — >String value to send\n\n_@return_ True on success, false on failure\n\n_@error_ Invalid client index, client not in game, or client is fake\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SendPanelToClient",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ServerCommand",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ServerCommand(const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a server command as if it were on the server console (or RCON)\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ServerCommandEx",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ServerCommandEx(char[] buffer, int maxlen, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes a server command as if it were on the server console (or RCON)  and stores the printed text into buffer.\r\n \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console.\n\n_@param_ `buffer` — >String to store command result into.\n\n_@param_ `maxlen` — >Length of buffer.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ServerExecute",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ServerExecute()",
    "documentation": {
      "kind": "markdown",
      "value": "\n Executes every command in the server's command buffer, rather than once per frame.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetAdmGroupAddFlag",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void SetAdmGroupAddFlag(GroupId id, AdminFlag flag, bool enabled)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds or removes a flag from a group's flag set.\n\n_@note_ These are called \"add flags\" because they add to a user's flags.\n\n_@param_ `id` — >Group id.\n\n_@param_ `flag` — >Admin flag to toggle.\n\n_@param_ `enabled` — >True to set the flag, false to unset/disable.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetAdmGroupImmuneFrom",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void SetAdmGroupImmuneFrom(GroupId id, GroupId other_id)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Adds immunity to a specific group.\n\n_@param_ `id` — >Group id.\n\n_@param_ `other_id` — >Group id to receive immunity to.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetAdmGroupImmunity",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void SetAdmGroupImmunity(GroupId id, ImmunityType type, bool enabled)",
    "documentation": {
      "kind": "markdown",
      "value": "\n\n_@deprecated_ Functionality removed.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "SetAdmGroupImmunityLevel",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int SetAdmGroupImmunityLevel(GroupId gid, int level)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a group's immunity level.\n\n_@param_ `gid` — >Group Id.\n\n_@param_ `level` — >Immunity level value.\n\n_@return_ Old immunity level value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetAdminFlag",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void SetAdminFlag(AdminId id, AdminFlag flag, bool enabled)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets whether or not a flag is enabled on an admin.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `flag` — >Admin flag to use.\n\n_@param_ `enabled` — >True to enable, false to disable.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetAdminImmunityLevel",
    "labelDetails": {
      "detail": "int",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native int SetAdminImmunityLevel(AdminId id, int level)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an admin's immunity level.\n\n_@param_ `id` — >Admin Id.\n\n_@param_ `level` — >Immunity level value.\n\n_@return_ Old immunity level value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetAdminPassword",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void SetAdminPassword(AdminId id, const char[] password)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a password on an admin.\n\n_@param_ `id` — >AdminId index of the admin.\n\n_@param_ `password` — >String containing the password.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetArrayArray",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int SetArrayArray(Handle array, int index, const any[] values, int size=-1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an array of cells in an array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array.\n\n_@param_ `values` — >Array to copy.\n\n_@param_ `size` — >If not set, assumes the buffer size is equal to the                      blocksize.  Otherwise, the size passed is used.\n\n_@return_ Number of cells copied.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetArrayCell",
    "labelDetails": {
      "detail": "void",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native void SetArrayCell(Handle array, int index, any value, int block=0, bool asChar=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a cell value in an array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array.\n\n_@param_ `value` — >Cell value to set.\n\n_@param_ `block` — >Optionally specify which block to write to                      (useful if the blocksize \\> 0).\n\n_@param_ `asChar` — >Optionally set as a byte instead of a cell.\n\n_@error_ Invalid Handle, invalid index, or invalid block.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetArrayString",
    "labelDetails": {
      "detail": "int",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native int SetArrayString(Handle array, int index, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a string value in an array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array.\n\n_@param_ `value` — >String value to set.\n\n_@return_ Number of characters copied.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetClientLanguage",
    "labelDetails": {
      "detail": "void",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native void SetClientLanguage(int client, int language)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the language number of a client.\n\n_@param_ `client` — >Client index.\n\n_@param_ `language` — >Language number.\n\n_@error_ Invalid client index or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetCmdReplySource",
    "labelDetails": {
      "detail": "ReplySource",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native ReplySource SetCmdReplySource(ReplySource source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the current reply source of a command.\r\n \n Only use this if you know what you are doing.  You should save the old value and restore it once you are done.\n\n_@param_ `source` — >New ReplySource value.\n\n_@return_ Old ReplySource value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetCommandFlags",
    "labelDetails": {
      "detail": "bool",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native bool SetCommandFlags(const char[] name, int flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the bitstring of flags of a command.\n\n_@param_ `name` — >Name of the command.\n\n_@param_ `flags` — >A bitstring containing the FCVAR_* flags to enable.\n\n_@return_ True on success, otherwise false.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetConVarBool",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void SetConVarBool(Handle convar, bool value, bool replicate=false, bool notify=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the boolean value of a console variable.\n \n Note: The replicate and notify params are only relevant for the original, Dark Messiah, and Episode 1 engines. Newer engines automatically do these things when the convar value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `value` — >New boolean value.\n\n_@param_ `replicate` — >If set to true, the new convar value will be set on all clients.                      This will only work if the convar has the FCVAR_REPLICATED flag                      and actually exists on clients.\n\n_@param_ `notify` — >If set to true, clients will be notified that the convar has changed.                      This will only work if the convar has the FCVAR_NOTIFY flag.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetConVarBounds",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void SetConVarBounds(Handle convar, ConVarBounds type, bool set, float value=0.0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the specified bound of a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `type` — >Type of bound to set, ConVarBound_Lower or ConVarBound_Upper\n\n_@param_ `set` — >If set to true, convar will use specified bound. If false, bound will be removed.\n\n_@param_ `value` — >Floating point value to use as the specified bound.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetConVarFlags",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void SetConVarFlags(Handle convar, int flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the bitstring of flags on a console variable.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `flags` — >A bitstring containing the FCVAR_* flags to enable.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetConVarFloat",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void SetConVarFloat(Handle convar, float value, bool replicate=false, bool notify=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the floating point value of a console variable.\n \n Note: The replicate and notify params are only relevant for the original, Dark Messiah, and Episode 1 engines. Newer engines automatically do these things when the convar value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `value` — >New floating point value.\n\n_@param_ `replicate` — >If set to true, the new convar value will be set on all clients.                      This will only work if the convar has the FCVAR_REPLICATED flag                      and actually exists on clients.\n\n_@param_ `notify` — >If set to true, clients will be notified that the convar has changed.                      This will only work if the convar has the FCVAR_NOTIFY flag.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetConVarInt",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void SetConVarInt(Handle convar, int value, bool replicate=false, bool notify=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the integer value of a console variable.\n \n Note: The replicate and notify params are only relevant for the original, Dark Messiah, and Episode 1 engines. Newer engines automatically do these things when the convar value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `value` — >New integer value.\n\n_@param_ `replicate` — >If set to true, the new convar value will be set on all clients.                      This will only work if the convar has the FCVAR_REPLICATED flag                      and actually exists on clients.\n\n_@param_ `notify` — >If set to true, clients will be notified that the convar has changed.                      This will only work if the convar has the FCVAR_NOTIFY flag.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetConVarString",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void SetConVarString(Handle convar, const char[] value, bool replicate=false, bool notify=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the string value of a console variable.\n \n Note: The replicate and notify params are only relevant for the original, Dark Messiah, and Episode 1 engines. Newer engines automatically do these things when the convar value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `value` — >New string value.\n\n_@param_ `replicate` — >If set to true, the new convar value will be set on all clients.                      This will only work if the convar has the FCVAR_REPLICATED flag                      and actually exists on clients.\n\n_@param_ `notify` — >If set to true, clients will be notified that the convar has changed.                      This will only work if the convar has the FCVAR_NOTIFY flag.\n\n_@error_ Invalid or corrupt Handle.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEdictFlags",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEdictFlags(int edict, int flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the flags on an edict.  These are not the same as entity flags.\n\n_@param_ `edict` — >Index of the entity.\n\n_@param_ `flags` — >Flags to set.\n\n_@error_ Invalid edict index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntData",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntData(int entity, int offset, any value, int size=4, bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and sets the integer value at the given offset.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `value` — >Value to set.\n\n_@param_ `size` — >Number of bytes to write (valid values are 1, 2, or 4).\n\n_@param_ `changeState` — >If true, change will be sent over the network.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntDataArray",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntDataArray(int entity, int offset, const any[] array, int arraySize, int dataSize=4, bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Copies an array of cells to an entity at a given offset.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `array` — >Array of values to copy.\n\n_@param_ `arraySize` — >Number of values to copy.\n\n_@param_ `dataSize` — >Size of each value in bytes (1, 2, or 4).\n\n_@param_ `changeState` — >True to set the network state as changed; false otherwise.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntDataEnt",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntDataEnt(int entity, int offset, int other, bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n This function is deprecated.   Use SetEntDataEnt2 instead, for reasons explained in the notes.\r\n \n Note: This function uses 0 as an indicator to unset data, but 0 is also the world entity index.  Thus, a property cannot be set to the world entity using this native.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `other` — >Entity index to set, or 0 to clear.\n\n_@param_ `changeState` — >If true, change will be sent over the network.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\n\n_@deprecated_ Use `SetEntDataEnt2()` instead.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "SetEntDataEnt2",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntDataEnt2(int entity, int offset, int other, bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and sets the entity index at the given offset.\r\n \n Note: This will only work on offsets that are stored as \"entity handles\" (which usually looks like m_h* in properties).  These are not SourceMod Handles, but internal Source structures.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `other` — >Entity index to set, or -1 to clear.\n\n_@param_ `changeState` — >If true, change will be sent over the network.\n\n_@error_ Invalid input entity, or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntDataFloat",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntDataFloat(int entity, int offset, float value, bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and sets the float value at the given offset.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `value` — >Value to set.\n\n_@param_ `changeState` — >If true, change will be sent over the network.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntDataString",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int SetEntDataString(int entity, int offset, const char[] buffer, int maxlen, bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and sets the string at the given offset.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `buffer` — >String to set.\n\n_@param_ `maxlen` — >Maximum length of bytes to write.\n\n_@param_ `changeState` — >If true, change will be sent over the network.\n\n_@return_ Number of non-null bytes written.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntDataVector",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntDataVector(int entity, int offset, const float vec[3], bool changeState=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Peeks into an entity's object data and sets the vector at the given offset.\n\n_@note_ Both a Vector and a QAngle are three floats.  This is a       convenience function and will work with both types.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `offset` — >Offset to use.\n\n_@param_ `vec` — >Vector to set.\n\n_@param_ `changeState` — >If true, change will be sent over the network.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntProp",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntProp(int entity, PropType type, const char[] prop, any value, int size=4, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an integer value in an entity's property.\r\n \n This function is considered safer and more robust over SetEntData, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `value` — >Value to set.\n\n_@param_ `size` — >Number of bytes to write (valid values are 1, 2, or 4).                      This value is auto-detected, and the size parameter is                      only used as a fallback in case detection fails.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntPropEnt",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntPropEnt(int entity, PropType type, const char[] prop, int other, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity index in an entity's property.\r\n \n This function is considered safer and more robust over SetEntDataEnt*, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `other` — >Entity index to set, or -1 to unset.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntPropFloat",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntPropFloat(int entity, PropType type, const char[] prop, float value, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a float value in an entity's property.\r\n \n This function is considered safer and more robust over SetEntDataFloat, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `value` — >Value to set.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@error_ Invalid entity or offset out of reasonable bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntPropString",
    "labelDetails": {
      "detail": "int",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native int SetEntPropString(int entity, PropType type, const char[] prop, const char[] buffer, int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a network property as a string.\n\n_@param_ `entity` — >Edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property to use.\n\n_@param_ `buffer` — >String to set.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@return_ Number of non-null bytes written.\n\n_@error_ Invalid entity, offset out of reasonable bounds, or property is not a valid string.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntPropVector",
    "labelDetails": {
      "detail": "void",
      "description": "entity.inc"
    },
    "kind": 3,
    "detail": "native void SetEntPropVector(int entity, PropType type, const char[] prop, const float vec[3], int element=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a vector of floats in an entity, given a named network property.\r\n \n This function is considered safer and more robust over SetEntDataVector, because it performs strict offset checking and typing rules.\n\n_@param_ `entity` — >Entity/edict index.\n\n_@param_ `type` — >Property type.\n\n_@param_ `prop` — >Property name.\n\n_@param_ `vec` — >Vector to set.\n\n_@param_ `element` — >Element # (starting from 0) if property is an array.\n\n_@error_ Invalid entity, property not found, or property not                      actually a vector data type.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityFlags",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "native void SetEntityFlags(int entity, int flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's flags.\n\n_@note_ The entity flags as defined above are internally translated by SM       to match the current game's expected value for the flags as       the actual values can differ per engine.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `flags` — >Entity flags, see entity flag defines above.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityGravity",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntityGravity(int entity, float amount)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's gravity.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `amount` — >Gravity to set (default = 1.0, half = 0.5, double = 2.0).\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityHealth",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntityHealth(int entity, int amount)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's health\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `amount` — >Health amount.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityMoveType",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntityMoveType(int entity, MoveType mt)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's movetype.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `mt` — >Movetype, see enum above.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityRenderColor",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntityRenderColor(int entity, int r=255, int g=255, int b=255, int a=255)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's color.\n\n_@param_ `entity` — >Entity index\n\n_@param_ `r` — >Amount of red (0-255)\n\n_@param_ `g` — >Amount of green (0-255)\n\n_@param_ `b` — >Amount of blue (0-255)\n\n_@param_ `a` — >Amount of alpha (0-255)\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityRenderFx",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntityRenderFx(int entity, RenderFx fx)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's render Fx.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `fx` — >RenderFx value.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEntityRenderMode",
    "labelDetails": {
      "detail": "void",
      "description": "entity_prop_stocks.inc"
    },
    "kind": 3,
    "detail": "stock void SetEntityRenderMode(int entity, RenderMode mode)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an entity's render mode.\n\n_@param_ `entity` — >Entity index.\n\n_@param_ `mode` — >RenderMode value.\n\n_@error_ Invalid entity index, or lack of mod compliance.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEventBool",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void SetEventBool(Handle event, const char[] key, bool value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the boolean value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `value` — >New boolean value.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEventBroadcast",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void SetEventBroadcast(Handle event, bool dontBroadcast)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets whether an event's broadcasting will be disabled or not.\r\n \n This has no effect on events Handles that are not from HookEvent or HookEventEx callbacks.\n\n_@param_ `event` — >Handle to an event from an event hook.\n\n_@param_ `dontBroadcast` — >True to disable broadcasting, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEventFloat",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void SetEventFloat(Handle event, const char[] key, float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the floating point value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `value` — >New floating point value.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEventInt",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void SetEventInt(Handle event, const char[] key, int value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the integer value of a game event's key.\r\n \n Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as \"byte\" and \"short\" are still  integers, and only refer to how much data will actually be sent  over the network (if applicable).\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `value` — >New integer value.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetEventString",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void SetEventString(Handle event, const char[] key, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the string value of a game event's key.\n\n_@param_ `event` — >Handle to the event.\n\n_@param_ `key` — >Name of event key.\n\n_@param_ `value` — >New string value.\n\n_@error_ Invalid or corrupt Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetFailState",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void SetFailState(const char[] string, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Causes the plugin to enter a failed state.  An error will be thrown and the plugin will be paused until it is unloaded or reloaded.\r\n \n For backwards compatibility, if no extra arguments are passed, no formatting is applied.  If one or more additional arguments is passed, the string is formatted using `Format()`.  If any errors are encountered during formatting, both the format specifier string and an additional error message are written.\r\n \n This function does not return, and no further code in the plugin is executed.\n\n_@param_ `string` — >Format specifier string.\n\n_@param_ `...` — >Formatting arguments.\n\n_@error_ Always throws SP_ERROR_ABORT.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetFakeClientConVar",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void SetFakeClientConVar(int client, const char[] cvar, const char[] value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a convar value on a fake client.\n\n_@param_ `client` — >Client index.\n\n_@param_ `cvar` — >ConVar name.\n\n_@param_ `value` — >ConVar value.\n\n_@error_ Invalid client index, client not connected,                      or client not a fake client.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetFilePermissions",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool SetFilePermissions(const char[] path, int mode)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Changes a file or directories permissions.\n\n_@param_ `path` — >Path to the file.\n\n_@param_ `mode` — >Permissions to set.\n\n_@return_ True on success, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetGlobalTransTarget",
    "labelDetails": {
      "detail": "void",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native void SetGlobalTransTarget(int client)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the global language target.  This is useful for creating functions that will be compatible with the %t format specifier.  Note that invalid indexes can be specified but the error will occur during translation, not during this function call.\n\n_@param_ `client` — >Client index or LANG_SERVER.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetHudTextParams",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void SetHudTextParams(float x, float y, float holdTime, int r, int g, int b, int a, int effect = 0,\n      float fxTime=6.0, float fadeIn=0.1, float fadeOut=0.2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them.\r\n \n You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw.\n\n_@param_ `x` — >x coordinate, from 0 to 1.  -1.0 is the center.\n\n_@param_ `y` — >y coordinate, from 0 to 1.  -1.0 is the center.\n\n_@param_ `holdTime` — >Number of seconds to hold the text.\n\n_@param_ `r` — >Red color value.\n\n_@param_ `g` — >Green color value.\n\n_@param_ `b` — >Blue color value.\n\n_@param_ `a` — >Alpha transparency value.\n\n_@param_ `effect` — >0/1 causes the text to fade in and fade out.                      2 causes the text to flash[?].\n\n_@param_ `fxTime` — >Duration of chosen effect (may not apply to all effects).\n\n_@param_ `fadeIn` — >Number of seconds to spend fading in.\n\n_@param_ `fadeOut` — >Number of seconds to spend fading out.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetHudTextParamsEx",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void SetHudTextParamsEx(float x, float y, float holdTime, int color1[4],\n        int color2[4]={255,255,255,0}, int effect = 0, float fxTime=6.0,\n        float fadeIn=0.1, float fadeOut=0.2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them.\r\n \n This is the same as `SetHudTextParams()`, except it lets you set the alternate color for when effects require it.\n\n_@param_ `x` — >x coordinate, from 0 to 1.  -1.0 is the center.\n\n_@param_ `y` — >y coordinate, from 0 to 1.  -1.0 is the center.\n\n_@param_ `holdTime` — >Number of seconds to hold the text.\n\n_@param_ `color1` — >First color set, array values being [red, green, blue, alpha]\n\n_@param_ `color2` — >Second color set, array values being [red, green, blue, alpha]\n\n_@param_ `effect` — >0/1 causes the text to fade in and fade out.                      2 causes the text to flash[?].\n\n_@param_ `fxTime` — >Duration of chosen effect (may not apply to all effects).\n\n_@param_ `fadeIn` — >Number of seconds to spend fading in.\n\n_@param_ `fadeOut` — >Number of seconds to spend fading out.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMapListCompatBind",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void SetMapListCompatBind(const char[] name, const char[] file)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Makes a compatibility binding for map lists.  For example, if a function previously used \"clam.cfg\" for map lists, this function will insert a \"fake\" binding to \"clam.cfg\" that will be overridden if it's in the maplists.cfg file.\n\n_@param_ `name` — >Configuration name that would be used with `ReadMapList()`.\n\n_@param_ `file` — >Default file to use.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMenuExitBackButton",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMenuExitButton",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMenuNoVoteButton",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMenuOptionFlags",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMenuPagination",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetMenuTitle",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetNativeArray",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int SetNativeArray(int param, const any[] local, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Copies a local array into a native parameter array (always by reference).\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@param_ `local` — >Local array to copy from.\n\n_@param_ `size` — >Size of the local array to copy.\n\n_@return_ SP_ERROR_NONE on success, anything else on failure.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetNativeCellRef",
    "labelDetails": {
      "detail": "void",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native void SetNativeCellRef(int param, any value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a cell from a native parameter, by reference.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@param_ `value` — >Cell value at the parameter number to set by reference.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetNativeString",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int SetNativeString(int param, const char[] source, int maxlength, bool utf8=true, int &bytes=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a string in a native parameter.\n\n_@note_ Output conditions are undefined on failure.\n\n_@param_ `param` — >Parameter number, starting from 1.\n\n_@param_ `source` — >Source string to use.\n\n_@param_ `maxlength` — >Maximum number of bytes to write.\n\n_@param_ `utf8` — >If false, string will not be written                      with UTF8 safety.\n\n_@param_ `bytes` — >Optionally store the number of bytes written.\n\n_@return_ SP_ERROR_NONE on success, any other integer on failure.\n\n_@error_ Invalid parameter number or calling from a non-native function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetNextMap",
    "labelDetails": {
      "detail": "bool",
      "description": "nextmap.inc"
    },
    "kind": 3,
    "detail": "native bool SetNextMap(const char[] map)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets SourceMod's internal nextmap. Equivalent to changing sm_nextmap but with an added validity check.\n\n_@param_ `map` — >Next map to set.\n\n_@return_ True if the nextmap was set, false if map was invalid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetPackPosition",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void SetPackPosition(Handle pack, DataPackPos position)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the read/write position in a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `position` — >New position to set. Must have been previously retrieved from a call to GetPackPosition.\n\n_@error_ Invalid handle, or position is beyond the pack bounds.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetPanelCurrentKey",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetPanelKeys",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetPanelTitle",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetRandomSeed",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void SetRandomSeed(int seed)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets the seed value for the global Half-Life 2 Random Stream.\n\n_@param_ `seed` — >Seed value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetTrieArray",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool SetTrieArray(Handle map, const char[] key, const any[] array, int num_items, bool replace=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets an array value in a Map, either inserting a new entry or replacing an old one.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@param_ `array` — >Array to store.\n\n_@param_ `num_items` — >Number of items in the array.\n\n_@param_ `replace` — >If false, operation will fail if the key is already set.\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetTrieString",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool SetTrieString(Handle map, const char[] key, const char[] value, bool replace=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a string value in a Map, either inserting a new entry or replacing an old one.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@param_ `value` — >String to store.\n\n_@param_ `replace` — >If false, operation will fail if the key is already set.\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetTrieValue",
    "labelDetails": {
      "detail": "bool",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native bool SetTrieValue(Handle map, const char[] key, any value, bool replace=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a value in a hash map, either inserting a new entry or replacing an old one.\n\n_@param_ `map` — >Map Handle.\n\n_@param_ `key` — >Key string.\n\n_@param_ `value` — >Value to store at this key.\n\n_@param_ `replace` — >If false, operation will fail if the key is already set.\n\n_@return_ True on success, false on failure.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetURandomSeed",
    "labelDetails": {
      "detail": "void",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native void SetURandomSeed(const int[] seeds, int numSeeds)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Seeds a plugin's uniform random number stream. This is done automatically, so normally it is totally unnecessary to call this.\n\n_@param_ `seeds` — >Array of numbers to use as seeding data.\n\n_@param_ `numSeeds` — >Number of seeds in the seeds array.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetURandomSeedSimple",
    "labelDetails": {
      "detail": "void",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "stock void SetURandomSeedSimple(int seed)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Seeds a plugin's uniform random number stream. This is done automatically, so normally it is totally unnecessary to call this.\n\n_@param_ `seed` — >Single seed value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetUserAdmin",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void SetUserAdmin(int client, AdminId id, bool temp=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets a client's AdminId.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `id` — >AdminId to set.  INVALID_ADMIN_ID removes admin permissions.\n\n_@param_ `temp` — >True if the id should be freed on disconnect.\n\n_@error_ Invalid client index, client not connected, or bogus AdminId.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetUserFlagBits",
    "labelDetails": {
      "detail": "void",
      "description": "clients.inc"
    },
    "kind": 3,
    "detail": "native void SetUserFlagBits(int client, int flags)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given.\n\n_@param_ `client` — >Player's index.\n\n_@param_ `flags` — >Bitstring of flags to set on client.\n\n_@error_ Invalid client index, or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SetVoteResultCallback",
    "labelDetails": {
      "detail": "void",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShiftArrayUp",
    "labelDetails": {
      "detail": "void",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native void ShiftArrayUp(Handle array, int index)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Shifts an array up.  All array contents after and including the given index are shifted up by one, and the given index is then \"free.\" After shifting, the contents of the given index is undefined.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index` — >Index in the array to shift up from.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowActivity",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ShowActivity(int client, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Displays usage of an admin command to users depending on the  setting of the sm_show_activity cvar.  \r\n \n This version does not display a message to the originating client  if used from chat triggers or menus.  If manual replies are used  for these cases, then this function will suffice.  Otherwise,  `ShowActivity2()` is slightly more useful.\n\n_@param_ `client` — >Client index doing the action, or 0 for server.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowActivity2",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ShowActivity2(int client, const char[] tag, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Displays usage of an admin command to users depending on the  setting of the sm_show_activity cvar.  All users receive a message  in their chat text, except for the originating client, who receives  the message based on the current ReplySource.\n\n_@param_ `client` — >Client index doing the action, or 0 for server.\n\n_@param_ `tag` — >Tag to prepend to the message.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowActivityEx",
    "labelDetails": {
      "detail": "void",
      "description": "console.inc"
    },
    "kind": 3,
    "detail": "native void ShowActivityEx(int client, const char[] tag, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Same as `ShowActivity()`, except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing).\n\n_@param_ `client` — >Client index doing the action, or 0 for server.\n\n_@param_ `tag` — >Tag to display with.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@error_ "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowHudText",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int ShowHudText(int client, int channel, const char[] message, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Shows a HUD message to a client on the given channel.\r\n \n As of this writing, only TF, HL2MP, and SourceForts support HUD Text.\n\n_@param_ `client` — >Client index to send the message to.\n\n_@param_ `channel` — >A channel number.                      If -1, then a channel will automatically be selected                      based on the least-recently-used channel.  If the                      channel is any other number, it will be modulo'd with                      the channel count to get a final channel number.\n\n_@param_ `message` — >Message text or formatting rules.\n\n_@param_ `...` — >Message formatting parameters.\n\n_@return_ -1 on failure (lack of mod support).                      Any other return value is the channel number that was                      used to render the text.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowMOTDPanel",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "stock void ShowMOTDPanel(int client, const char[] title, const char[] msg, int type=1)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Shows a MOTD panel to a specific client.\n\n_@param_ `client` — >Client index.\n\n_@param_ `title` — >Title of the panel (printed on the top border of the window).\n\n_@param_ `msg` — >Contents of the panel, it can be treated as an url, filename or plain text                      depending on the type parameter (WARNING: msg has to be 192 bytes maximum!)\n\n_@param_ `type` — >Determines the way to treat the message body of the panel.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowSyncHudText",
    "labelDetails": {
      "detail": "int",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native int ShowSyncHudText(int client, Handle sync, const char[] message, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Shows a synchronized HUD message to a client.\r\n \n As of this writing, only TF, HL2MP, and SourceForts support HUD Text.\n\n_@param_ `client` — >Client index to send the message to.\n\n_@param_ `sync` — >Synchronization object.\n\n_@param_ `message` — >Message text or formatting rules.\n\n_@param_ `...` — >Message formatting parameters.\n\n_@return_ -1 on failure, anything else on success.                      This function fails if the mod does not support it.\n\n_@error_ Invalid client index, client not in game, or sync object not valid.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ShowVGUIPanel",
    "labelDetails": {
      "detail": "void",
      "description": "halflife.inc"
    },
    "kind": 3,
    "detail": "native void ShowVGUIPanel(int client, const char[] name, Handle Kv=INVALID_HANDLE, bool show=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Shows a VGUI panel to a specific client.\n\n_@param_ `client` — >Client index.\n\n_@param_ `name` — >Panel type name (Check viewport_panel_names.h to see a list of                      some panel names).\n\n_@param_ `Kv` — >KeyValues handle with all the data for the panel setup (Depends                      on the panel type and may be unused).\n\n_@param_ `show` — >True to show the panel, or false to remove it from the client screen.\n\n_@error_ Invalid client index, or client not in game.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Sine",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float Sine(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the sine of the argument.\n\n_@param_ `value` — >Input value in radians.\n\n_@return_ `sin(value)`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortADTArray",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortADTArray(Handle array, SortOrder order, SortType type)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sort an ADT Array. Specify the type as Integer, Float, or String.\n\n_@param_ `array` — >Array Handle to sort\n\n_@param_ `order` — >Sort order to use, same as other sorts.\n\n_@param_ `type` — >Data type stored in the ADT Array\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortADTArrayCustom",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortADTArrayCustom(Handle array, SortFuncADTArray sortfunc, Handle hndl=INVALID_HANDLE)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Custom sorts an ADT Array. You must pass in a comparison function.\n\n_@param_ `array` — >Array Handle to sort\n\n_@param_ `sortfunc` — >Sort comparison function to use\n\n_@param_ `hndl` — >Optional Handle to pass through the comparison calls.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortCustom1D",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortCustom1D(int[] array, int array_size, SortFunc1D sortfunc, Handle hndl=INVALID_HANDLE)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sorts a custom 1D array.  You must pass in a comparison function.\n\n_@param_ `array` — >Array to sort.\n\n_@param_ `array_size` — >Size of the array to sort.\n\n_@param_ `sortfunc` — >Sort function.\n\n_@param_ `hndl` — >Optional Handle to pass through the comparison calls.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortCustom2D",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortCustom2D(any[][] array, int array_size, SortFunc2D sortfunc, Handle hndl=INVALID_HANDLE)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sorts a custom 2D array.  You must pass in a comparison function.\n\n_@param_ `array` — >Array to sort.\n\n_@param_ `array_size` — >Size of the major array to sort (first index, outermost).\n\n_@param_ `sortfunc` — >Sort comparison function to use.\n\n_@param_ `hndl` — >Optional Handle to pass through the comparison calls.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortFloats",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortFloats(float[] array, int array_size, SortOrder order = Sort_Ascending)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sorts an array of float point numbers.\n\n_@param_ `array` — >Array of floating point numbers to sort in-place.\n\n_@param_ `array_size` — >Size of the array.\n\n_@param_ `order` — >Sorting order to use.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortFunc1D",
    "labelDetails": {
      "description": "sorting.inc"
    },
    "kind": 8,
    "detail": "typedef SortFunc1D = function int (int elem1, int elem2, const int[] array, Handle hndl);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sort comparison function for 1D array elements.\n\n_@note_ You may need to use explicit tags in order to use data properly.\n\n_@param_ `elem1` — >First element to compare.\n\n_@param_ `elem2` — >Second element to compare.\n\n_@param_ `array` — >Array that is being sorted (order is undefined).\n\n_@param_ `hndl` — >Handle optionally passed in while sorting.\n\n_@return_ -1 if first should go before second                      0 if first is equal to second                      1 if first should go after second\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortFunc2D",
    "labelDetails": {
      "description": "sorting.inc"
    },
    "kind": 8,
    "detail": "typeset SortFunc2D",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sort comparison function for 2D array elements (sub-arrays).\n\n_@note_ You may need to use explicit tags in order to use data properly.\n\n_@param_ `elem1` — >First array to compare.\n\n_@param_ `elem2` — >Second array to compare.\n\n_@param_ `array` — >Array that is being sorted (order is undefined).\n\n_@param_ `hndl` — >Handle optionally passed in while sorting.\n\n_@return_ -1 if first should go before second                      0 if first is equal to second                      1 if first should go after second\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortFuncADTArray",
    "labelDetails": {
      "description": "sorting.inc"
    },
    "kind": 8,
    "detail": "typedef SortFuncADTArray = function int (int index1, int index2, Handle array, Handle hndl);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sort comparison function for ADT Array elements. Function provides you with indexes currently being sorted, use ADT Array functions to retrieve the index values and compare.\n\n_@param_ `index1` — >First index to compare.\n\n_@param_ `index2` — >Second index to compare.\n\n_@param_ `array` — >Array that is being sorted (order is undefined).\n\n_@param_ `hndl` — >Handle optionally passed in while sorting.\n\n_@return_ -1 if first should go before second                      0 if first is equal to second                      1 if first should go after second\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortIntegers",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortIntegers(int[] array, int array_size, SortOrder order = Sort_Ascending)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sorts an array of integers.\n\n_@param_ `array` — >Array of integers to sort in-place.\n\n_@param_ `array_size` — >Size of the array.\n\n_@param_ `order` — >Sorting order to use.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortOrder",
    "labelDetails": {
      "description": "sorting.inc"
    },
    "kind": 13,
    "detail": "enum SortOrder",
    "documentation": {
      "kind": "markdown",
      "value": "\n Contains sorting orders.\r\n "
    }
  },
  {
    "label": "SortStrings",
    "labelDetails": {
      "detail": "void",
      "description": "sorting.inc"
    },
    "kind": 3,
    "detail": "native void SortStrings(char[][] array, int array_size, SortOrder order = Sort_Ascending)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Sorts an array of strings.\n\n_@param_ `array` — >Array of strings to sort in-place.\n\n_@param_ `array_size` — >Size of the array.\n\n_@param_ `order` — >Sorting order to use.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SortType",
    "labelDetails": {
      "description": "sorting.inc"
    },
    "kind": 13,
    "detail": "enum SortType",
    "documentation": {
      "kind": "markdown",
      "value": "\n Data types for ADT Array Sorts\r\n "
    }
  },
  {
    "label": "Sort_Ascending",
    "labelDetails": {
      "description": "SortOrder::Sort_Ascending"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Sort_Descending",
    "labelDetails": {
      "description": "SortOrder::Sort_Descending"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Sort_Float",
    "labelDetails": {
      "description": "SortType::Sort_Float"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Sort_Integer",
    "labelDetails": {
      "description": "SortType::Sort_Integer"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Sort_Random",
    "labelDetails": {
      "description": "SortOrder::Sort_Random"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "Sort_String",
    "labelDetails": {
      "description": "SortType::Sort_String"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "SplitString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int SplitString(const char[] source, const char[] split, char[] part, int partLen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns text in a string up until a certain character sequence is reached.\n\n_@param_ `source` — >Source input string.\n\n_@param_ `split` — >A string which specifies a search point to break at.\n\n_@param_ `part` — >Buffer to store string part.\n\n_@param_ `partLen` — >Maximum length of the string part buffer.\n\n_@return_ -1 if no match was found; otherwise, an index into source                      marking the first index after the searched text.  The                      index is always relative to the start of the input string.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SquareRoot",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float SquareRoot(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the square root of the input value, equivalent to floatpower(value, 0.5).\n\n_@param_ `value` — >Input value.\n\n_@return_ Square root of the value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SrvCmd",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 8,
    "detail": "typedef SrvCmd = function Action (int args);",
    "documentation": {
      "kind": "markdown",
      "value": "\n Called when a server-only command is invoked.\n\n_@param_ `args` — >Number of arguments that were in the argument string.\n\n_@return_ An Action value.  Not handling the command                      means that Source will report it as \"not found.\"\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StartMessage",
    "labelDetails": {
      "detail": "Handle",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native Handle StartMessage(const char[] msgname, const int[] clients, int numClients, int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a usermessage (network message).\n\n_@note_ Only one message can be active at a time.\n\n_@note_ It is illegal to send any message while a non-intercept hook is in progress.\n\n_@param_ `msgname` — >Message name to start.\n\n_@param_ `clients` — >Array containing player indexes to broadcast to.\n\n_@param_ `numClients` — >Number of players in the array.\n\n_@param_ `flags` — >Optional flags to set.\n\n_@return_ A handle to a bf_write bit packing structure, or                      INVALID_HANDLE on failure.\n\n_@error_ Invalid message name, unable to start a message, invalid client,                      or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StartMessageAll",
    "labelDetails": {
      "detail": "Handle",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "stock Handle StartMessageAll(const char[] msgname, int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a usermessage (network message) that broadcasts to all clients.\n\n_@note_ See StartMessage or `StartMessageEx()`.\n\n_@param_ `msgname` — >Message name to start.\n\n_@param_ `flags` — >Optional flags to set.\n\n_@return_ A handle to a bf_write bit packing structure, or                      INVALID_HANDLE on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StartMessageEx",
    "labelDetails": {
      "detail": "Handle",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native Handle StartMessageEx(UserMsg msg, const int[] clients, int numClients, int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a usermessage (network message).\n\n_@note_ Only one message can be active at a time.\n\n_@note_ It is illegal to send any message while a non-intercept hook is in progress.\n\n_@param_ `msg` — >Message index to start.\n\n_@param_ `clients` — >Array containing player indexes to broadcast to.\n\n_@param_ `numClients` — >Number of players in the array.\n\n_@param_ `flags` — >Optional flags to set.\n\n_@return_ A handle to a bf_write bit packing structure, or                      INVALID_HANDLE on failure.\n\n_@error_ Invalid message name, unable to start a message, invalid client,                      or client not connected.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StartMessageOne",
    "labelDetails": {
      "detail": "Handle",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "stock Handle StartMessageOne(const char[] msgname, int client, int flags=0)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Starts a simpler usermessage (network message) for one client.\n\n_@note_ See StartMessage or `StartMessageEx()`.\n\n_@param_ `msgname` — >Message name to start.\n\n_@param_ `client` — >Client to send to.\n\n_@param_ `flags` — >Optional flags to set.\n\n_@return_ A handle to a bf_write bit packing structure, or                      INVALID_HANDLE on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StoreToAddress",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void StoreToAddress(Address addr, any data, NumberType size, bool updateMemAccess = true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Store up to 4 bytes to a memory address.\n\n_@param_ `addr` — >Address to a memory location.\n\n_@param_ `data` — >Value to store at the address.\n\n_@param_ `size` — >How many bytes should be written.                                 If storing a floating-point value, use NumberType_Int32.\n\n_@param_ `updateMemAccess` — >If true, SourceMod will set read / write / exec permissions                                 on the memory page being written to.\n\n_@error_ Address is null or pointing to reserved memory.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StrBreak",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int StrBreak(const char[] source, char[] arg, int argLen)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Backwards compatibility stock - use BreakString\n\n_@deprecated_ Renamed to BreakString.\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "StrCat",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int StrCat(char[] buffer, int maxlength, const char[] source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Concatenates one string onto another.\n\n_@param_ `buffer` — >String to append to.\n\n_@param_ `maxlength` — >Maximum length of entire buffer.\n\n_@param_ `source` — >Source string to concatenate.\n\n_@return_ Number of bytes written.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StrCompare",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int StrCompare(const char[] str1, const char[] str2, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Backwards compatible stock - StrCompare is now strcmp\n\n_@deprecated_ Renamed to strcmp\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "StrContains",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int StrContains(const char[] str, const char[] substr, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Tests whether a string is found inside another string.\n\n_@param_ `str` — >String to search in.\n\n_@param_ `substr` — >Substring to find inside the original string.\n\n_@param_ `caseSensitive` — >If true (default), search is case sensitive.                      If false, search is case insensitive.\n\n_@return_ -1 on failure (no match found). Any other value                      indicates a position in the string where the match starts.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StrCopy",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock int StrCopy(char[] dest, int destLen, const char[] source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Backwards compatibility stock - use strcopy\n\n_@deprecated_ Renamed to strcopy\r\n "
    },
    "deprecated": true,
    "tags": [
      1
    ]
  },
  {
    "label": "StrEqual",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "stock bool StrEqual(const char[] str1, const char[] str2, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns whether two strings are equal.\n\n_@param_ `str1` — >First string (left).\n\n_@param_ `str2` — >Second string (right).\n\n_@param_ `caseSensitive` — >If true (default), comparison is case sensitive.                      If false, comparison is case insensitive.\n\n_@return_ True if equal, false otherwise.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "String",
    "kind": 14
  },
  {
    "label": "StringMap",
    "labelDetails": {
      "description": "adt_trie.inc"
    },
    "kind": 7,
    "detail": "methodmap StringMap",
    "documentation": {
      "kind": "markdown",
      "value": "Object-oriented wrapper for maps. "
    }
  },
  {
    "label": "StringMapSnapshot",
    "labelDetails": {
      "description": "adt_trie.inc"
    },
    "kind": 7,
    "detail": "methodmap StringMapSnapshot",
    "documentation": {
      "kind": "markdown",
      "value": "\n A StringMapSnapshot is created via StringMap.`Snapshot()`. It captures the keys on a map so they can be read. Snapshots must be freed with delete or `CloseHandle()`.\r\n "
    }
  },
  {
    "label": "StringToFloat",
    "labelDetails": {
      "detail": "float",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native float StringToFloat(const char[] str)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a string to a floating point number.\n\n_@param_ `str` — >String to convert to a float.\n\n_@return_ Floating point result, or 0.0 on error.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StringToFloatEx",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int StringToFloatEx(const char[] str, float &result)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a string to a floating point number with some more options.\n\n_@param_ `str` — >String to convert to a float.\n\n_@param_ `result` — >Variable to store result in.\n\n_@return_ Number of characters consumed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StringToInt",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int StringToInt(const char[] str, int nBase=10)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a string to an integer.\n\n_@param_ `str` — >String to convert.\n\n_@param_ `nBase` — >Numerical base to use.  10 is default.\n\n_@return_ Integer conversion of string, or 0 on failure.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StringToInt64",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int StringToInt64(const char[] str, int result[2], int nBase=10)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a string to a 64-bit integer.\n\n_@param_ `str` — >String to convert.\n\n_@param_ `result` — >Array to store the upper and lower                      32-bits of the 64-bit integer.\n\n_@param_ `nBase` — >Numerical base to use.  10 is default.\n\n_@return_ Number of characters consumed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StringToIntEx",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int StringToIntEx(const char[] str, int &result, int nBase=10)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a string to an integer with some more options.\n\n_@param_ `str` — >String to convert.\n\n_@param_ `result` — >Variable to store the result in.\n\n_@param_ `nBase` — >Numerical base to use.  10 is default.\n\n_@return_ Number of characters consumed.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StringToKeyValues",
    "labelDetails": {
      "detail": "bool",
      "description": "keyvalues.inc"
    },
    "kind": 3,
    "detail": "native bool StringToKeyValues(Handle kv, const char[] buffer, const char[] resourceName=\"StringToKeyValues\")",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts a given string to a KeyValues tree.  The string is read into the current postion of the tree.\n\n_@param_ `kv` — >KeyValues Handle.\n\n_@param_ `buffer` — >String buffer to load into the KeyValues.\n\n_@param_ `resourceName` — >The resource name of the KeyValues, used for error tracking purposes.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "StripQuotes",
    "labelDetails": {
      "detail": "bool",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native bool StripQuotes(char[] text)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Strips a quote pair off a string if it exists.  That is, the following  replace rule is applied once:  ^\"(.*)\"$ -\\> ^\\1$\r\n \n Note that the leading and trailing quotes will only be removed if both  exist.  Otherwise, the string is left unmodified.  This function should  be considered `O(k)` (all characters get shifted down).\n\n_@param_ `text` — >String to modify (in place).\n\n_@return_ True if string was modified, false if there was no                       set of quotes.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SubtractVectors",
    "labelDetails": {
      "detail": "void",
      "description": "vector.inc"
    },
    "kind": 3,
    "detail": "stock void SubtractVectors(const float vec1[3], const float vec2[3], float result[3])",
    "documentation": {
      "kind": "markdown",
      "value": "\n Subtracts a vector from another vector.  It is safe to use either input buffer as an output buffer.\n\n_@param_ `vec1` — >First vector.\n\n_@param_ `vec2` — >Second vector to subtract from first.\n\n_@param_ `result` — >Result buffer.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "SwapArrayItems",
    "labelDetails": {
      "detail": "void",
      "description": "adt_array.inc"
    },
    "kind": 3,
    "detail": "native void SwapArrayItems(Handle array, int index1, int index2)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Swaps two items in the array.\n\n_@param_ `array` — >Array Handle.\n\n_@param_ `index1` — >First index.\n\n_@param_ `index2` — >Second index.\n\n_@error_ Invalid Handle or invalid index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "TIMER_DATA_HNDL_CLOSE",
    "labelDetails": {
      "description": "timers.inc"
    },
    "kind": 21,
    "detail": "#define TIMER_DATA_HNDL_CLOSE (1<<9)",
    "documentation": {
      "kind": "markdown",
      "value": " Timer will automatically call `CloseHandle()` on its data when finished "
    },
    "tags": []
  },
  {
    "label": "TIMER_FLAG_NO_MAPCHANGE",
    "labelDetails": {
      "description": "timers.inc"
    },
    "kind": 21,
    "detail": "#define TIMER_FLAG_NO_MAPCHANGE (1<<1)",
    "documentation": {
      "kind": "markdown",
      "value": " Timer will not carry over mapchanges "
    },
    "tags": []
  },
  {
    "label": "TIMER_HNDL_CLOSE",
    "labelDetails": {
      "description": "timers.inc"
    },
    "kind": 21,
    "detail": "#define TIMER_HNDL_CLOSE (1<<9)",
    "documentation": {
      "kind": "markdown",
      "value": " Deprecated define, replaced by below "
    },
    "tags": []
  },
  {
    "label": "TIMER_REPEAT",
    "labelDetails": {
      "description": "timers.inc"
    },
    "kind": 21,
    "detail": "#define TIMER_REPEAT (1<<0)",
    "documentation": {
      "kind": "markdown",
      "value": " Timer will repeat until it returns Plugin_Stop "
    },
    "tags": []
  },
  {
    "label": "Tangent",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float Tangent(float value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the tangent of the argument.\n\n_@param_ `value` — >Input value in radians.\n\n_@return_ `tan(value)`.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ThrowError",
    "labelDetails": {
      "detail": "void",
      "description": "sourcemod.inc"
    },
    "kind": 3,
    "detail": "native void ThrowError(const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Aborts the current callback and throws an error.  This function does not return in that no code is executed following it.\n\n_@param_ `fmt` — >String format.\n\n_@param_ `...` — >Format arguments.\n\n_@noreturn_ \n\n_@error_ Always!\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "ThrowNativeError",
    "labelDetails": {
      "detail": "int",
      "description": "functions.inc"
    },
    "kind": 3,
    "detail": "native int ThrowNativeError(int error, const char[] fmt, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Throws an error in the calling plugin of a native, instead of your own plugin.\n\n_@param_ `error` — >Error code to use.\n\n_@param_ `fmt` — >Error message format.\n\n_@param_ `...` — >Format arguments.\n\n_@noreturn_ \n\n_@error_ Always!\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Timer",
    "labelDetails": {
      "description": "timers.inc"
    },
    "kind": 8,
    "detail": "typeset Timer",
    "documentation": {
      "kind": "markdown",
      "value": "\n Any of the following prototypes will work for a timed function.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "Transaction",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 7,
    "detail": "methodmap Transaction",
    "documentation": {
      "kind": "markdown",
      "value": "A Transaction is a collection of SQL statements that must all executesuccessfully or not at all."
    }
  },
  {
    "label": "TranslationPhraseExists",
    "labelDetails": {
      "detail": "bool",
      "description": "lang.inc"
    },
    "kind": 3,
    "detail": "native bool TranslationPhraseExists(const char[] phrase)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Determines if the specified phrase exists within the plugin's translation cache.\n\n_@param_ `phrase` — >Phrase to look for.\n\n_@return_ True if phrase exists.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "TrieSnapshotKeyBufferSize",
    "labelDetails": {
      "detail": "int",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native int TrieSnapshotKeyBufferSize(Handle snapshot, int index)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the buffer size required to store a given key. That is, it returns the length of the key plus one.\n\n_@param_ `snapshot` — >Map snapshot.\n\n_@param_ `index` — >Key index (starting from 0).\n\n_@return_ Buffer size required to store the key string.\n\n_@error_ Invalid Handle or index out of range.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "TrieSnapshotLength",
    "labelDetails": {
      "detail": "int",
      "description": "adt_trie.inc"
    },
    "kind": 3,
    "detail": "native int TrieSnapshotLength(Handle snapshot)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Returns the number of keys in a map snapshot. Note that this may be different from the size of the map, since the map can change after the snapshot of its keys was taken.\n\n_@param_ `snapshot` — >Map snapshot.\n\n_@return_ Number of keys.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "TriggerTimer",
    "labelDetails": {
      "detail": "void",
      "description": "timers.inc"
    },
    "kind": 3,
    "detail": "native void TriggerTimer(Handle timer, bool reset=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Manually triggers a timer so its function will be called.\n\n_@param_ `timer` — >Timer Handle to trigger.\n\n_@param_ `reset` — >If reset is true, the elapsed time counter is reset                      so the full interval must pass again.\n\n_@error_ Invalid timer handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "TrimString",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int TrimString(char[] str)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes whitespace characters from the beginning and end of a string.\n\n_@param_ `str` — >The string to trim.\n\n_@return_ Number of bytes written (UTF-8 safe).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UM_BitBuf",
    "labelDetails": {
      "description": "UserMessageType::UM_BitBuf"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "UM_Protobuf",
    "labelDetails": {
      "description": "UserMessageType::UM_Protobuf"
    },
    "kind": 20,
    "tags": []
  },
  {
    "label": "USERMSG_BLOCKHOOKS",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 21,
    "detail": "#define USERMSG_BLOCKHOOKS (1<<7)",
    "documentation": {
      "kind": "markdown",
      "value": " Prevents the message from triggering SourceMod and Metamod hooks "
    },
    "tags": []
  },
  {
    "label": "USERMSG_INITMSG",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 21,
    "detail": "#define USERMSG_INITMSG (1<<3)",
    "documentation": {
      "kind": "markdown",
      "value": " Message will be considered to be an initmsg "
    },
    "tags": []
  },
  {
    "label": "USERMSG_RELIABLE",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 21,
    "detail": "#define USERMSG_RELIABLE (1<<2)",
    "documentation": {
      "kind": "markdown",
      "value": " Message will be set on the reliable stream "
    },
    "tags": []
  },
  {
    "label": "UnhookConVarChange",
    "labelDetails": {
      "detail": "void",
      "description": "convars.inc"
    },
    "kind": 3,
    "detail": "native void UnhookConVarChange(Handle convar, ConVarChanged callback)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a hook for when a console variable's value is changed.\n\n_@param_ `convar` — >Handle to the convar.\n\n_@param_ `callback` — >An OnConVarChanged function pointer.\n\n_@error_ Invalid or corrupt Handle, invalid callback function, or no active hook on convar.\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UnhookEvent",
    "labelDetails": {
      "detail": "void",
      "description": "events.inc"
    },
    "kind": 3,
    "detail": "native void UnhookEvent(const char[] name, EventHook callback, EventHookMode mode=EventHookMode_Post)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes a hook for when a game event is fired.\n\n_@param_ `name` — >Name of event.\n\n_@param_ `callback` — >An EventHook function pointer.\n\n_@param_ `mode` — >Optional EventHookMode determining the type of hook.\n\n_@error_ Invalid callback function or no active hook for specified event.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UnhookUserMessage",
    "labelDetails": {
      "detail": "void",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "native void UnhookUserMessage(UserMsg msg_id, MsgHook hook, bool intercept=false)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Removes one usermessage hook.\n\n_@param_ `msg_id` — >Message index.\n\n_@param_ `hook` — >Function used for the hook.\n\n_@param_ `intercept` — >Specifies whether the hook was an intercept hook or not.\n\n_@error_ Invalid message index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UnsetCommandOverride",
    "labelDetails": {
      "detail": "void",
      "description": "admin.inc"
    },
    "kind": 3,
    "detail": "native void UnsetCommandOverride(const char[] cmd, OverrideType type)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Unsets a command override.\n\n_@param_ `cmd` — >String containing command name (case sensitive).\n\n_@param_ `type` — >Override type (specific command or group).\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UserMessageToBfRead",
    "labelDetails": {
      "detail": "BfRead",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "stock BfRead UserMessageToBfRead(Handle msg)",
    "documentation": {
      "kind": "markdown",
      "value": "Make sure to only call this on readable buffers (eg from a message hook)."
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UserMessageToBfWrite",
    "labelDetails": {
      "detail": "BfWrite",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "stock BfWrite UserMessageToBfWrite(Handle msg)",
    "documentation": {
      "kind": "markdown",
      "value": "Make sure to only call this on writable buffers (eg from StartMessage)."
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UserMessageToProtobuf",
    "labelDetails": {
      "detail": "Protobuf",
      "description": "usermessages.inc"
    },
    "kind": 3,
    "detail": "stock Protobuf UserMessageToProtobuf(Handle msg)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "UserMessageType",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 13,
    "detail": "enum UserMessageType",
    "documentation": {
      "kind": "markdown",
      "value": "\n UserMsg message serialization formats\r\n "
    }
  },
  {
    "label": "UserMsg",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 13,
    "detail": "enum UserMsg",
    "documentation": {
      "kind": "markdown",
      "value": "\n UserMsg helper values.\r\n "
    }
  },
  {
    "label": "VFormat",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int VFormat(char[] buffer, int maxlength, const char[] format, int varpos)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Formats a string according to the SourceMod format rules (see documentation).\n\n_@note_ This is the same as `Format()`, except it grabs parameters from a        parent parameter stack, rather than a local.  This is useful for        implementing your own variable argument functions.\n\n_@param_ `buffer` — >Destination string buffer.\n\n_@param_ `maxlength` — >Maximum length of output string buffer.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `varpos` — >Argument number which contains the '...' symbol.                      Note: Arguments start at 1.\n\n_@return_ Number of bytes written.\n\n_@error_ Invalid argument index.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "VOTEFLAG_NO_REVOTES",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "VOTEINFO_CLIENT_INDEX",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "VOTEINFO_CLIENT_ITEM",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "VOTEINFO_ITEM_INDEX",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "VOTEINFO_ITEM_VOTES",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "VerifyCoreVersion",
    "labelDetails": {
      "detail": "int",
      "description": "core.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "VoteCancel_Generic",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "VoteCancel_NoVotes",
    "labelDetails": {},
    "kind": 20,
    "tags": []
  },
  {
    "label": "VoteHandler",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 8,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "VoteMenu",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "VoteMenuToAll",
    "labelDetails": {
      "detail": "bool",
      "description": "menus.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WriteFile",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool WriteFile(Handle hndl, const any[] items, int num_items, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes binary data to a file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `items` — >Array of items to write.  The data is read directly.                      That is, in 1 or 2-byte mode, the lower `byte(s)` in                      each cell are used directly, rather than performing                      any casts from a 4-byte number to a smaller number.\n\n_@param_ `num_items` — >Number of items in the array.\n\n_@param_ `size` — >Size of each item in the array in bytes.                      Valid sizes are 1, 2, or 4.\n\n_@return_ True on success, false on error.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WriteFileCell",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "stock bool WriteFileCell(Handle hndl, int data, int size)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a single binary cell to a file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `data` — >Cell to write to the file.\n\n_@param_ `size` — >Size of the data to read in bytes.  Valid                      sizes are 1, 2, or 4 bytes.  If the size                      is less than 4 bytes, the data is truncated                      rather than casted.  That is, only the lower                      bits will be read.\n\n_@return_ True on success, false on error.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WriteFileLine",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool WriteFileLine(Handle hndl, const char[] format, any ...)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a line of text to a text file.  A newline is automatically appended.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `format` — >Formatting rules.\n\n_@param_ `...` — >Variable number of format parameters.\n\n_@return_ True on success, false otherwise.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WriteFileString",
    "labelDetails": {
      "detail": "bool",
      "description": "files.inc"
    },
    "kind": 3,
    "detail": "native bool WriteFileString(Handle hndl, const char[] buffer, bool term)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Writes a binary string to a file.\n\n_@param_ `hndl` — >Handle to the file.\n\n_@param_ `buffer` — >String to write.\n\n_@param_ `term` — >True to append NUL terminator, false otherwise.\n\n_@return_ True on success, false on error.\n\n_@error_ Invalid Handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WritePackCell",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void WritePackCell(Handle pack, any cell)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Packs a normal cell into a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `cell` — >Cell to add.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WritePackFloat",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void WritePackFloat(Handle pack, float val)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Packs a float into a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `val` — >Float to add.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WritePackFunction",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void WritePackFunction(Handle pack, Function fktptr)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Packs a function pointer into a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `fktptr` — >Function pointer to add.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "WritePackString",
    "labelDetails": {
      "detail": "void",
      "description": "datapack.inc"
    },
    "kind": 3,
    "detail": "native void WritePackString(Handle pack, const char[] str)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Packs a string into a data pack.\n\n_@param_ `pack` — >Handle to the data pack.\n\n_@param_ `str` — >String to add.\n\n_@error_ Invalid handle.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__BINARY_NAME__",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "__BINARY_PATH__",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "__DATE__",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "__FLOAT_EQ__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_EQ__(float a, float b)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__FLOAT_GE__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_GE__(float a, float b)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__FLOAT_GT__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_GT__(float a, float b)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__FLOAT_LE__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_LE__(float a, float b)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__FLOAT_LT__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_LT__(float a, float b)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__FLOAT_NE__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_NE__(float a, float b)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__FLOAT_NOT__",
    "labelDetails": {
      "detail": "bool",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native bool __FLOAT_NOT__(float a)",
    "deprecated": false,
    "tags": []
  },
  {
    "label": "__LINE__",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "__Pawn",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "__TIME__",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "__ext_core_SetNTVOptional",
    "labelDetails": {
      "detail": "void",
      "description": "core.inc"
    },
    "kind": 3,
    "deprecated": false,
    "tags": []
  },
  {
    "label": "_admin_included",
    "labelDetails": {
      "description": "admin.inc"
    },
    "kind": 21,
    "detail": "#define _admin_included",
    "tags": []
  },
  {
    "label": "_adt_array_included",
    "labelDetails": {
      "description": "adt_array.inc"
    },
    "kind": 21,
    "detail": "#define _adt_array_included",
    "tags": []
  },
  {
    "label": "_adt_included",
    "labelDetails": {
      "description": "adt.inc"
    },
    "kind": 21,
    "detail": "#define _adt_included",
    "tags": []
  },
  {
    "label": "_adt_stack_included",
    "labelDetails": {
      "description": "adt_stack.inc"
    },
    "kind": 21,
    "detail": "#define _adt_stack_included",
    "tags": []
  },
  {
    "label": "_adt_trie_included",
    "labelDetails": {
      "description": "adt_trie.inc"
    },
    "kind": 21,
    "detail": "#define _adt_trie_included",
    "tags": []
  },
  {
    "label": "_auto_version_included",
    "labelDetails": {
      "description": "version_auto.inc"
    },
    "kind": 21,
    "detail": "#define _auto_version_included",
    "tags": []
  },
  {
    "label": "_banning_included",
    "labelDetails": {
      "description": "banning.inc"
    },
    "kind": 21,
    "detail": "#define _banning_included",
    "tags": []
  },
  {
    "label": "_bitbuffer_included",
    "labelDetails": {
      "description": "bitbuffer.inc"
    },
    "kind": 21,
    "detail": "#define _bitbuffer_included",
    "tags": []
  },
  {
    "label": "_clients_included",
    "labelDetails": {
      "description": "clients.inc"
    },
    "kind": 21,
    "detail": "#define _clients_included",
    "tags": []
  },
  {
    "label": "_commandfilters_included",
    "labelDetails": {
      "description": "commandfilters.inc"
    },
    "kind": 21,
    "detail": "#define _commandfilters_included",
    "tags": []
  },
  {
    "label": "_commandline_included_",
    "labelDetails": {
      "description": "commandline.inc"
    },
    "kind": 21,
    "detail": "#define _commandline_included_",
    "tags": []
  },
  {
    "label": "_console_included",
    "labelDetails": {
      "description": "console.inc"
    },
    "kind": 21,
    "detail": "#define _console_included",
    "tags": []
  },
  {
    "label": "_convars_included",
    "labelDetails": {
      "description": "convars.inc"
    },
    "kind": 21,
    "detail": "#define _convars_included",
    "tags": []
  },
  {
    "label": "_core_included",
    "labelDetails": {
      "description": "core.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "_datapack_included",
    "labelDetails": {
      "description": "datapack.inc"
    },
    "kind": 21,
    "detail": "#define _datapack_included",
    "tags": []
  },
  {
    "label": "_dbi_included",
    "labelDetails": {
      "description": "dbi.inc"
    },
    "kind": 21,
    "detail": "#define _dbi_included",
    "tags": []
  },
  {
    "label": "_entity_included",
    "labelDetails": {
      "description": "entity.inc"
    },
    "kind": 21,
    "detail": "#define _entity_included",
    "tags": []
  },
  {
    "label": "_entity_prop_stocks_included",
    "labelDetails": {
      "description": "entity_prop_stocks.inc"
    },
    "kind": 21,
    "detail": "#define _entity_prop_stocks_included",
    "tags": []
  },
  {
    "label": "_events_included",
    "labelDetails": {
      "description": "events.inc"
    },
    "kind": 21,
    "detail": "#define _events_included",
    "tags": []
  },
  {
    "label": "_eventsmsgs_included",
    "labelDetails": {
      "description": "usermessages.inc"
    },
    "kind": 21,
    "detail": "#define _eventsmsgs_included",
    "tags": []
  },
  {
    "label": "_files_included",
    "labelDetails": {
      "description": "files.inc"
    },
    "kind": 21,
    "detail": "#define _files_included",
    "tags": []
  },
  {
    "label": "_float_included",
    "labelDetails": {
      "description": "float.inc"
    },
    "kind": 21,
    "detail": "#define _float_included",
    "tags": []
  },
  {
    "label": "_functions_included",
    "labelDetails": {
      "description": "functions.inc"
    },
    "kind": 21,
    "detail": "#define _functions_included",
    "tags": []
  },
  {
    "label": "_halflife_included",
    "labelDetails": {
      "description": "halflife.inc"
    },
    "kind": 21,
    "detail": "#define _halflife_included",
    "tags": []
  },
  {
    "label": "_handles_included",
    "labelDetails": {
      "description": "handles.inc"
    },
    "kind": 21,
    "detail": "#define _handles_included",
    "tags": []
  },
  {
    "label": "_helpers_included",
    "labelDetails": {
      "description": "helpers.inc"
    },
    "kind": 21,
    "detail": "#define _helpers_included",
    "tags": []
  },
  {
    "label": "_keyvalues_included",
    "labelDetails": {
      "description": "keyvalues.inc"
    },
    "kind": 21,
    "detail": "#define _keyvalues_included",
    "tags": []
  },
  {
    "label": "_lang_included",
    "labelDetails": {
      "description": "lang.inc"
    },
    "kind": 21,
    "detail": "#define _lang_included",
    "tags": []
  },
  {
    "label": "_menus_included",
    "labelDetails": {
      "description": "menus.inc"
    },
    "kind": 21,
    "tags": []
  },
  {
    "label": "_nextmap_included_",
    "labelDetails": {
      "description": "nextmap.inc"
    },
    "kind": 21,
    "detail": "#define _nextmap_included_",
    "tags": []
  },
  {
    "label": "_protobuf_included",
    "labelDetails": {
      "description": "protobuf.inc"
    },
    "kind": 21,
    "detail": "#define _protobuf_included",
    "tags": []
  },
  {
    "label": "_sm_logging_included",
    "labelDetails": {
      "description": "logging.inc"
    },
    "kind": 21,
    "detail": "#define _sm_logging_included",
    "tags": []
  },
  {
    "label": "_sorting_included",
    "labelDetails": {
      "description": "sorting.inc"
    },
    "kind": 21,
    "detail": "#define _sorting_included",
    "tags": []
  },
  {
    "label": "_sourcemod_included",
    "labelDetails": {
      "description": "sourcemod.inc"
    },
    "kind": 21,
    "detail": "#define _sourcemod_included",
    "tags": []
  },
  {
    "label": "_string_included",
    "labelDetails": {
      "description": "string.inc"
    },
    "kind": 21,
    "detail": "#define _string_included",
    "tags": []
  },
  {
    "label": "_textparse_included",
    "labelDetails": {
      "description": "textparse.inc"
    },
    "kind": 21,
    "detail": "#define _textparse_included",
    "tags": []
  },
  {
    "label": "_timers_included",
    "labelDetails": {
      "description": "timers.inc"
    },
    "kind": 21,
    "detail": "#define _timers_included",
    "tags": []
  },
  {
    "label": "_vector_included",
    "labelDetails": {
      "description": "vector.inc"
    },
    "kind": 21,
    "detail": "#define _vector_included",
    "tags": []
  },
  {
    "label": "_version_included",
    "labelDetails": {
      "description": "version.inc"
    },
    "kind": 21,
    "detail": "#define _version_included",
    "tags": []
  },
  {
    "label": "any",
    "kind": 14
  },
  {
    "label": "bar",
    "labelDetails": {
      "detail": "int",
      "description": "global"
    },
    "kind": 6,
    "detail": "int bar;",
    "tags": []
  },
  {
    "label": "bool",
    "kind": 14
  },
  {
    "label": "break",
    "kind": 14
  },
  {
    "label": "case",
    "kind": 14
  },
  {
    "label": "cellmax",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "cellmin",
    "kind": 21,
    "detail": "Hardcoded constant"
  },
  {
    "label": "char",
    "kind": 14
  },
  {
    "label": "continue",
    "kind": 14
  },
  {
    "label": "false",
    "kind": 21
  },
  {
    "label": "float",
    "kind": 14
  },
  {
    "label": "float",
    "labelDetails": {
      "detail": "float",
      "description": "float.inc"
    },
    "kind": 3,
    "detail": "native float float(int value)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Converts an integer into a floating point value.\n\n_@param_ `value` — >Integer to convert.\n\n_@return_ Floating point value.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "foo",
    "labelDetails": {
      "detail": "int",
      "description": "global"
    },
    "kind": 6,
    "detail": "int foo;",
    "tags": []
  },
  {
    "label": "forward",
    "kind": 14
  },
  {
    "label": "int",
    "kind": 14
  },
  {
    "label": "native",
    "kind": 14
  },
  {
    "label": "null",
    "kind": 21
  },
  {
    "label": "public",
    "kind": 14
  },
  {
    "label": "return",
    "kind": 14
  },
  {
    "label": "sizeof",
    "kind": 14
  },
  {
    "label": "stock",
    "kind": 14
  },
  {
    "label": "strcmp",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int strcmp(const char[] str1, const char[] str2, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Compares two strings lexographically.\n\n_@param_ `str1` — >First string (left).\n\n_@param_ `str2` — >Second string (right).\n\n_@param_ `caseSensitive` — >If true (default), comparison is case sensitive.                      If false, comparison is case insensitive.\n\n_@return_ -1 if str1 \\< str2                      0 if str1 == str2                      1 if str1 \\> str2\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "strcopy",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int strcopy(char[] dest, int destLen, const char[] source)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Copies one string to another string.\n\n_@note_ If the destination buffer is too small to hold the source string, the        destination will be truncated.\n\n_@param_ `dest` — >Destination string buffer to copy to.\n\n_@param_ `destLen` — >Destination buffer length (includes null terminator).\n\n_@param_ `source` — >Source string buffer to copy from.\n\n_@return_ Number of characters written to the buffer,                      not including the null terminator.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "strlen",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int strlen(const char[] str)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Calculates the length of a string.\n\n_@param_ `str` — >String to check.\n\n_@return_ Number of valid character bytes in the string.\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "strncmp",
    "labelDetails": {
      "detail": "int",
      "description": "string.inc"
    },
    "kind": 3,
    "detail": "native int strncmp(const char[] str1, const char[] str2, int num, bool caseSensitive=true)",
    "documentation": {
      "kind": "markdown",
      "value": "\n Compares two strings parts lexographically.\n\n_@param_ `str1` — >First string (left).\n\n_@param_ `str2` — >Second string (right).\n\n_@param_ `num` — >Number of characters to compare.\n\n_@param_ `caseSensitive` — >If true (default), comparison is case sensitive.                      If false, comparison is case insensitive.\n\n_@return_ -1 if str1 \\< str2                      0 if str1 == str2                      1 if str1 \\> str2\r\n "
    },
    "deprecated": false,
    "tags": []
  },
  {
    "label": "switch",
    "kind": 14
  },
  {
    "label": "true",
    "kind": 21
  },
  {
    "label": "view_as",
    "kind": 14
  },
  {
    "label": "void",
    "kind": 14
  }
]
