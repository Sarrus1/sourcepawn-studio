#![allow(bad_style, missing_docs, unreachable_pub, unused)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
#[repr(u16)]
pub enum TSKind {
    anon_end = 0,
    identifier = 1,
    anon_LPAREN = 2,
    anon_RPAREN = 3,
    anon_BANG = 4,
    anon_TILDE = 5,
    anon_DASH = 6,
    anon_PLUS = 7,
    anon_AMP = 8,
    anon_STAR = 9,
    anon_SLASH = 10,
    anon_PERCENT = 11,
    anon_PIPE_PIPE = 12,
    anon_AMP_AMP = 13,
    anon_PIPE = 14,
    anon_CARET = 15,
    anon_EQ_EQ = 16,
    anon_BANG_EQ = 17,
    anon_GT = 18,
    anon_GT_EQ = 19,
    anon_LT_EQ = 20,
    anon_LT = 21,
    anon_LT_LT = 22,
    anon_GT_GT = 23,
    anon_GT_GT_GT = 24,
    anon_POUNDinclude = 25,
    anon_POUNDtryinclude = 26,
    anon_POUNDdefine = 27,
    anon_COMMA = 28,
    macro_param = 29,
    anon_POUNDundef = 30,
    anon_POUNDif = 31,
    anon_POUNDelseif = 32,
    anon_POUNDassert = 33,
    anon_defined = 34,
    preproc_else = 35,
    preproc_endif = 36,
    preproc_endinput = 37,
    anon_POUNDpragma = 38,
    anon_POUNDerror = 39,
    anon_POUNDwarning = 40,
    anon_using__intrinsics__DOTHandle = 41,
    anon_assert = 42,
    anon_static_assert = 43,
    anon_EQ = 44,
    anon_forward = 45,
    anon_native = 46,
    anon_DOT_DOT_DOT = 47,
    alias_operator = 48,
    anon_COLON = 49,
    anon_operator = 50,
    anon_const = 51,
    anon_public = 52,
    anon_stock = 53,
    anon_static = 54,
    anon_new = 55,
    anon_decl = 56,
    anon_enum = 57,
    anon_PLUS_EQ = 58,
    anon_DASH_EQ = 59,
    anon_STAR_EQ = 60,
    anon_SLASH_EQ = 61,
    anon_PIPE_EQ = 62,
    anon_AMP_EQ = 63,
    anon_CARET_EQ = 64,
    anon_TILDE_EQ = 65,
    anon_LT_LT_EQ = 66,
    anon_GT_GT_EQ = 67,
    anon_LBRACE = 68,
    anon_RBRACE = 69,
    anon_struct = 70,
    anon_typedef = 71,
    anon_typeset = 72,
    anon_function = 73,
    anon_funcenum = 74,
    anon_functag = 75,
    anon_methodmap = 76,
    anon___nullable__ = 77,
    anon_property = 78,
    anon_get = 79,
    anon_set = 80,
    anon_LBRACK = 81,
    anon_RBRACK = 82,
    anon_void = 83,
    anon_bool = 84,
    anon_int = 85,
    anon_float = 86,
    anon_char = 87,
    anon__ = 88,
    anon_Float = 89,
    anon_String = 90,
    any_type = 91,
    anon_for = 92,
    anon_while = 93,
    anon_do = 94,
    anon_break = 95,
    anon_continue = 96,
    anon_if = 97,
    anon_else = 98,
    anon_switch = 99,
    anon_case = 100,
    anon_COLON_ = 101,
    anon_default_ = 102,
    anon_return_ = 103,
    anon_delete_ = 104,
    anon__manual_semicolon_ = 105,
    anon_GT_GT_GT_EQ_ = 106,
    anon_PERCENT_EQ_ = 107,
    anon_DOT_ = 108,
    anon_QMARK_ = 109,
    anon_COLON_COLON_ = 110,
    anon_DASH_DASH_ = 111,
    anon_PLUS_PLUS_ = 112,
    anon_sizeof_ = 113,
    anon_view_as_ = 114,
    int_literal = 115,
    float_literal = 116,
    anon_SQUOTE_ = 117,
    character = 118,
    anon_DQUOTE_ = 119,
    anon_string_literal_token1_ = 120,
    escape_sequence = 121,
    bool_literal = 122,
    null = 123,
    this = 124,
    system_lib_string = 125,
    comment = 126,
    anon__automatic_semicolon_ = 127,
    anon__ternary_colon_ = 128,
    preproc_arg = 129,
    source_file = 130,
    preproc_include = 131,
    preproc_tryinclude = 132,
    preproc_macro = 133,
    preproc_define = 134,
    preproc_undefine = 135,
    preproc_if = 136,
    preproc_elseif = 137,
    preproc_assert = 138,
    preproc_pragma = 139,
    preproc_error = 140,
    preproc_warning = 141,
    hardcoded_symbol = 142,
    assertion = 143,
    function_definition = 144,
    function_declaration = 145,
    function_declaration_kind = 146,
    parameter_declarations = 147,
    parameter_declaration = 148,
    rest_parameter = 149,
    alias_declaration = 150,
    alias_assignment = 151,
    global_variable_declaration = 152,
    variable_declaration_statement = 153,
    variable_storage_class = 154,
    visibility = 155,
    variable_declaration = 156,
    dynamic_array_declaration = 157,
    dynamic_array = 158,
    new_expression = 159,
    old_global_variable_declaration = 160,
    old_variable_declaration_statement = 161,
    old_variable_declaration = 162,
    r#enum = 163,
    enum_entries = 164,
    enum_entry = 165,
    enum_struct = 166,
    enum_struct_field = 167,
    enum_struct_method = 168,
    typedef = 169,
    typeset = 170,
    typedef_expression = 171,
    funcenum = 172,
    funcenum_member = 173,
    functag = 174,
    methodmap = 175,
    methodmap_alias = 176,
    methodmap_native = 177,
    methodmap_native_constructor = 178,
    methodmap_native_destructor = 179,
    methodmap_method = 180,
    methodmap_method_constructor = 181,
    methodmap_method_destructor = 182,
    methodmap_property = 183,
    methodmap_property_alias = 184,
    methodmap_property_native = 185,
    methodmap_property_method = 186,
    methodmap_property_getter = 187,
    methodmap_property_setter = 188,
    r#struct = 189,
    struct_field = 190,
    struct_declaration = 191,
    struct_constructor = 192,
    struct_field_value = 193,
    r#type = 194,
    array_type = 195,
    old_type = 196,
    dimension = 197,
    fixed_dimension = 198,
    builtin_type = 199,
    old_builtin_type = 200,
    block = 201,
    for_statement = 202,
    while_statement = 203,
    do_while_statement = 204,
    break_statement = 205,
    continue_statement = 206,
    condition_statement = 207,
    switch_statement = 208,
    switch_case = 209,
    expression_statement = 210,
    return_statement = 211,
    delete_statement = 212,
    anon__semicolon_ = 213,
    anon__expression_ = 214,
    anon__case_expression_ = 215,
    assignment_expression = 216,
    call_expression = 217,
    call_arguments = 218,
    named_arg = 219,
    ignore_argument = 220,
    array_indexed_access = 221,
    parenthesized_expression = 222,
    comma_expression = 223,
    ternary_expression = 224,
    field_access = 225,
    scope_access = 226,
    unary_expression = 227,
    case_unary_expression = 228,
    binary_expression = 229,
    case_binary_expression = 230,
    update_expression = 231,
    anon__sizeof_call_expression_ = 232,
    array_scope_access = 233,
    sizeof_expression = 234,
    view_as = 235,
    old_type_cast = 236,
    array_literal = 237,
    anon__literal_ = 238,
    char_literal = 239,
    concatenated_string = 240,
    string_literal = 241,
    rest_operator = 242,
    anon_source_file_repeat1_ = 243,
    anon_preproc_macro_repeat1_ = 244,
    anon_function_definition_repeat1_ = 245,
    anon_parameter_declarations_repeat1_ = 246,
    anon_parameter_declaration_repeat1_ = 247,
    anon_global_variable_declaration_repeat1_ = 248,
    anon_variable_declaration_statement_repeat1_ = 249,
    anon_dynamic_array_repeat1_ = 250,
    anon_old_global_variable_declaration_repeat1_ = 251,
    anon_enum_entries_repeat1_ = 252,
    anon_enum_struct_repeat1_ = 253,
    anon_typeset_repeat1_ = 254,
    anon_funcenum_repeat1_ = 255,
    anon_methodmap_repeat1_ = 256,
    anon_methodmap_property_repeat1_ = 257,
    anon_struct_repeat1_ = 258,
    anon_struct_constructor_repeat1_ = 259,
    anon_block_repeat1_ = 260,
    anon_for_statement_repeat1_ = 261,
    anon_switch_statement_repeat1_ = 262,
    anon_switch_case_repeat1_ = 263,
    anon_call_arguments_repeat1_ = 264,
    anon_array_literal_repeat1_ = 265,
    anon_string_literal_repeat1_ = 266,
}
impl From<tree_sitter::Node<'_>> for TSKind {
    fn from(v: tree_sitter::Node<'_>) -> Self { unsafe { ::std::mem::transmute(v.kind_id()) } }
}
impl From<&tree_sitter::Node<'_>> for TSKind {
    fn from(v: &tree_sitter::Node<'_>) -> Self { Self::from(*v) }
}
