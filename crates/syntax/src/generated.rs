#![allow(bad_style, missing_docs, unreachable_pub, unused)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
#[repr(u16)]
pub enum TSKind {
    sym_symbol = 1,
    anon_sym_LPAREN = 2,
    anon_sym_RPAREN = 3,
    anon_sym_BANG = 4,
    anon_sym_TILDE = 5,
    anon_sym_DASH = 6,
    anon_sym_PLUS = 7,
    anon_sym_STAR = 8,
    anon_sym_SLASH = 9,
    anon_sym_PERCENT = 10,
    anon_sym_PIPE_PIPE = 11,
    anon_sym_AMP_AMP = 12,
    anon_sym_PIPE = 13,
    anon_sym_CARET = 14,
    anon_sym_AMP = 15,
    anon_sym_EQ_EQ = 16,
    anon_sym_BANG_EQ = 17,
    anon_sym_GT = 18,
    anon_sym_GT_EQ = 19,
    anon_sym_LT_EQ = 20,
    anon_sym_LT = 21,
    anon_sym_LT_LT = 22,
    anon_sym_GT_GT = 23,
    anon_sym_GT_GT_GT = 24,
    anon_sym_POUNDinclude = 25,
    anon_sym_POUNDtryinclude = 26,
    anon_sym_POUNDdefine = 27,
    anon_sym_LPAREN2 = 28,
    anon_sym_COMMA = 29,
    anon_sym_RPAREN2 = 30,
    sym_macro_param = 31,
    anon_sym_POUNDundef = 32,
    anon_sym_POUNDif = 33,
    anon_sym_POUNDelseif = 34,
    anon_sym_POUNDassert = 35,
    anon_sym_defined = 36,
    sym_preproc_else = 37,
    sym_preproc_endif = 38,
    sym_preproc_endinput = 39,
    anon_sym_POUNDpragma = 40,
    anon_sym_POUNDerror = 41,
    anon_sym_POUNDwarning = 42,
    anon_sym_using__intrinsics__DOTHandle = 43,
    anon_sym_assert = 44,
    anon_sym_static_assert = 45,
    anon_sym_public = 46,
    anon_sym_stock = 47,
    anon_sym_static = 48,
    anon_sym_forward = 49,
    anon_sym_native = 50,
    anon_sym_const = 51,
    anon_sym_EQ = 52,
    anon_sym_DOT_DOT_DOT = 53,
    sym_alias_operator = 54,
    anon_sym_operator = 55,
    anon_sym_new = 56,
    anon_sym_decl = 57,
    anon_sym_SEMI = 58,
    anon_sym_enum = 59,
    anon_sym_COLON = 60,
    anon_sym_PLUS_EQ = 61,
    anon_sym_DASH_EQ = 62,
    anon_sym_STAR_EQ = 63,
    anon_sym_SLASH_EQ = 64,
    anon_sym_PIPE_EQ = 65,
    anon_sym_AMP_EQ = 66,
    anon_sym_CARET_EQ = 67,
    anon_sym_TILDE_EQ = 68,
    anon_sym_LT_LT_EQ = 69,
    anon_sym_GT_GT_EQ = 70,
    anon_sym_LBRACE = 71,
    anon_sym_RBRACE = 72,
    anon_sym_struct = 73,
    anon_sym_typedef = 74,
    anon_sym_typeset = 75,
    anon_sym_function = 76,
    anon_sym_funcenum = 77,
    anon_sym_functag = 78,
    anon_sym_methodmap = 79,
    anon_sym___nullable__ = 80,
    anon_sym_property = 81,
    anon_sym_get = 82,
    anon_sym_set = 83,
    anon_sym_LBRACK = 84,
    anon_sym_RBRACK = 85,
    anon_sym_void = 86,
    anon_sym_bool = 87,
    anon_sym_int = 88,
    anon_sym_float = 89,
    anon_sym_char = 90,
    anon_sym__ = 91,
    anon_sym_Float = 92,
    anon_sym_String = 93,
    sym_any_type = 94,
    anon_sym_for = 95,
    anon_sym_while = 96,
    anon_sym_do = 97,
    anon_sym_break = 98,
    anon_sym_continue = 99,
    anon_sym_if = 100,
    anon_sym_else = 101,
    anon_sym_switch = 102,
    anon_sym_case = 103,
    anon_sym_COLON2 = 104,
    anon_sym_default = 105,
    anon_sym_return = 106,
    anon_sym_delete = 107,
    anon_sym_DOT = 108,
    anon_sym_QMARK = 109,
    anon_sym_COLON_COLON = 110,
    anon_sym_DASH_DASH = 111,
    anon_sym_PLUS_PLUS = 112,
    anon_sym_sizeof = 113,
    anon_sym_view_as = 114,
    sym_int_literal = 115,
    sym_float_literal = 116,
    anon_sym_SQUOTE = 117,
    aux_sym_char_literal_token1 = 118,
    anon_sym_DQUOTE = 119,
    aux_sym_string_literal_token1 = 120,
    sym_escape_sequence = 121,
    sym_bool_literal = 122,
    sym_null = 123,
    sym_this = 124,
    sym_system_lib_string = 125,
    sym_comment = 126,
    sym__automatic_semicolon = 127,
    sym__ternary_colon = 128,
    sym_preproc_arg = 129,
    sym_source_file = 130,
    sym_preproc_include = 131,
    sym_preproc_tryinclude = 132,
    sym_preproc_macro = 133,
    sym_preproc_define = 134,
    sym_preproc_undefine = 135,
    sym_preproc_if = 136,
    sym_preproc_elseif = 137,
    sym_preproc_assert = 138,
    sym_preproc_pragma = 139,
    sym_preproc_error = 140,
    sym_preproc_warning = 141,
    sym_hardcoded_symbol = 142,
    sym_assertion = 143,
    sym_function_definition = 144,
    sym_function_visibility = 145,
    sym_function_declaration = 146,
    sym_function_declaration_kind = 147,
    sym_parameter_declarations = 148,
    sym_parameter_type = 149,
    sym_parameter_declaration = 150,
    sym_rest_parameter = 151,
    sym_alias_declaration = 152,
    sym_alias_assignment = 153,
    sym_global_variable_declaration = 154,
    sym_variable_declaration_statement = 155,
    sym_variable_storage_class = 156,
    sym_variable_visibility = 157,
    sym_variable_declaration = 158,
    sym_dynamic_array = 159,
    sym_new_expression = 160,
    sym_old_global_variable_declaration = 161,
    sym_old_variable_declaration_statement = 162,
    sym_old_variable_declaration = 163,
    sym_enum = 164,
    sym_enum_entries = 165,
    sym_enum_entry = 166,
    sym_enum_struct = 167,
    sym_enum_struct_field = 168,
    sym_enum_struct_method = 169,
    sym_typedef = 170,
    sym_typeset = 171,
    sym_typedef_expression = 172,
    sym_funcenum = 173,
    sym_funcenum_member = 174,
    sym_functag = 175,
    sym_methodmap = 176,
    sym_methodmap_alias = 177,
    sym_methodmap_native = 178,
    sym_methodmap_native_constructor = 179,
    sym_methodmap_native_destructor = 180,
    sym_methodmap_method = 181,
    sym_methodmap_method_constructor = 182,
    sym_methodmap_method_destructor = 183,
    sym_methodmap_property = 184,
    sym_methodmap_property_alias = 185,
    sym_methodmap_property_native = 186,
    sym_methodmap_property_method = 187,
    sym_methodmap_property_getter = 188,
    sym_methodmap_property_setter = 189,
    sym_struct = 190,
    sym_struct_field = 191,
    sym_struct_declaration = 192,
    sym_struct_constructor = 193,
    sym_struct_field_value = 194,
    sym_type = 195,
    sym_old_type = 196,
    sym_dimension = 197,
    sym_fixed_dimension = 198,
    sym_builtin_type = 199,
    sym_old_builtin_type = 200,
    sym_block = 201,
    sym_for_statement = 202,
    sym_while_statement = 203,
    sym_do_while_statement = 204,
    sym_break_statement = 205,
    sym_continue_statement = 206,
    sym_condition_statement = 207,
    sym_switch_statement = 208,
    sym_switch_case = 209,
    sym_switch_case_values = 210,
    sym_switch_default_case = 211,
    sym_expression_statement = 212,
    sym_return_statement = 213,
    sym_delete_statement = 214,
    sym__manual_semicolon = 215,
    sym__semicolon = 216,
    sym__expression = 217,
    sym_assignment_expression = 218,
    sym_call_expression = 219,
    sym_call_arguments = 220,
    sym_named_arg = 221,
    sym_ignore_argument = 222,
    sym_array_indexed_access = 223,
    sym_parenthesized_expression = 224,
    sym_comma_expression = 225,
    sym_ternary_expression = 226,
    sym_field_access = 227,
    sym_scope_access = 228,
    sym_unary_expression = 229,
    sym_binary_expression = 230,
    sym_update_expression = 231,
    sym__sizeof_call_expression = 232,
    sym_array_scope_access = 233,
    sym_sizeof_expression = 234,
    sym_view_as = 235,
    sym_old_type_cast = 236,
    sym_array_literal = 237,
    sym__literal = 238,
    sym_char_literal = 239,
    sym_concatenated_string = 240,
    sym_string_literal = 241,
    sym_rest_operator = 242,
    aux_sym_source_file_repeat1 = 243,
    aux_sym_preproc_macro_repeat1 = 244,
    aux_sym_function_definition_repeat1 = 245,
    aux_sym_parameter_declarations_repeat1 = 246,
    aux_sym_parameter_declaration_repeat1 = 247,
    aux_sym_global_variable_declaration_repeat1 = 248,
    aux_sym_dynamic_array_repeat1 = 249,
    aux_sym_old_global_variable_declaration_repeat1 = 250,
    aux_sym_old_global_variable_declaration_repeat2 = 251,
    aux_sym_enum_entries_repeat1 = 252,
    aux_sym_enum_struct_repeat1 = 253,
    aux_sym_typeset_repeat1 = 254,
    aux_sym_funcenum_repeat1 = 255,
    aux_sym_methodmap_repeat1 = 256,
    aux_sym_methodmap_property_repeat1 = 257,
    aux_sym_struct_repeat1 = 258,
    aux_sym_struct_constructor_repeat1 = 259,
    aux_sym_block_repeat1 = 260,
    aux_sym_for_statement_repeat1 = 261,
    aux_sym_switch_statement_repeat1 = 262,
    aux_sym_switch_case_values_repeat1 = 263,
    aux_sym_call_arguments_repeat1 = 264,
    aux_sym_array_literal_repeat1 = 265,
    aux_sym_string_literal_repeat1 = 266,
}

impl From<tree_sitter::Node<'_>> for TSKind {
    fn from(v: tree_sitter::Node<'_>) -> Self {
        unsafe { ::std::mem::transmute(v.kind_id()) }
    }
}

impl From<&tree_sitter::Node<'_>> for TSKind {
    fn from(v: &tree_sitter::Node<'_>) -> Self {
        Self::from(*v)
    }
}
