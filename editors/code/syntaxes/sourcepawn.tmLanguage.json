{
  "name": "SourcePawn",
  "scopeName": "source.sourcepawn",
  "patterns": [
    { "include": "#line_continuation_character" },
    {
      "include": "#literals"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#operators"
    },
    { "include": "#preproc" },
    {
      "comment": "Control statements",
      "name": "keyword.control.statement.sourcepawn",
      "match": "\\b(?:if|else|for|while|do|switch|case|default|return|break|continue)\\b"
    },
    {
      "comment": "new statement",
      "match": "(new)\\s+(\\w+)\\s*\\(",
      "captures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": {
          "patterns": [{ "include": "#type" }]
        }
      }
    },

    {
      "comment": "view_as",
      "match": "(view_as)\\s*<\\s*(\\w+)\\s*>",
      "captures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": {
          "patterns": [{ "include": "#type" }, { "include": "#old-type" }]
        }
      }
    },

    {
      "comment": "old type cast",
      "match": "(\\w+)\\:\\s*(\\w+)",
      "captures": {
        "1": {
          "patterns": [{ "include": "#old-type" }]
        },
        "2": {
          "patterns": [
            { "include": "#literals" },
            { "include": "#variable_name" }
          ]
        }
      }
    },

    {
      "comment": "Scope access",
      "match": "(\\w+)\\:\\:(\\w*)",
      "captures": {
        "1": {
          "patterns": [{ "include": "#type_name" }]
        },
        "2": {
          "patterns": [{ "include": "#variable_name" }]
        }
      }
    },

    {
      "include": "#other-keywords"
    },

    { "include": "#methodmap" },
    { "include": "#typedef" },
    { "include": "#typeset" },
    { "include": "#functag" },
    { "include": "#funcenum" },
    { "include": "#enum_struct" },
    { "include": "#enum" },
    { "include": "#struct" },
    { "include": "#old-function-declaration" },
    { "include": "#function-declaration" },
    { "include": "#old-variable-declaration" },
    { "include": "#variable-declaration" },
    { "include": "#function-call" },
    {
      "match": "\\bthis\\b",
      "name": "variable.language.sourcepawn"
    },
    {
      "match": "\\b(\\w+)\\b",
      "captures": {
        "1": {
          "patterns": [{ "include": "#variable_name" }]
        }
      }
    }
  ],

  "repository": {
    "enum": {
      "begin": "(enum)\\s+(?:(\\w+(?:\\:)?)?(?:\\s*(\\([^\\(]*\\)))?)?",
      "beginCaptures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": { "patterns": [{ "include": "#type_name" }] },
        "3": { "patterns": [{ "include": "#literals" }] }
      },
      "end": "(?<=\\})",
      "patterns": [
        { "include": "#literals" },
        { "include": "#comments" },
        { "include": "#preproc" },
        {
          "match": "(\\w+)",
          "captures": { "1": { "patterns": [{ "include": "#variable_name" }] } }
        }
      ]
    },

    "enum_struct": {
      "match": "(enum\\s+struct\\s+)(\\w+)",
      "captures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": {
          "patterns": [{ "include": "#type_name" }]
        }
      }
    },

    "function-call": {
      "comment": "Function call",
      "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.function_call.sourcepawn"
        }
      }
    },

    "other-keywords": {
      "comment": "other-keywords",
      "name": "keyword.sourcepawn",
      "match": "\\b(?:decl|delete|forward|native|public|const|stock|this|sizeof|static|property)\\b"
    },

    "struct": {
      "comment": "struct",
      "match": "(struct)\\s+(\\w+)",
      "captures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": {
          "patterns": [{ "include": "#type_name" }]
        }
      }
    },

    "methodmap": {
      "comment": "methodmap",
      "match": "(methodmap)\\s+([a-zA-Z_]\\w*)\\s*(?:(?:\\<\\s*([a-zA-Z_]\\w*)|(__nullable__)))?",
      "captures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": {
          "patterns": [
            { "match": "[A-Z]\\w*", "name": "support.type.core.sourcepawn" },
            {
              "match": "([^A-Z])(\\w*)",
              "captures": {
                "1": { "name": "invalid.illegal.constant.sourcepawn" },
                "2": { "name": "support.type.core.sourcepawn" }
              }
            }
          ]
        },
        "3": {
          "patterns": [
            { "match": "[A-Z]\\w*", "name": "support.type.core.sourcepawn" },
            {
              "match": "([^A-Z])(\\w*)",
              "captures": {
                "1": { "name": "invalid.illegal.constant.sourcepawn" },
                "2": { "name": "support.type.core.sourcepawn" }
              }
            }
          ]
        },
        "4": {
          "name": "keyword.__nullable__.sourcepawn"
        }
      }
    },

    "typedef": {
      "begin": "(typedef)\\s+(\\w+)\\s*\\=\\s*(function)\\s*(\\w+)\\s*((?:\\[[^\\]]*\\]\\s*)*)\\(",
      "beginCaptures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": { "patterns": [{ "include": "#type_name" }] },
        "3": {
          "patterns": [{ "include": "#keywords" }]
        },
        "4": {
          "patterns": [{ "include": "#type" }]
        },
        "5": {
          "patterns": [{ "include": "#array-indexed-access" }]
        }
      },
      "end": "\\)",
      "patterns": [
        { "include": "#parameters" },
        { "include": "#comments" },
        { "include": "#preproc" }
      ]
    },

    "typeset": {
      "begin": "(typeset)\\s+(\\w+)",
      "beginCaptures": {
        "1": { "patterns": [{ "include": "#keywords" }] },
        "2": { "patterns": [{ "include": "#type_name" }] }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "comment": "typeset member",
          "begin": "(function)\\s+(\\w+)\\s*((?:\\[[^\\]]*\\]\\s*)*)\\(",
          "beginCaptures": {
            "1": {
              "patterns": [{ "include": "#keywords" }]
            },
            "2": { "patterns": [{ "include": "#type" }] },
            "3": { "patterns": [{ "include": "#array-indexed-access" }] }
          },
          "end": "\\)",
          "patterns": [{ "include": "#parameters" }]
        },
        { "include": "#comments" },
        { "include": "#preproc" }
      ]
    },

    "functag": {
      "begin": "(functag)\\s+(\\w+)\\s+(?:([a-zA-Z_]\\w*)\\:\\s*)?(?:(public|stock)\\s*)?\\(",
      "beginCaptures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": { "patterns": [{ "include": "#type_name" }] },
        "3": {
          "patterns": [{ "include": "#old-type" }]
        },
        "4": {
          "patterns": [{ "include": "#keywords" }]
        }
      },
      "end": "\\)",
      "patterns": [
        { "include": "#comments" },
        { "include": "#preproc" },
        { "include": "#parameters" }
      ]
    },

    "funcenum": {
      "begin": "(funcenum)\\s+(\\w+)",
      "beginCaptures": {
        "1": {
          "patterns": [{ "include": "#keywords" }]
        },
        "2": {
          "name": "support.type.core.funcenum.sourcepawn"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "comment": "funcenum member",
          "begin": "(?:(\\w+)\\:)?\\s*(public)\\s*\\(",
          "beginCaptures": {
            "1": { "patterns": [{ "include": "#old-type" }] },
            "2": { "patterns": [{ "include": "#keywords" }] }
          },
          "end": "\\)",
          "patterns": [{ "include": "#parameters" }]
        },
        { "include": "#comments" },
        { "include": "#preproc" }
      ]
    },

    "parameters": {
      "patterns": [
        { "include": "#keywords" },
        { "include": "#literals" },
        { "include": "#parameter-declaration" },
        { "include": "#old-parameter-declaration" }
      ]
    },

    "parameter-declaration": {
      "patterns": [
        {
          "match": "(\\w+)(?:\\s+|(?:\\s*(?:&|(?:\\[\\s*\\])+)\\s*))(\\w+)(?:\\s*((?:\\[[^\\]]*\\]\\s*)+))?",
          "captures": {
            "1": {
              "patterns": [{ "include": "#type" }]
            },
            "2": {
              "patterns": [{ "include": "#variable_name" }]
            },
            "3": { "patterns": [{ "include": "#array-indexed-access" }] }
          }
        }
      ]
    },

    "array-indexed-access": {
      "patterns": [
        {
          "match": "\\[([^\\]]+)\\]",
          "captures": {
            "1": {
              "patterns": [
                { "include": "#literals" },
                {
                  "include": "#other-keywords"
                },
                { "include": "#function-call" },
                { "include": "#variable_name" }
              ]
            }
          }
        }
      ]
    },

    "old-parameter-declaration": {
      "patterns": [
        {
          "match": "(?:(\\w+)\\:\\s*)?(\\w+)\\s*((?:\\[[^\\]]*\\]\\s*)+)?",
          "captures": {
            "1": {
              "patterns": [{ "include": "#old-type" }]
            },
            "2": {
              "patterns": [{ "include": "#variable_name" }]
            },
            "3": { "patterns": [{ "include": "#array-indexed-access" }] }
          }
        }
      ]
    },

    "type": {
      "patterns": [
        {
          "match": "(bool|float|int|char|any|void)|(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.built-in.primitive.sourcepawn"
            },
            "2": { "patterns": [{ "include": "#type_name" }] }
          }
        }
      ]
    },

    "old-type": {
      "patterns": [
        {
          "match": "(bool|any|String|Float)|(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.old.built-in.primitive.sourcepawn"
            },
            "2": { "patterns": [{ "include": "#type_name" }] }
          }
        }
      ]
    },

    "function-declaration": {
      "patterns": [
        {
          "begin": "(?:(stock|public|static)\\s+)?(?:(native|forward)\\s+)?(\\w+)(\\s*(?:\\[[^\\]]*\\]\\s*)*)\\s+([a-zA-Z_]\\w*)\\(",
          "beginCaptures": {
            "1": {
              "patterns": [{ "include": "#keywords" }]
            },
            "2": {
              "patterns": [{ "include": "#keywords" }]
            },
            "3": {
              "patterns": [{ "include": "#type" }]
            },
            "4": {
              "patterns": [{ "include": "#array-indexed-access" }]
            },
            "5": {
              "name": "entity.name.function.sourcepawn"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#parameters"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preproc"
            }
          ]
        }
      ]
    },

    "old-function-declaration": {
      "patterns": [
        {
          "begin": "(?:(stock|public|static)\\s+)?(?:(native|forward)\\s+)?(\\w+)\\:\\s*([a-zA-Z_]\\w*)\\(",
          "beginCaptures": {
            "1": {
              "patterns": [{ "include": "#keywords" }]
            },
            "2": {
              "patterns": [{ "include": "#keywords" }]
            },
            "3": {
              "patterns": [{ "include": "#old-type" }]
            },
            "4": {
              "name": "entity.name.function.sourcepawn"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#parameters"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preproc"
            }
          ]
        }
      ]
    },

    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.sourcepawn",
          "match": "%|&|\\*|/(?!\\*|/)|\\+|\\-|~|=|<|>|!|\\||\\?|:|\\^"
        }
      ]
    },

    "variable-declaration": {
      "patterns": [
        {
          "match": "(?:(stock|public)\\s+)?((?:(?:const|static)\\s+)*)(\\w+)(\\s*(?:\\[[^\\]]*\\]\\s*)*)\\s+(\\w+)\\s*(\\s*(?:\\[[^\\]]*\\]\\s*)*)",
          "captures": {
            "1": {
              "patterns": [{ "include": "#keywords" }]
            },
            "2": {
              "patterns": [{ "include": "#keywords" }]
            },
            "3": {
              "patterns": [{ "include": "#type" }]
            },
            "4": {
              "patterns": [{ "include": "#array-indexed-access" }]
            },
            "5": {
              "patterns": [{ "include": "#variable_name" }]
            },
            "6": {
              "patterns": [{ "include": "#array-indexed-access" }]
            }
          }
        }
      ]
    },

    "old-variable-declaration": {
      "patterns": [
        {
          "match": "(?:(stock|public)\\s+)?((?:(?:const|static)\\s+)*)(new|decl)\\s+(?:(\\w+)\\:\\s*)?(\\w+)(\\s*(?:\\[[^\\]]*\\]\\s*)*)",
          "captures": {
            "1": {
              "patterns": [{ "include": "#keywords" }]
            },
            "2": {
              "patterns": [{ "include": "#keywords" }]
            },
            "3": {
              "patterns": [{ "include": "#keywords" }]
            },
            "4": {
              "patterns": [{ "include": "#old-type" }]
            },
            "5": {
              "patterns": [{ "include": "#variable_name" }]
            },
            "6": {
              "patterns": [{ "include": "#array-indexed-access" }]
            }
          }
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "match": "\\b(public|stock)\\b",
          "name": "keyword.visibility.sourcepawn"
        },
        {
          "match": "\\b(const|static)\\b",
          "name": "keyword.storage_class.sourcepawn"
        },
        {
          "match": "\\b(typeset|typedef|funcenum|functag)\\b",
          "name": "keyword.type_declarator.sourcepawn"
        },
        {
          "match": "\\b(view_as)\\b",
          "name": "keyword.view_as.sourcepawn"
        },
        {
          "match": "\\b(new|decl)\\b",
          "name": "keyword.variable_declarator.sourcepawn"
        },
        {
          "match": "\\b(function)\\b",
          "name": "keyword.function.sourcepawn"
        },
        { "match": "\\b(enum)\\b", "name": "keyword.enum.sourcepawn" },
        { "match": "\\b(struct)\\b", "name": "keyword.struct.sourcepawn" },
        {
          "match": "\\b(methodmap)\\b",
          "name": "keyword.methodmap.sourcepawn"
        }
      ]
    },

    "literals": {
      "patterns": [
        { "include": "#boolean-literal" },
        { "include": "#null-literal" },
        { "include": "#numeric-literal" },
        { "include": "#string-literal" }
      ]
    },

    "boolean-literal": {
      "patterns": [
        {
          "match": "\\b(?:true|false)\\b",
          "name": "constant.language.boolean.sourcepawn"
        }
      ]
    },

    "null-literal": {
      "patterns": [
        {
          "match": "\\bnull\\b",
          "name": "constant.language.sourcepawn"
        }
      ]
    },

    "numeric-literal": {
      "patterns": [
        {
          "comment": "Float literal",
          "match": "[0-9]+\\.[0-9]+",
          "name": "constant.numeric.float.sourcepawn"
        },
        {
          "comment": "Binary literal",
          "match": "\\b0b[0-1]+\\b",
          "name": "constant.numeric.sourcepawn"
        },
        {
          "comment": "Octodecimal literal",
          "match": "\\b0o[0-7]+\\b",
          "name": "constant.numeric.sourcepawn"
        },
        {
          "comment": "Hexadecimal literal",
          "match": "\\b(0x(?:(?:(?:[0-9a-fA-F]{2}_?)+)|(?:[0-9a-fA-F]+)))\\b",
          "name": "constant.numeric.sourcepawn"
        },
        {
          "comment": "Integer literal",
          "match": "\\b((?:\\d|_)+)\\b",
          "name": "constant.numeric.integer.sourcepawn"
        },
        {
          "comment": "Invalid literal",
          "match": "\\b\\d+\\w+\\b",
          "name": "invalid.illegal.constant.sourcepawn"
        }
      ]
    },

    "string-literal": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sourcepawn"
            }
          },
          "end": "(\")|((?:[^\\\\\\n])$)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.sourcepawn"
            },
            "2": {
              "name": "invalid.illegal.newline.sourcepawn"
            }
          },
          "name": "string.quoted.double.sourcepawn",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            { "include": "#string_format_char" },
            { "include": "#string_placeholder" },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sourcepawn"
            }
          },
          "end": "(\\')|((?:[^\\\\\\n])$)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.sourcepawn"
            },
            "2": {
              "name": "invalid.illegal.newline.sourcepawn"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            { "include": "#string_format_char" },
            { "include": "#string_placeholder" },
            {
              "include": "#line_continuation_character"
            }
          ]
        }
      ]
    },

    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.sourcepawn"
            }
          }
        }
      ]
    },

    "string_escaped_char": {
      "patterns": [
        {
          "match": "\\\\(?:[abefnrt'\"\\\\]|(?:x[a-zA-Z0-9]{0,2}|\\d+);?)",
          "name": "constant.character.escape.sourcepawn"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.sourcepawn"
        }
      ]
    },

    "string_format_char": {
      "name": "constant.character.format.sourcepawn",
      "match": "%(?:a|A|b|B|c|C|d|D|e|F|g|G|h|H|I|j|m|M|n|i|p|r|R|S|t|T|u|U|V|u|w|W|x|X|y|Y|z|Z|f|L|N|s|T|t|%|(?:\\d+)?\\.?\\d*(?:b|d|i|u|f|s|X|x))"
    },

    "string_placeholder": {
      "name": "constant.character.sp-translations",
      "match": "\\{(\\w+)\\}",
      "captures": {
        "1": {
          "name": "constant.character.escape.sp-translations"
        }
      }
    },

    "type_name": {
      "patterns": [
        { "match": "\\b\\d\\b", "name": "constant.numeric.integer.sourcepawn" },
        { "match": "[a-zA-Z_]\\w*", "name": "support.type.core.sourcepawn" },
        {
          "match": "([0-9])(\\w*)",
          "captures": {
            "1": { "name": "invalid.illegal.constant.sourcepawn" },
            "2": { "name": "support.type.core.sourcepawn" }
          }
        }
      ]
    },

    "variable_name": {
      "patterns": [
        { "match": "\\b\\d\\b", "name": "constant.numeric.integer.sourcepawn" },
        { "match": "[a-zA-Z_]\\w*", "name": "variable.sourcepawn" },
        {
          "match": "([0-9])(\\w*)",
          "captures": {
            "1": { "name": "invalid.illegal.constant.sourcepawn" },
            "2": { "name": "variable.sourcepawn" }
          }
        }
      ]
    },

    "preproc": {
      "patterns": [
        {
          "match": "(\\#include|\\#tryinclude)\\s*((?:\\<|\").+(?:\\>|\"))",
          "name": "meta.include.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.sourcepawn"
            },
            "2": {
              "name": "string.sourcepawn"
            }
          }
        },
        {
          "match": "(\\#pragma)\\s+(.+?(?=//))",
          "name": "meta.pragma.line-comment.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.pragma.sourcepawn"
            },
            "2": {
              "name": "entity.other.attribute-name.sourcepawn"
            }
          }
        },
        {
          "match": "(\\#pragma)\\s+(deprecated)(.*)",
          "name": "meta.pragma.deprecated.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.pragma.sourcepawn"
            },
            "2": {
              "name": "entity.other.attribute-name.sourcepawn"
            },
            "3": {
              "name": "string.deprecated.sourcepawn"
            }
          }
        },
        {
          "match": "(\\#pragma)\\s+([A-Za-z _0-9]+)",
          "name": "meta.pragma.block-comment.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.pragma.sourcepawn"
            },
            "2": {
              "name": "entity.other.attribute-name.sourcepawn"
            }
          }
        },
        {
          "match": "(\\#define)\\s*(\\w*)",
          "name": "meta.define.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.define.sourcepawn"
            },
            "2": {
              "name": "meta.preprocessor.macro.sourcepawn"
            }
          }
        },
        {
          "match": "(\\#undef)\\s*(\\w*)",
          "name": "meta.undef.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.undef.sourcepawn"
            },
            "2": {
              "name": "meta.preprocessor.macro.sourcepawn"
            }
          }
        },
        {
          "comment": "Preprocessor warning and error with trailing comment",
          "match": "(#\\b(?:warning|error)\\b)\\s*(.+?)(?=/(?:/|\\*))",
          "name": "meta.undef.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.misc.sourcepawn"
            },
            "2": {
              "name": "string.warning.sourcepawn"
            }
          }
        },
        {
          "comment": "Preprocessor warning and error",
          "match": "(#\\b(?:warning|error)\\b)\\s*(.*)",
          "name": "meta.undef.sourcepawn",
          "captures": {
            "1": {
              "name": "keyword.control.misc.sourcepawn"
            },
            "2": {
              "name": "string.warning.sourcepawn"
            }
          }
        },
        {
          "comment": "Preprocessor keywords",
          "match": "#\\b(if|else|endif|emit|deprecated|undef|endinput|endscript|assert|define|file)\\b\\s*",
          "name": "keyword.control.misc.sourcepawn"
        },
        {
          "comment": "Preprocessor defined",
          "match": "(defined)\\s+([A-Za-z_]\\w*)",
          "captures": {
            "1": {
              "name": "meta.preprocessor.conditional.sourcepawn"
            },
            "2": {
              "name": "meta.preprocessor.macro.sourcepawn"
            }
          }
        }
      ]
    },

    "comments": {
      "patterns": [
        {
          "comment": "param spdocs single line",
          "match": "(\\/\\/)\\s*(@param)\\s+([\\w\\.]+)\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "storage.type.class.single-line.spdoc" },
            "3": { "name": "support.variable.single-line.spdoc" },
            "4": { "name": "comment.sourcepawn" }
          }
        },
        {
          "comment": "return spdocs single line",
          "match": "(\\/\\/)\\s*(@return|@noreturn)\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "keyword.control.single-line.spdoc" },
            "3": { "name": "comment.sourcepawn" }
          }
        },
        {
          "comment": "error spdocs single line",
          "match": "(\\/\\/)\\s*(@error)\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "string.regexp.single-line.spdoc" },
            "3": { "name": "comment.sourcepawn" }
          }
        },
        {
          "comment": "note spdocs single line",
          "match": "(\\/\\/)\\s*(@(?:note|deprecated))\\s+(.*)",
          "captures": {
            "1": { "name": "comment.sourcepawn" },
            "2": { "name": "support.function.single-line.spdoc" },
            "3": { "name": "comment.sourcepawn" }
          }
        },
        {
          "match": "\\/\\/.*",
          "name": "comment.sourcepawn"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "comment.sourcepawn"
            }
          },
          "end": "\\*/",
          "name": "comment.block.sourcepawn"
        }
      ]
    }
  }
}